{"version":3,"file":"static/js/154.b662b5e8.chunk.js","mappings":"+NAmBOA,eAAeC,EACpBC,GAEA,IACE,MAAQC,MAAM,KAAEC,UAAiBC,EAAAA,GAASC,KAAKC,UAE/C,IAAKH,EACH,MAAO,CAAEI,SAAS,EAAOC,MAAO,0BAIlC,MAAQN,KAAMO,SAAmBL,EAAAA,GAC9BM,KAAK,sBACLC,OAAO,MACPC,GAAG,UAAWT,EAAKU,IACnBD,GAAG,WAAYX,EAAiBa,UAChCC,SAEH,GAAIN,EAAU,CAAC,IAADO,EAAAC,EAEZ,MAAM,MAAET,SAAgBJ,EAAAA,GACrBM,KAAK,sBACLQ,OAAO,CACNC,OAAQlB,EAAiBmB,KAAKD,OAC9Bd,KAAMJ,EAAiBmB,KAAKf,KAC5BgB,QAA2C,QAApCL,EAA2B,QAA3BC,EAAEhB,EAAiBqB,gBAAQ,IAAAL,OAAA,EAAzBA,EAA2BI,eAAO,IAAAL,GAAAA,EAC3CO,YAAY,IAAIC,MAAOC,gBAExBb,GAAG,KAAMH,EAASI,IAErB,GAAIL,EAEF,OADAkB,QAAQlB,MAAM,iCAAkCA,GACzC,CAAED,SAAS,EAAOC,MAAOA,EAAMmB,QAE1C,KAAO,CAAC,IAADC,EAAAC,EAEL,MAAM,MAAErB,SAAgBJ,EAAAA,GACrBM,KAAK,sBACLoB,OAAO,CACNC,QAAS5B,EAAKU,GACdC,SAAUb,EAAiBa,SAC3BK,OAAQlB,EAAiBmB,KAAKD,OAC9Bd,KAAMJ,EAAiBmB,KAAKf,KAC5BgB,QAA2C,QAApCO,EAA2B,QAA3BC,EAAE5B,EAAiBqB,gBAAQ,IAAAO,OAAA,EAAzBA,EAA2BR,eAAO,IAAAO,GAAAA,IAG/C,GAAIpB,EAEF,OADAkB,QAAQlB,MAAM,iCAAkCA,GACzC,CAAED,SAAS,EAAOC,MAAOA,EAAMmB,QAE1C,CAEA,MAAO,CAAEpB,SAAS,EACpB,CAAE,MAAOC,GAEP,OADAkB,QAAQlB,MAAM,yCAA0CA,GACjD,CACLD,SAAS,EACTC,MAAOA,aAAiBwB,MAAQxB,EAAMmB,QAAU,gBAEpD,CACF,CAKO5B,eAAekC,EACpBnB,GAEA,IACE,MAAQZ,MAAM,KAAEC,UAAiBC,EAAAA,GAASC,KAAKC,UAE/C,IAAKH,EACH,MAAO,CAAEI,SAAS,EAAOC,MAAO,0BAGlC,MAAM,MAAEA,SAAgBJ,EAAAA,GACrBM,KAAK,sBACLwB,SACAtB,GAAG,UAAWT,EAAKU,IACnBD,GAAG,WAAYE,GAElB,OAAIN,GACFkB,QAAQlB,MAAM,iCAAkCA,GACzC,CAAED,SAAS,EAAOC,MAAOA,EAAMmB,UAGjC,CAAEpB,SAAS,EACpB,CAAE,MAAOC,GAEP,OADAkB,QAAQlB,MAAM,6CAA8CA,GACrD,CACLD,SAAS,EACTC,MAAOA,aAAiBwB,MAAQxB,EAAMmB,QAAU,gBAEpD,CACF,CAyCO5B,eAAeoC,EACpBrB,EACAO,GAEA,IACE,MAAQnB,MAAM,KAAEC,UAAiBC,EAAAA,GAASC,KAAKC,UAE/C,IAAKH,EACH,MAAO,CAAEI,SAAS,EAAOC,MAAO,0BAGlC,MAAM,MAAEA,SAAgBJ,EAAAA,GACrBM,KAAK,sBACLQ,OAAO,CACNG,UACAE,YAAY,IAAIC,MAAOC,gBAExBb,GAAG,UAAWT,EAAKU,IACnBD,GAAG,WAAYE,GAElB,OAAIN,GACFkB,QAAQlB,MAAM,0CAA2CA,GAClD,CAAED,SAAS,EAAOC,MAAOA,EAAMmB,UAGjC,CAAEpB,SAAS,EACpB,CAAE,MAAOC,GAEP,OADAkB,QAAQlB,MAAM,wCAAyCA,GAChD,CACLD,SAAS,EACTC,MAAOA,aAAiBwB,MAAQxB,EAAMmB,QAAU,gBAEpD,CACF,C","sources":["utils/supabasePushNotifications.ts"],"sourcesContent":["// Supabase integration for push notifications\n\nimport { supabase } from '../lib/supabaseClient';\nimport type { PushSubscriptionData } from './pushNotifications';\n\nexport interface SupabasePushSubscription {\n  id: string;\n  user_id: string;\n  endpoint: string;\n  p256dh: string;\n  auth: string;\n  enabled: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\n/**\n * Save or update push subscription in Supabase\n */\nexport async function saveSubscriptionToSupabase(\n  subscriptionData: PushSubscriptionData\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n\n    if (!user) {\n      return { success: false, error: 'User not authenticated' };\n    }\n\n    // Check if subscription already exists\n    const { data: existing } = await supabase\n      .from('push_subscriptions')\n      .select('id')\n      .eq('user_id', user.id)\n      .eq('endpoint', subscriptionData.endpoint)\n      .single();\n\n    if (existing) {\n      // Update existing subscription\n      const { error } = await supabase\n        .from('push_subscriptions')\n        .update({\n          p256dh: subscriptionData.keys.p256dh,\n          auth: subscriptionData.keys.auth,\n          enabled: subscriptionData.settings?.enabled ?? true,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', existing.id);\n\n      if (error) {\n        console.error('Failed to update subscription:', error);\n        return { success: false, error: error.message };\n      }\n    } else {\n      // Insert new subscription\n      const { error } = await supabase\n        .from('push_subscriptions')\n        .insert({\n          user_id: user.id,\n          endpoint: subscriptionData.endpoint,\n          p256dh: subscriptionData.keys.p256dh,\n          auth: subscriptionData.keys.auth,\n          enabled: subscriptionData.settings?.enabled ?? true,\n        });\n\n      if (error) {\n        console.error('Failed to insert subscription:', error);\n        return { success: false, error: error.message };\n      }\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error saving subscription to Supabase:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Remove push subscription from Supabase\n */\nexport async function removeSubscriptionFromSupabase(\n  endpoint: string\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n\n    if (!user) {\n      return { success: false, error: 'User not authenticated' };\n    }\n\n    const { error } = await supabase\n      .from('push_subscriptions')\n      .delete()\n      .eq('user_id', user.id)\n      .eq('endpoint', endpoint);\n\n    if (error) {\n      console.error('Failed to delete subscription:', error);\n      return { success: false, error: error.message };\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error removing subscription from Supabase:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Get all push subscriptions for current user\n */\nexport async function getUserSubscriptions(): Promise<{\n  success: boolean;\n  data?: SupabasePushSubscription[];\n  error?: string;\n}> {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n\n    if (!user) {\n      return { success: false, error: 'User not authenticated' };\n    }\n\n    const { data, error } = await supabase\n      .from('push_subscriptions')\n      .select('*')\n      .eq('user_id', user.id)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Failed to fetch subscriptions:', error);\n      return { success: false, error: error.message };\n    }\n\n    return { success: true, data: data || [] };\n  } catch (error) {\n    console.error('Error fetching subscriptions from Supabase:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Update subscription settings (enabled/disabled)\n */\nexport async function updateSubscriptionSettings(\n  endpoint: string,\n  enabled: boolean\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n\n    if (!user) {\n      return { success: false, error: 'User not authenticated' };\n    }\n\n    const { error } = await supabase\n      .from('push_subscriptions')\n      .update({\n        enabled,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('user_id', user.id)\n      .eq('endpoint', endpoint);\n\n    if (error) {\n      console.error('Failed to update subscription settings:', error);\n      return { success: false, error: error.message };\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error updating subscription settings:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n"],"names":["async","saveSubscriptionToSupabase","subscriptionData","data","user","supabase","auth","getUser","success","error","existing","from","select","eq","id","endpoint","single","_subscriptionData$set","_subscriptionData$set2","update","p256dh","keys","enabled","settings","updated_at","Date","toISOString","console","message","_subscriptionData$set3","_subscriptionData$set4","insert","user_id","Error","removeSubscriptionFromSupabase","delete","updateSubscriptionSettings"],"sourceRoot":""}