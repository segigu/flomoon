export interface PeriodModalContent {
  question: string;
  joke: {
    emoji: string;
    text: string;
  };
}

export interface GeneratePeriodContentOptions {
  userName?: string;
  cycleStartISODate: string;
  signal?: AbortSignal;
  apiKey?: string;
}

const responseSchema = {
  name: 'period_modal_copy',
  schema: {
    type: 'object',
    additionalProperties: false,
    required: ['question', 'joke'],
    properties: {
      question: {
        type: 'string',
        description: 'A concise invitation to start tracking the cycle addressed to the user by name.',
      },
      joke: {
        type: 'object',
        additionalProperties: false,
        required: ['emoji', 'text'],
        properties: {
          emoji: {
            type: 'string',
            description: 'One emoji or a short emoji combo.',
          },
          text: {
            type: 'string',
            description: 'A short punchline with playful female sarcasm and a supportive tone.',
          },
        },
      },
    },
  },
} as const;

export async function generatePeriodModalContent({
  userName,
  cycleStartISODate,
  signal,
  apiKey,
}: GeneratePeriodContentOptions): Promise<PeriodModalContent> {
  const key = apiKey || process.env.REACT_APP_OPENAI_API_KEY;

  if (!key) {
    throw new Error('OpenAI API key is not configured. Set REACT_APP_OPENAI_API_KEY.');
  }

  const model = process.env.REACT_APP_OPENAI_MODEL || 'gpt-4o-mini';
  const effectiveUserName = (userName && userName.trim()) ? userName.trim() : '–ù–∞—Å—Ç—è';

  const cycleDate = new Date(cycleStartISODate);
  const readableDate = cycleDate.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });

  const instructions = `–¢—ã ‚Äî –ù–∞—Å—Ç—è-—Å–æ–≤–µ—Ç—á–∏—Ü–∞: —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ —Å —á—ë—Ä–Ω—ã–º, –Ω–æ —Ç—ë–ø–ª—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞ –∏ –∂–µ–ª–µ–∑–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–û–±—Ä–∞—â–∞–π—Å—è –∫ ${effectiveUserName}, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã, –Ω–æ –±–µ–∑ —Å–∏—Ä–æ–ø–∞.
–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∏–∑–±–µ–≥–∞–π —Å–ª–æ–≤ ¬´–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª, ¬´—Ç—Ä–µ–∫–∏–Ω–≥¬ª, ¬´–ø–æ–º–æ—â–Ω–∏–∫¬ª –∏ –ª—é–±—ã—Ö –Ω–∞–º—ë–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–∏—Å. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –∂–∏–≤–∞—è –ø–æ–¥—Ä—É–≥–∞, –≤–æ—Ä—á–∞—â–∞—è —Ä—è–¥–æ–º –Ω–∞ –¥–∏–≤–∞–Ω–µ.
–ù—É–∂–Ω—ã –¥–≤–µ —á–∞—Å—Ç–∏: (1) –æ–¥–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–¥–æ 24 —Å–ª–æ–≤), –≥–¥–µ –≤—ã –≤–º–µ—Å—Ç–µ –æ—Ç–º–µ—á–∞–µ—Ç–µ –¥–∞—Ç—É —Ü–∏–∫–ª–∞ —Å –¥–æ–ª–µ–π –∂—ë—Å—Ç–∫–æ–≥–æ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è; –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å —Å–ø–∞–∑–º—ã, PMS –∏–ª–∏ –∑–∞—Ä—è–¥ —Ö–∞–Ω–¥—Ä—ã, (2) –æ–¥–Ω–∞ —à—É—Ç–∫–∞ –≤ —Å—Ç–∏–ª–µ –∫—Ä–∞—Å–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏/—Å–µ—Ä–∏–∞–ª–∞ —Å –µ–¥–∫–∏–º –∂–µ–Ω—Å–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º, –¥–æ–ø—É—Å–∫–∞—é—â–∏–º –≤–æ—Ä—á–∞–Ω–∏–µ, –Ω–æ –±–µ–∑ —Å–∞–º–æ–æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏—è.
–®—É—Ç–∫–∞ ‚Äî –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –≠–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –≤ —à—É—Ç–∫–µ. –ò–∑–±–µ–≥–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏—à–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ª–æ–∑—É–Ω–≥–æ–≤.`;

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${key}`,
    },
    body: JSON.stringify({
      model,
      temperature: 0.9,
      max_tokens: 450,
      response_format: {
        type: 'json_schema',
        json_schema: responseSchema,
      },
      messages: [
        {
          role: 'system',
          content:
            'You are "–ù–∞—Å—Ç—è", a playful female friend who writes in Russian with witty, supportive sarcasm. Always comply with the provided schema.',
        },
        {
          role: 'user',
          content: instructions,
        },
      ],
    }),
    signal,
  });

  if (!response.ok) {
    let message = 'Failed to generate AI content';
    try {
      const errorPayload = await response.json();
      if (errorPayload?.error?.message) {
        message = errorPayload.error.message;
      }
    } catch {
      /* ignore JSON errors */
    }
    throw new Error(message);
  }

  const payload = await response.json();
  const rawContent = payload?.choices?.[0]?.message?.content;

  if (!rawContent) {
    throw new Error('OpenAI response did not include content.');
  }

  let parsed: PeriodModalContent;
  try {
    parsed = JSON.parse(rawContent);
  } catch (error) {
    throw new Error('Failed to parse AI response.');
  }

  return parsed;
}

export function getFallbackPeriodContent(userName = '–ù–∞—Å—Ç—è'): PeriodModalContent {
  return {
    question: `–ü—Ä–∏–≤–µ—Ç, ${userName}! –û—Ç–º–µ—Ç–∏–º –¥–∞—Ç—É, —á—Ç–æ–±—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–Ω–∞–ª, –∫–æ–≥–¥–∞ –æ—Ä–≥–∞–Ω–∏–∑–º —Å–Ω–æ–≤–∞ —Ä–µ—à–∏–ª —É—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–º—å–µ—Ä—É –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π?`,
    joke: {
      emoji: 'ü§π‚Äç‚ôÄÔ∏è',
      text: '–ï—Å–ª–∏ –±—ã –º–æ–π —Ü–∏–∫–ª –±—ã–ª —Å–µ—Ä–∏–∞–ª–æ–º, –æ–Ω –±—ã –≤—ã—Å—Ç–∞–≤–∏–ª –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –¥–æ—Ä–æ–∂–∫—É ‚Äî –æ–¥–æ–±—Ä—è—é –≥–ª–∞–º—É—Ä!',
    },
  };
}
