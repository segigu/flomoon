export interface PeriodModalContent {
  question: string;
  joke: {
    emoji: string;
    text: string;
  };
}

export interface GeneratePeriodContentOptions {
  userName?: string;
  cycleStartISODate: string;
  signal?: AbortSignal;
  apiKey?: string;
}

const responseSchema = {
  name: 'period_modal_copy',
  schema: {
    type: 'object',
    additionalProperties: false,
    required: ['question', 'joke'],
    properties: {
      question: {
        type: 'string',
        description: 'A concise invitation to start tracking the cycle addressed to the user by name.',
      },
      joke: {
        type: 'object',
        additionalProperties: false,
        required: ['emoji', 'text'],
        properties: {
          emoji: {
            type: 'string',
            description: 'One emoji or a short emoji combo.',
          },
          text: {
            type: 'string',
            description: 'A short punchline with playful female sarcasm and a supportive tone.',
          },
        },
      },
    },
  },
} as const;

export async function generatePeriodModalContent({
  userName,
  cycleStartISODate,
  signal,
  apiKey,
}: GeneratePeriodContentOptions): Promise<PeriodModalContent> {
  const key = apiKey || process.env.REACT_APP_CLAUDE_API_KEY;

  if (!key) {
    throw new Error('Claude API key is not configured. Set REACT_APP_CLAUDE_API_KEY.');
  }

  const effectiveUserName = (userName && userName.trim()) ? userName.trim() : '–ù–∞—Å—Ç—è';

  const cycleDate = new Date(cycleStartISODate);
  const readableDate = cycleDate.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });

  const instructions = `–¢—ã ‚Äî –ù–∞—Å—Ç—è-—Å–æ–≤–µ—Ç—á–∏—Ü–∞: —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ —Å —á—ë—Ä–Ω—ã–º, –Ω–æ —Ç—ë–ø–ª—ã–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞ –∏ –∂–µ–ª–µ–∑–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–û–±—Ä–∞—â–∞–π—Å—è –∫ ${effectiveUserName}, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã, –Ω–æ –±–µ–∑ —Å–∏—Ä–æ–ø–∞.
–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∏–∑–±–µ–≥–∞–π —Å–ª–æ–≤ ¬´–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª, ¬´—Ç—Ä–µ–∫–∏–Ω–≥¬ª, ¬´–ø–æ–º–æ—â–Ω–∏–∫¬ª –∏ –ª—é–±—ã—Ö –Ω–∞–º—ë–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–∏—Å. –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –∂–∏–≤–∞—è –ø–æ–¥—Ä—É–≥–∞, –≤–æ—Ä—á–∞—â–∞—è —Ä—è–¥–æ–º –Ω–∞ –¥–∏–≤–∞–Ω–µ.
–ù—É–∂–Ω—ã –¥–≤–µ —á–∞—Å—Ç–∏: (1) –æ–¥–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–¥–æ 24 —Å–ª–æ–≤), –≥–¥–µ –≤—ã –≤–º–µ—Å—Ç–µ –æ—Ç–º–µ—á–∞–µ—Ç–µ –¥–∞—Ç—É —Ü–∏–∫–ª–∞ —Å –¥–æ–ª–µ–π –∂—ë—Å—Ç–∫–æ–≥–æ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è; –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å —Å–ø–∞–∑–º—ã, PMS –∏–ª–∏ –∑–∞—Ä—è–¥ —Ö–∞–Ω–¥—Ä—ã. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏. (2) –æ–¥–Ω–∞ ¬´–Ω–∞—Ä–æ–¥–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å¬ª ‚Äî –µ–¥–∫–æ–µ, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±—É–¥—Ç–æ –±–∞–±–∫–∞ —É –ø–æ–¥—ä–µ–∑–¥–∞, –Ω–æ —Å —Ç–≤–æ–∏–º —Ñ–∏—Ä–º–µ–Ω–Ω—ã–º —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–π –æ—â—É—â–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ç—ã/–ø–æ–≥–æ–≤–æ—Ä–∫–∏, –Ω–æ –±–µ–∑ –∫–ª–∏—à–µ –∏ –º–æ—Ä–∞–ª–∏–∑–∞—Ç–æ—Ä—Å—Ç–≤–∞.
–≠–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π –Ω–∞—Ä–æ–¥–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏ (1 —à—Ç—É–∫–∞, –º–∞–∫—Å–∏–º—É–º 2, –µ—Å–ª–∏ –æ—á–µ–Ω—å —É–º–µ—Å—Ç–Ω–æ). –ò–∑–±–µ–≥–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏—à–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ª–æ–∑—É–Ω–≥–æ–≤.

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "question": "—Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±–µ–∑ —ç–º–æ–¥–∑–∏",
  "joke": {
    "emoji": "1-2 —ç–º–æ–¥–∑–∏",
    "text": "—Ç–µ–∫—Å—Ç –Ω–∞—Ä–æ–¥–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏"
  }
}`;

  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': key,
      'anthropic-version': '2023-06-01',
    },
    body: JSON.stringify({
      model: 'claude-sonnet-4-5-20250929',
      max_tokens: 500,
      temperature: 0.9,
      system:
        '–¢—ã "–ù–∞—Å—Ç—è" ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–∏—à–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.',
      messages: [
        {
          role: 'user',
          content: instructions,
        },
      ],
    }),
    signal,
  });

  if (!response.ok) {
    let message = 'Failed to generate AI content';
    try {
      const errorPayload = await response.json();
      if (errorPayload?.error?.message) {
        message = errorPayload.error.message;
      }
    } catch {
      /* ignore JSON errors */
    }
    throw new Error(message);
  }

  const payload = await response.json();
  const rawContent = payload?.content?.[0]?.text;

  if (!rawContent) {
    throw new Error('Claude response did not include content.');
  }

  let parsed: PeriodModalContent;
  try {
    // Claude –º–æ–∂–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å JSON –≤ markdown –±–ª–æ–∫, —É–±–∏—Ä–∞–µ–º —ç—Ç–æ
    const cleanContent = rawContent.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    parsed = JSON.parse(cleanContent);
  } catch (error) {
    throw new Error('Failed to parse AI response.');
  }

  return parsed;
}

export function getFallbackPeriodContent(userName = '–ù–∞—Å—Ç—è'): PeriodModalContent {
  return {
    question: `–ü—Ä–∏–≤–µ—Ç, ${userName}! –ù—É —á—Ç–æ, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–µ–º—å–µ—Ä—É —Ü–∏–∫–ª–∞, –ø–æ–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–º –Ω–µ —Ä–µ—à–∏–ª —É—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∞–Ω—Ç—Ä–∞–∫—Ç?`,
    joke: {
      emoji: 'üßô‚Äç‚ôÄÔ∏è',
      text: '–ù–∞—Ä–æ–¥ –≥–ª–∞—Å–∏—Ç: –∫—Ç–æ –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞ –ø–ª–µ–¥–æ–º —É–∫—É—Ç–∞–ª—Å—è ‚Äî —Ç–æ–º—É –≥–æ—Ä–º–æ–Ω—ã –≥–∞–¥–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç—Ä–æ—è—Ç. –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–æ—Ä–∏—é? üòâ',
    },
  };
}
