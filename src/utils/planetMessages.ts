import { callAI } from './aiClient';
import {
  ASTRO_PROFILES,
  PRIMARY_PROFILE_ID,
  type AstroProfile,
} from '../data/astroProfiles';
import {
  buildNatalChartAnalysis,
  type NatalChartAnalysis,
} from './astro';

export interface PlanetDialogueMessage {
  planet: string;
  message: string;
}

export interface PersonalizedPlanetMessages {
  dialogue: PlanetDialogueMessage[];
  timestamp: number;
}

function serializeBirthData(profile: AstroProfile): string {
  const loc = profile.notes?.split('(')[0]?.trim() ?? '–¢–∏–∫—Å–∏';
  return `${profile.birthDate}, ${profile.birthTime ?? '12:00'}, ${loc}`;
}

function serializeChartAnalysis(analysis: NatalChartAnalysis): string {
  return `–ü–ª–∞–Ω–µ—Ç—ã: ${analysis.corePlacements.slice(0, 5).join(', ')}. –ù–∞–ø—Ä—è–∂–µ–Ω–∏—è: ${analysis.hardAspects.slice(0, 3).join(', ')}.`;
}

const NASTIA_PROFILE = ASTRO_PROFILES[PRIMARY_PROFILE_ID];
const NASTIA_CHART_ANALYSIS = buildNatalChartAnalysis(PRIMARY_PROFILE_ID);
const BIRTH_DATA_TEXT = serializeBirthData(NASTIA_PROFILE);
const CHART_ANALYSIS_TEXT = serializeChartAnalysis(NASTIA_CHART_ANALYSIS);


/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–ª–∞–Ω–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.
 * –ö–∞–∂–¥–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç 5 —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ä–∞–∂–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∫–∞—Ä—Ç—ã.
 */
export async function generatePersonalizedPlanetMessages(
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  openAIProxyUrl?: string,
): Promise<PersonalizedPlanetMessages> {

  const prompt = `–°–æ–∑–¥–∞–π 25-30 —Ñ—Ä–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–ª–∞–Ω–µ—Ç (–õ—É–Ω–∞, –ü–ª—É—Ç–æ–Ω, –ù–µ–ø—Ç—É–Ω, –£—Ä–∞–Ω, –í–µ–Ω–µ—Ä–∞, –°–∞—Ç—É—Ä–Ω, –•–∏—Ä–æ–Ω, –ú–µ—Ä–∫—É—Ä–∏–π, –ú–∞—Ä—Å, –Æ–ø–∏—Ç–µ—Ä), –æ–±—Å—É–∂–¥–∞—é—â–∏—Ö –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ù–∞—Å—Ç–∏.

–ù–∞—Å—Ç—è: ${BIRTH_DATA_TEXT}. ${CHART_ANALYSIS_TEXT}

–°–≤—è–∑–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —é–º–æ—Ä–æ–º, –ø–ª–∞–Ω–µ—Ç—ã —Å–ø–æ—Ä—è—Ç –æ –µ—ë —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.

JSON:
{"dialogue": [{"planet": "–õ—É–Ω–∞", "message": "..."}, ...]}

–¢–æ–ª—å–∫–æ JSON –±–µ–∑ markdown.`;

  try {
    console.log('[PlanetMessages] Starting AI call');

    const result = await callAI({
      system: '–°–æ–∑–¥–∞—ë—à—å –¥–∏–∞–ª–æ–≥–∏ –ø–ª–∞–Ω–µ—Ç. JSON —Ç–æ–ª—å–∫–æ.',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
      maxTokens: 2000,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
      openAIProxyUrl,
    });

    let text = result.text.trim().replace(/```json\s*/gi, '').replace(/```/g, '').trim();
    const parsed = JSON.parse(text);

    const dialogue: PlanetDialogueMessage[] = (parsed?.dialogue || [])
      .filter((msg: any) => msg?.planet && msg?.message)
      .map((msg: any) => ({
        planet: msg.planet.trim(),
        message: msg.message.trim(),
      }));

    if (dialogue.length < 20) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—Ä–∞–∑ –≤ –¥–∏–∞–ª–æ–≥–µ');
    }

    console.log('[PlanetMessages] ‚úÖ Generated', dialogue.length, 'messages');

    return {
      dialogue,
      timestamp: Date.now(),
    };
  } catch (error) {
    console.error('[PlanetMessages] Failed to generate via AI:', error);
    throw new Error('–ü–ª–∞–Ω–µ—Ç—ã —É—à–ª–∏ –Ω–∞ –ø–µ—Ä–µ–∫—É—Ä üåô‚òï –ü–æ–ø—Ä–æ–±—É–π –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É!');
  }
}
