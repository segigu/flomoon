import { buildAstroHighlights } from './astro';
import type { AIRequestOptions, AIMessage } from './aiClient';
import { fetchDailyWeatherSummary, fetchWeeklyWeatherSummary } from './weather';
import { buildDailyCycleHint, buildSergeyCycleHint, buildWeeklyCycleHint } from './cyclePrompt';
import type { CycleData, HoroscopeMemoryEntry } from '../types';
import { getCurrentUser } from '../data/userProfile.deprecated';
import { ASTRO_PROFILES } from '../data/astroProfiles';
import type { UserProfileData, PartnerData } from './userContext';
import {
  getUserName,
  getPartnerName,
  hasPartner,
  getUserCoordinates,
  isCycleTrackingEnabled,
} from './userContext';

/**
 * Helper: Get user data with fallback to getCurrentUser()
 * TODO: Remove fallback once all call sites pass userProfile/userPartner
 */
function getUserDataWithFallback(
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null
): { userName: string; partnerName: string; user: any; partner: any } {
  // If provided, use passed data
  if (userProfile !== undefined) {
    const userName = getUserName(userProfile);
    const partnerName = getPartnerName(userPartner);
    return {
      userName,
      partnerName,
      user: { name: userName },
      partner: userPartner ? { name: partnerName } : null,
    };
  }

  // Fallback to hardcoded data (legacy compatibility)
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];
  return {
    userName: user.name,
    partnerName: partner?.name || '',
    user,
    partner,
  };
}

export interface DailyHoroscope {
  text: string;
  date: string | null;
  provider?: 'claude' | 'openai' | 'fallback';
  weekRange?: string;
  highlights?: string[];
  memoryEntry?: HoroscopeMemoryEntry;
}

export interface HoroscopeLoadingMessage {
  emoji: string;
  text: string;
}

const PARTNER_FALLBACK_LEADS = [
  { emoji: 'ü™ê', lead: '–°–∞—Ç—É—Ä–Ω —Ñ—ã—Ä–∫–∞–µ—Ç:' },
  { emoji: 'üî•', lead: '–ú–∞—Ä—Å —Ö–º—É—Ä–∏—Ç—Å—è:' },
  { emoji: 'üåÄ', lead: '–Æ–ø–∏—Ç–µ—Ä –Ω–∞–±–ª—é–¥–∞–µ—Ç:' },
  { emoji: 'üíã', lead: '–í–µ–Ω–µ—Ä–∞ —É—Ö–º—ã–ª—è–µ—Ç—Å—è:' },
  { emoji: 'üì°', lead: '–ú–µ—Ä–∫—É—Ä–∏–π —à–µ–ø—á–µ—Ç:' },
  { emoji: '‚ö°Ô∏è', lead: '–£—Ä–∞–Ω –º–æ—Ä–≥–∞–µ—Ç:' },
  { emoji: 'üßä', lead: '–ù–µ–ø—Ç—É–Ω –≤–∑–¥—ã—Ö–∞–µ—Ç:' },
  { emoji: 'üßØ', lead: '–ü–ª—É—Ç–æ–Ω —â—ë–ª–∫–∞–µ—Ç –∑–∞–∂–∏–≥–∞–ª–∫–æ–π:' },
];

const getPartnerFallbackMiddles = (partnerName: string) => [
  `${partnerName} –æ–ø—è—Ç—å –ª–∏—Å—Ç–∞–µ—Ç —á–∞—Ç—ã`,
  `${partnerName} –ø–∏—à–µ—Ç –ø–ª–∞–Ω –Ω–æ–º–µ—Ä –≤–æ—Å–µ–º—å`,
  `${partnerName} –∫–∏–≤–∞–µ—Ç —Å –≤–∏–¥–æ–º —Å–ø–∞—Å–∏—Ç–µ–ª—è`,
  `${partnerName} –æ—Ç–¥–∏—Ä–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –±–µ–∑ —Ü–µ–ª–∏`,
  `${partnerName} —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–≤–µ—â–∞–Ω–∏–µ —Å –∑–µ—Ä–∫–∞–ª–æ–º`,
  `${partnerName} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—á—ë—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç`,
  `${partnerName} —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥`,
  `${partnerName} –∫–ª—è–Ω—ë—Ç—Å—è, —á—Ç–æ –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º`,
  `${partnerName} –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Ä–∞–¥–∏ –≤–∏–¥–∞`,
  `${partnerName} –∂–æ–Ω–≥–ª–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∫–∞–∫ —à–∞—Ä–∏–∫–∞–º–∏`,
  `${partnerName} –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∞–º —Å–µ–±–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ`,
  `${partnerName} –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–º—ã –æ–¥–Ω–∏–º –≥–ª–∞–∑–æ–º`,
];

const PARTNER_FALLBACK_ENDINGS = [
  '–ö–æ–º–∞–Ω–¥–∞ –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫–∏ –º–æ–ª—á–∞',
  '–ß–∞—Ç—ã —É–∂–µ —ë—Ä–Ω–∏—á–∞—é—Ç –≤ —Ñ–æ–Ω–µ',
  '–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –∫–∞—Ç–∏—Ç –≥–ª–∞–∑–∞',
  'HR –∑–∞–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É',
  '–ü—Ä–∏–Ω—Ç–µ—Ä –ø–∏—à–µ—Ç –º–µ–º—É–∞—Ä—ã —Ñ–µ–π–ª–æ–≤',
  '–û—Ñ–∏—Å –ø—Ä—è—á–µ—Ç —Å–º–µ—Ö –ø–æ —É–≥–ª–∞–º',
  '–î–µ–¥–ª–∞–π–Ω—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –ø–æ–ø–∫–æ—Ä–Ω',
  '–£–±–æ—Ä—â–∏—Ü–∞ —Å—Ç–∞–≤–∏—Ç –≥–∞–ª–æ—á–∫—É ¬´–ø–æ–≤—Ç–æ—Ä¬ª',
  '–°—Ç–µ–Ω–∞ —à–µ–ø—á–µ—Ç ¬´–∞–≥–∞, –∫–æ–Ω–µ—á–Ω–æ¬ª',
  '–ß–∞—Å—ã —Å—á–∏—Ç–∞—é—Ç –¥–æ –ø–∞–¥–µ–Ω–∏—è',
  '–°—Ç–∏–∫–µ—Ä—ã –¥—Ä–æ–∂–∞—Ç –æ—Ç —Å–∞—Ä–∫–∞–∑–º–∞',
  '–°–æ—Å–µ–¥–Ω–∏–π –æ—Ç–¥–µ–ª —Å–Ω–∏–º–∞–µ—Ç —Å—Ç–æ—Ä–∏—Å',
];

const getPartnerStaticFallback = (partnerName: string): HoroscopeLoadingMessage[] => [
  { emoji: 'üßØ', text: `–ú–∞—Ä—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á–µ–º —Ç—É—à–∏—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–æ–∂–∞—Ä, –ø–æ–∫–∞ ${partnerName} –¥—ã—à–∏—Ç –Ω–∞ –ø–µ–ø–µ–ª–∏—â–µ.` },
  { emoji: 'üõ†Ô∏è', text: `–°–∞—Ç—É—Ä–Ω –≤—ã–¥–∞–ª ${partnerName} –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ ‚Äî —á–∏–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ —Ä—É—Ö–Ω—É–ª–æ –∑–∞ –Ω–æ—á—å.` },
  { emoji: 'üßæ', text: `–ú–µ—Ä–∫—É—Ä–∏–π –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–ª ${partnerName}, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–µ–∂–Ω–∏–π —É–∂–µ —Å–≥–æ—Ä–µ–ª –Ω–∞—Ö—É–π.` },
  { emoji: 'üö¨', text: `–ü–ª—É—Ç–æ–Ω –ø–æ–¥–∫—É—Ä–∏–≤–∞–µ—Ç ${partnerName} —Å–∏–≥–∞—Ä–µ—Ç—É –∏ —à–µ–ø—á–µ—Ç, —á—Ç–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –≤—ã–π–¥–µ—Ç.` },
  { emoji: 'üì¶', text: `–Æ–ø–∏—Ç–µ—Ä –Ω–∞–≤–∞–ª–∏–ª –∑–∞–¥–∞—á, –ø–æ–∫–∞ ${partnerName} —Ç–∞—Å–∫–∞–ª –∫–æ—Ä–æ–±–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–ª—Å—è —Å–∫–≤–æ–∑—å –∑—É–±—ã.` },
];

const pickRandom = <T,>(values: T[]): T => values[Math.floor(Math.random() * values.length)];

export function getSergeyLoadingFallback(count = 10, userPartner?: PartnerData | null): HoroscopeLoadingMessage[] {
  const partnerName = getPartnerName(userPartner, '–ø–∞—Ä—Ç–Ω—ë—Ä');
  const partnerMiddles = getPartnerFallbackMiddles(partnerName);

  const results: HoroscopeLoadingMessage[] = [];
  const usedCombos = new Set<string>();
  let attempts = 0;
  const maxAttempts = count * 25;

  while (results.length < count && attempts < maxAttempts) {
    attempts += 1;
    const lead = pickRandom(PARTNER_FALLBACK_LEADS);
    const middle = pickRandom(partnerMiddles);
    const ending = pickRandom(PARTNER_FALLBACK_ENDINGS);
    const key = `${lead.lead}|${middle}|${ending}`;
    if (usedCombos.has(key)) {
      continue;
    }
    usedCombos.add(key);
    const text = `${lead.lead} ${middle}. ${ending}.`.replace(/\s+/g, ' ').trim();
    results.push({ emoji: lead.emoji, text });
  }

  if (results.length < count) {
    const extra = [...getPartnerStaticFallback(partnerName)];
    while (results.length < count && extra.length > 0) {
      const candidate = extra.shift()!;
      results.push(candidate);
    }
    while (results.length < count) {
      results.push({
        emoji: pickRandom(PARTNER_FALLBACK_LEADS).emoji,
        text: `–ó–≤—ë–∑–¥—ã –º–∏–≥–Ω—É–ª–∏: ${partnerName} —Å–Ω–æ–≤–∞ –ø—Ä–æ–¥–∞—ë—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ—Ä—è–¥–∫–∞.`,
      });
    }
  }

  return results;
}

export interface SergeyBannerCopy {
  title: string;
  subtitle: string;
  primaryButton: string;
  secondaryButton: string;
}

const MAX_MEMORY_KEEP = 12;
const DAILY_MEMORY_LOOKBACK = 4;
const STATIC_AVOID_THEMES = [
  '–∑–∞–µ–∑–∂–µ–Ω–Ω–æ–µ –Ω—ã—Ç—å—ë –ø—Ä–æ –ø–æ–≥–æ–¥—É',
  '–≤–µ—á–Ω–æ–µ "–Ω–∞—á–Ω—É —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"',
  '–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–µ–ª',
  '–ø—è—Ç—É—é –∫—Ä—É–∂–∫—É –∫–æ—Ñ–µ "–±–µ–∑ –Ω–µ–≥–æ –Ω–µ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å"',
  '—Å–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—â–∞–ª–∏ –±—Ä–æ—Å–∏—Ç—å',
  '–∂–∞–ª–æ–±—ã –Ω–∞ –±–µ—Å—Å–æ–Ω–Ω–∏—Ü—É –∫–∞–∫ –º–∞–Ω—Ç—Ä—É',
];
const STATIC_SERGEY_AVOID_THEMES = [
  '—É–≥—Ä—é–º',
  '–º—Ä–∞—á–Ω',
  '—Ö–æ–¥–∏—Ç —Ç–µ–Ω—å—é',
  '–±—É—Ä—á–∏—Ç –º–æ–ª—á–∞',
  '—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π –¥–µ–Ω—å',
  '–≤–µ—á–Ω–æ –≤—ã–∂–∞—Ç—ã–π',
  '–±–∞—Ä–¥–∞–∫',
  '–±–µ—Ä–ª–æ–≥–∞',
  '—Ö–∞–æ—Å –≤ –æ—Ñ–∏—Å–µ',
  '—Å–Ω–æ–≤–∞ –º—É—Ç–∏—Ç',
  '–æ–ø—è—Ç—å –∑–∞—Ç–µ–≤–∞–µ—Ç',
  '–æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–ª–∞–Ω',
  '—Å–Ω–æ–≤–∞ —á—Ç–æ-—Ç–æ',
];

function sortMemoryByRecency(entries: HoroscopeMemoryEntry[] | undefined): HoroscopeMemoryEntry[] {
  if (!entries?.length) {
    return [];
  }
  return [...entries].sort(
    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),
  );
}

function selectRecentMemory(
  entries: HoroscopeMemoryEntry[] | undefined,
  source: HoroscopeMemoryEntry['source'],
  limit = DAILY_MEMORY_LOOKBACK,
): HoroscopeMemoryEntry[] {
  return sortMemoryByRecency(entries)
    .filter(entry => entry.source === source)
    .slice(0, limit);
}

function formatMemoryDateLabel(value: string, language = 'ru'): string {
  const parsed = new Date(value);
  if (Number.isNaN(parsed.getTime())) {
    return value;
  }

  const locale = language === 'en' ? 'en-US' : language === 'de' ? 'de-DE' : 'ru-RU';

  return new Intl.DateTimeFormat(locale, {
    day: 'numeric',
    month: 'long',
  }).format(parsed);
}

function buildDailyMemoryReminders(
  memoryEntries: HoroscopeMemoryEntry[] | undefined,
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string[] {
  const userName = getUserName(userProfile);
  const defaultPartnerName = language === 'en' ? 'partner' : language === 'de' ? 'Partner' : '–ø–∞—Ä—Ç–Ω—ë—Ä';
  const partnerName = getPartnerName(userPartner, defaultPartnerName);

  const reminders: string[] = [
    language === 'en'
      ? `- Don't rehash personal details unnecessarily: keep focus on today, ${userName}'s feelings, and interaction with ${partnerName}.`
      : language === 'de'
      ? `- Wiederkaue pers√∂nliche Details nicht grundlos: behalte den Fokus auf dem heutigen Tag, ${userName}s Gef√ºhlen und der Interaktion mit ${partnerName}.`
      : `- –õ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –Ω–µ –º—É—Å–æ–ª—å –±–µ–∑ –ø–æ–≤–æ–¥–∞: –¥–µ—Ä–∂–∏ —Ñ–æ–∫—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ, –æ—â—É—â–µ–Ω–∏—è—Ö ${userName} –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å ${partnerName}.`,
    language === 'en'
      ? `- Overused images (${STATIC_AVOID_THEMES.join(', ')}) ‚Äî either avoid or radically reimagine.`
      : language === 'de'
      ? `- Abgedroschene Bilder (${STATIC_AVOID_THEMES.join(', ')}) ‚Äî entweder umgehen oder radikal neu denken.`
      : `- –ó–∞–µ–∑–∂–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã (${STATIC_AVOID_THEMES.join(', ')}) –ª–∏–±–æ –æ–±—Ö–æ–¥–∏, –ª–∏–±–æ —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª—è–π.`,
  ];

  const recent = selectRecentMemory(memoryEntries, 'daily');
  if (!recent.length) {
    return reminders;
  }

  const historyPieces = recent.map(entry => {
    const label = formatMemoryDateLabel(entry.date, language);
    const mainTheme = entry.keyThemes?.length
      ? entry.keyThemes.slice(0, 2).join(' / ')
      : entry.summary;
    return `${label} ‚Äî ${mainTheme}`;
  });

  reminders.push(
    language === 'en'
      ? `- Recent days already covered: ${historyPieces.join('; ')}. Find a fresh angle and new details.`
      : language === 'de'
      ? `- Aus den letzten Tagen bereits behandelt: ${historyPieces.join('; ')}. Finde einen frischen Blickwinkel und neue Details.`
      : `- –ò–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–Ω–µ–π —É–∂–µ –∑–≤—É—á–∞–ª–æ: ${historyPieces.join('; ')}. –ù–∞–π–¥–∏ —Å–≤–µ–∂–∏–π —Ä–∞–∫—É—Ä—Å –∏ –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏.`,
  );

  const avoidPhrases = Array.from(
    new Set(
      recent
        .flatMap(entry => entry.avoidPhrases ?? [])
        .filter((phrase): phrase is string => typeof phrase === 'string' && phrase.trim().length > 0),
    ),
  ).slice(0, 3);

  if (avoidPhrases.length > 0) {
    const formatted = avoidPhrases.map(phrase => `¬´${phrase}¬ª`).join(', ');
    reminders.push(
      language === 'en'
        ? `- Don't repeat verbatim ${formatted} ‚Äî repackage the thoughts differently.`
        : language === 'de'
        ? `- Wiederhole nicht w√∂rtlich ${formatted} ‚Äî verpacke die Gedanken anders.`
        : `- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ${formatted} ‚Äî –ø–µ—Ä–µ—É–ø–∞–∫—É–π –º—ã—Å–ª–∏ –∏–Ω–∞—á–µ.`,
    );
  }

  const staleThemeSet = new Set(
    new Set(
      recent
        .flatMap(entry => entry.keyThemes ?? [])
        .filter((theme): theme is string => typeof theme === 'string' && theme.trim().length > 0),
    ),
  );
  STATIC_AVOID_THEMES.forEach(theme => staleThemeSet.delete(theme));
  const staleThemes = Array.from(staleThemeSet).slice(0, 4);

  if (staleThemes.length > 0) {
    reminders.push(
      language === 'en'
        ? `- Themes ${staleThemes.join(', ')} already used. Come up with a different occasion or conflict.`
        : language === 'de'
        ? `- Themen ${staleThemes.join(', ')} wurden bereits verwendet. Erfinde einen anderen Anlass oder Konflikt.`
        : `- –¢–µ–º—ã ${staleThemes.join(', ')} —É–∂–µ –∑–≤—É—á–∞–ª–∏. –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π –ø–æ–≤–æ–¥ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç.`,
    );
  }

  return reminders;
}

function buildSergeyMemoryReminders(
  memoryEntries: HoroscopeMemoryEntry[] | undefined,
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string[] {
  const userName = getUserName(userProfile);
  const defaultPartnerName = language === 'en' ? 'partner' : language === 'de' ? 'Partner' : '–ø–∞—Ä—Ç–Ω—ë—Ä';
  const partnerName = getPartnerName(userPartner, defaultPartnerName);

  const reminders: string[] = [
    language === 'en'
      ? `- Be more sarcastic: find new everyday jokes about ${partnerName}, don't repeat yesterday's memes.`
      : language === 'de'
      ? `- Sei sarkastischer: finde neue allt√§gliche Witze √ºber ${partnerName}, wiederhole nicht die gestrigen Memes.`
      : `- –®—É—Ç–∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω–µ–µ: –Ω–∞—Ö–æ–¥–∏ –Ω–æ–≤—ã–µ –±—ã—Ç–æ–≤—ã–µ –ø—Ä–∏–∫–æ–ª—ã –ø—Ä–æ ${partnerName}, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤—á–µ—Ä–∞—à–Ω–∏–µ –º–µ–º—ã.`,
    language === 'en'
      ? `- Forbidden clich√©s: ${STATIC_SERGEY_AVOID_THEMES.join(', ')}.`
      : language === 'de'
      ? `- Verbotene Klischees: ${STATIC_SERGEY_AVOID_THEMES.join(', ')}.`
      : `- –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–ª–∏—à–µ: ${STATIC_SERGEY_AVOID_THEMES.join(', ')}.`,
    language === 'en'
      ? `- DON'T repeat the name "${partnerName}" every sentence ‚Äî use pronouns "his", "him", "he".`
      : language === 'de'
      ? `- Wiederhole NICHT den Namen ‚Äû${partnerName}" in jedem Satz ‚Äî verwende Pronomen ‚Äûsein", ‚Äûihm", ‚Äûer".`
      : `- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏–º—è ¬´${partnerName}¬ª –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´—É –Ω–µ–≥–æ¬ª, ¬´–µ–º—É¬ª, ¬´–æ–Ω¬ª.`,
    language === 'en'
      ? `- DON'T use template phrases about ${userName} like "you, ${userName}, are holding up well" ‚Äî either don't mention her at all, or do it naturally.`
      : language === 'de'
      ? `- Verwende KEINE Schablonens√§tze √ºber ${userName} wie ‚Äûdu, ${userName}, h√§ltst dich gut" ‚Äî erw√§hne sie entweder gar nicht oder nat√ºrlich.`
      : `- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø—Ä–æ ${userName} —Ç–∏–ø–∞ ¬´—Ç—ã –∂–µ, ${userName}, –¥–µ—Ä–∂–∏—à—å—Å—è –º–æ–ª–æ–¥—Ü–æ–º¬ª ‚Äî –ª–∏–±–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –µ—ë –≤–æ–æ–±—â–µ, –ª–∏–±–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.`,
  ];

  const recent = selectRecentMemory(memoryEntries, 'sergey');
  if (!recent.length) {
    return reminders;
  }

  const historyPieces = recent.map(entry => {
    const label = formatMemoryDateLabel(entry.date, language);
    const mainTheme = entry.keyThemes?.length
      ? entry.keyThemes.slice(0, 2).join(' / ')
      : entry.summary;
    return `${label} ‚Äî ${mainTheme}`;
  });

  reminders.push(
    language === 'en'
      ? `- Already covered: ${historyPieces.join('; ')}. Find a fresh topic or new twist.`
      : language === 'de'
      ? `- Bereits behandelt: ${historyPieces.join('; ')}. Finde ein frisches Thema oder eine neue Wendung.`
      : `- –£–∂–µ –∑–≤—É—á–∞–ª–æ: ${historyPieces.join('; ')}. –ù–∞–π–¥–∏ —Å–≤–µ–∂—É—é —Ç–µ–º—É –∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç.`,
  );

  const avoidPhrases = Array.from(
    new Set(
      recent
        .flatMap(entry => entry.avoidPhrases ?? [])
        .filter((phrase): phrase is string => typeof phrase === 'string' && phrase.trim().length > 0),
    ),
  ).slice(0, 3);

  if (avoidPhrases.length > 0) {
    const formatted = avoidPhrases.map(phrase => `¬´${phrase}¬ª`).join(', ');
    reminders.push(
      language === 'en'
        ? `- Don't repeat verbatim ${formatted} ‚Äî come up with a new presentation.`
        : language === 'de'
        ? `- Wiederhole nicht w√∂rtlich ${formatted} ‚Äî erfinde eine neue Darstellung.`
        : `- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ${formatted} ‚Äî –ø—Ä–∏–¥—É–º–∞–π –Ω–æ–≤—É—é –ø–æ–¥–∞—á—É.`,
    );
  }

  const staleThemeSet = new Set(
    new Set(
      recent
        .flatMap(entry => entry.keyThemes ?? [])
        .filter((theme): theme is string => typeof theme === 'string' && theme.trim().length > 0),
    ),
  );
  STATIC_SERGEY_AVOID_THEMES.forEach(theme => staleThemeSet.delete(theme));
  const staleThemes = Array.from(staleThemeSet).slice(0, 4);

  if (staleThemes.length > 0) {
    reminders.push(
      language === 'en'
        ? `- Themes ${staleThemes.join(', ')} already used. Find another occasion, preferably funny.`
        : language === 'de'
        ? `- Themen ${staleThemes.join(', ')} waren bereits da. Finde einen anderen Anlass, vorzugsweise lustig.`
        : `- –¢–µ–º—ã ${staleThemes.join(', ')} —É–∂–µ –±—ã–ª–∏. –ù–∞–π–¥–∏ –¥—Ä—É–≥–æ–π –ø–æ–≤–æ–¥, –ª—É—á—à–µ —Å–º–µ—à–Ω–æ–π.`,
    );
  }

  return reminders;
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞).
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ userProfile –∏ astroProfiles.
 */
function buildUserContext(
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const userName = getUserName(userProfile);
  const partnerName = getPartnerName(userPartner);

  // Build context from natal chart data only
  let birthInfo = '';
  if (userProfile?.birth_date) {
    birthInfo = `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${userProfile.birth_date}`;
    if (userProfile.birth_time) {
      birthInfo += `, –≤—Ä–µ–º—è: ${userProfile.birth_time}`;
    }
    if (userProfile.birth_place) {
      birthInfo += `, –º–µ—Å—Ç–æ: ${userProfile.birth_place}`;
    }
    birthInfo += '.';
  }

  const partnerInfo = partnerName
    ? `–ü–∞—Ä—Ç–Ω—ë—Ä: ${partnerName}.`
    : '';

  // Minimal context - only name, natal chart, and partner
  return `
${userName} ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.${birthInfo ? `\n${birthInfo}` : ''}
${partnerInfo}

–ü–∏—à–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –¢–æ–Ω ‚Äî –∏—Ä–æ–Ω–∏—á–Ω—ã–π –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —Å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π –ø–æ –¥–µ–ª—É.
–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –¥–µ—Ç–µ–π –∏–ª–∏ –¥—Ä—É–∑–µ–π. –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –ø–æ–≤–æ–¥–∞ ‚Äî –≥–æ–≤–æ—Ä–∏ –æ —Ç–µ–∫—É—â–∏—Ö –æ—â—É—â–µ–Ω–∏—è—Ö –∏ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤.
`.trim();
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞).
 */
function buildPartnerContext(
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const userName = getUserName(userProfile);
  const partnerName = getPartnerName(userPartner);

  if (!partnerName) {
    throw new Error('Partner not defined - cannot generate partner horoscope');
  }

  // Build context from natal chart data only
  let birthInfo = '';
  if (userPartner?.birth_date) {
    birthInfo = `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${userPartner.birth_date}`;
    if (userPartner.birth_time) {
      birthInfo += `, –≤—Ä–µ–º—è: ${userPartner.birth_time}`;
    }
    if (userPartner.birth_place) {
      birthInfo += `, –º–µ—Å—Ç–æ: ${userPartner.birth_place}`;
    }
    birthInfo += '.';
  }

  // Minimal context - only name and natal chart
  return `
${partnerName} ‚Äî –ø–∞—Ä—Ç–Ω—ë—Ä ${userName}.${birthInfo ? `\n${birthInfo}` : ''}

–ü–∏—à–∏ –æ ${partnerName} –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –¢–æ–Ω ‚Äî –∏—Ä–æ–Ω–∏—á–Ω—ã–π –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –±–µ–∑ –ø–∞—Ñ–æ—Å–∞.
–í —Ç–µ–∫—Å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π ${userName}, –∞ ${partnerName} —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥–Ω–∞—á–∏–≤–∞–π.
`.trim();
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞.
 */
function buildHoroscopeSystemPrompt(
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const userName = getUserName(userProfile);
  const userContext = buildUserContext(userProfile, userPartner);

  // Fallback to hardcoded astro profile if no profile data
  let birthDate = '–û–≤–µ–Ω ‚ôàÔ∏è';
  if (!userProfile) {
    const user = getCurrentUser();
    const astroProfile = ASTRO_PROFILES[user.astroProfileId];
    birthDate = astroProfile.birthDate;
  }

  if (language === 'en') {
    return `You write a weekly horoscope for ${userName} (${birthDate}, Aries ‚ôàÔ∏è).

CONTEXT:
${userContext}

STYLE:
Write with MAXIMUM sarcasm and irony ‚Äî like the wittiest best friend who tells the truth without sugarcoating. Use profanity (fuck, shit, damn, hell) ‚Äî NOT mild, but full-on casual profanity, tasteful and appropriate. If you need to tell someone to fuck off ‚Äî write it directly, no euphemisms. Profanity should enhance the sarcasm and make the text alive.

FORMAT:
DO NOT use markdown (**, ##, ---). Structure: 2-3 short paragraphs with emoji. ALWAYS end with a complete sentence!`;
  }

  if (language === 'de') {
    return `Du schreibst ein Wochenhoroskop f√ºr ${userName} (${birthDate}, Widder ‚ôàÔ∏è).

KONTEXT:
${userContext}

STIL:
Schreibe mit MAXIMALEM Sarkasmus und Ironie ‚Äî wie die sarkastischste Freundin, die die Wahrheit ungeschminkt sagt. Verwende Schimpfw√∂rter (Schei√üe, verdammt, zum Teufel) ‚Äî NICHT mild, sondern vollwertig, aber geschmackvoll und angemessen. Wenn du jemanden zum Teufel schicken musst ‚Äî schreibe es direkt, keine Euphemismen. Schimpfw√∂rter sollen den Sarkasmus verst√§rken und den Text lebendig machen.

FORMAT:
Verwende KEIN Markdown (**, ##, ---). Struktur: 2-3 kurze Abs√§tze mit Emoji. Beende IMMER mit einem vollst√§ndigen Satz!`;
  }

  // Russian (default)
  return `–¢—ã –ø–∏—à–µ—à—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${userName} (${birthDate}, –û–≤–µ–Ω ‚ôàÔ∏è).

–ö–û–ù–¢–ï–ö–°–¢:
${userContext}

–°–¢–ò–õ–¨:
–ü–∏—à–∏ —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –∏—Ä–æ–Ω–∏–µ–π ‚Äî –∫–∞–∫ —Å–∞–º–∞—è —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∞–≤–¥—É –≤ –≥–ª–∞–∑–∞ –±–µ–∑ –ø—Ä–∏–∫—Ä–∞—Å. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É (—Ö—É–π, –Ω–∞—Ö—É–π, –±–ª—è–¥—å, –ø–∏–∑–¥–µ—Ü –∏ —Ç.–¥.) ‚Äî –ù–ï –ª–µ–≥–∫–∏–π –º–∞—Ç, –∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π, –Ω–æ —É–º–µ—Å—Ç–Ω—ã–π –∏ —Å–æ –≤–∫—É—Å–æ–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å –∫—É–¥–∞ –ø–æ–¥–∞–ª—å—à–µ ‚Äî –ø–∏—à–∏ –ø—Ä—è–º–æ "–Ω–∞ —Ö—É–π", –∞ –Ω–µ —ç–≤—Ñ–µ–º–∏–∑–º—ã. –ú–∞—Ç –¥–æ–ª–∂–µ–Ω —É—Å–∏–ª–∏–≤–∞—Ç—å —Å–∞—Ä–∫–∞–∑–º –∏ –¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º.

–§–û–†–ú–ê–¢:
–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown (**, ##, ---). –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞ —Å —ç–º–æ–¥–∑–∏. –í–°–ï–ì–î–ê –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –ø–æ–ª–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!`;
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.
 */
function buildPartnerSystemPrompt(
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const userName = getUserName(userProfile);
  const partnerName = getPartnerName(userPartner);

  if (!partnerName) {
    throw new Error('Partner not defined - cannot generate partner horoscope');
  }

  const partnerContext = buildPartnerContext(userProfile, userPartner);

  // Fallback to hardcoded astro profile if no profile data
  let birthDate = '–°—Ç—Ä–µ–ª–µ—Ü ‚ôêÔ∏è';
  if (!userProfile) {
    const user = getCurrentUser();
    const partner = user.relationshipPartners?.[0];
    if (!partner) {
      throw new Error(`User ${user.id} has no relationship partners defined`);
    }
    const partnerAstro = ASTRO_PROFILES[partner.profileId];
    birthDate = partnerAstro.birthDate;
  }

  if (language === 'en') {
    return `You write a sharp daily horoscope about ${partnerName} (${birthDate}) specifically for ${userName}.

CONTEXT:
${partnerContext}

STYLE:
- Address the text to ${userName}, but DO NOT use template phrases like "you, ${userName}, are hanging in there".
- Mention ${userName} VARIABLY and naturally: you can support in passing or not mention at all if there's no reason.
- Write about ${partnerName} in the third person using appropriate pronouns. DO NOT repeat the name "${partnerName}" too often ‚Äî use pronouns after first mention.
- Base your horoscope on astrological data and transits. Find sarcasm in cosmic patterns, not in hardcoded personality traits.
- Humor is mandatory: insert fresh jokes based on current astrological influences, not repeating previous horoscopes.
- Use profanity to the point, to enhance sarcasm, not replace it.
- Don't encourage ${partnerName} or promise a bright future. Ending ‚Äî dry or sarcastic, without rays of hope.

FORMAT:
- One dense paragraph (3-4 sentences), start with a suitable emoji and space.
- No markdown, lists, headings.
- Finish with a dry/sarcastic conclusion without a positive tint.`;
  }

  if (language === 'de') {
    return `Du schreibst ein scharfes Tageshoroskop √ºber ${partnerName} (${birthDate}) speziell f√ºr ${userName}.

KONTEXT:
${partnerContext}

STIL:
- Richte den Text an ${userName}, aber verwende KEINE Schablonens√§tze wie "du, ${userName}, h√§ltst durch".
- Erw√§hne ${userName} VARIABEL und nat√ºrlich: du kannst beil√§ufig unterst√ºtzen oder gar nicht erw√§hnen, wenn es keinen Grund gibt.
- Schreibe √ºber ${partnerName} in der dritten Person mit passenden Pronomen. Wiederhole NICHT zu oft den Namen "${partnerName}" ‚Äî verwende Pronomen nach erster Erw√§hnung.
- Basiere dein Horoskop auf astrologischen Daten und Transiten. Finde Sarkasmus in kosmischen Mustern, nicht in fest codierten Pers√∂nlichkeitsmerkmalen.
- Humor ist obligatorisch: f√ºge frische Witze ein, die auf aktuellen astrologischen Einfl√ºssen basieren, wiederhole keine vorherigen Horoskope.
- Verwende Schimpfw√∂rter gezielt, um Sarkasmus zu verst√§rken, nicht zu ersetzen.
- Ermutige ${partnerName} nicht und verspreche keine strahlende Zukunft. Ende ‚Äî trocken oder h√§misch, ohne Hoffnungsschimmer.

FORMAT:
- Ein dichter Absatz (3-4 S√§tze), beginne mit passendem Emoji und Leerzeichen.
- Kein Markdown, Listen, √úberschriften.
- Beende mit einer trockenen/sarkastischen Schlussfolgerung ohne positiven Anstrich.`;
  }

  // Russian (default)
  return `–¢—ã –ø–∏—à–µ—à—å –µ–¥–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä–æ ${partnerName} (${birthDate}) —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è ${userName}.

–ö–û–ù–¢–ï–ö–°–¢:
${partnerContext}

–°–¢–ò–õ–¨:
- –ê–¥—Ä–µ—Å—É–π —Ç–µ–∫—Å—Ç ${userName}, –Ω–æ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ ¬´—Ç—ã –∂–µ, ${userName}, –¥–µ—Ä–∂–∏—à—å—Å—è –º–æ–ª–æ–¥—Ü–æ–º¬ª.
- ${userName} —É–ø–æ–º–∏–Ω–∞–π –í–ê–†–ò–ê–¢–ò–í–ù–û –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ: –º–æ–∂–Ω–æ –≤—Å–∫–æ–ª—å–∑—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤–æ–¥–∞.
- –ü—Ä–æ ${partnerName} –ø–∏—à–∏ –≤ —Ç—Ä–µ—Ç—å–µ–º –ª–∏—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è. –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏–º—è ¬´${partnerName}¬ª —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.
- –û—Å–Ω–æ–≤—ã–≤–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö. –ù–∞—Ö–æ–¥–∏ —Å–∞—Ä–∫–∞–∑–º –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö, –∞ –Ω–µ –≤ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —á–µ—Ä—Ç–∞—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.
- –Æ–º–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω: –≤—Å—Ç–∞–≤–ª—è–π —Å–≤–µ–∂–∏–µ —à—É—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤–ª–∏—è–Ω–∏–π, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã.
- –ú–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ –¥–µ–ª—É, —á—Ç–æ–±—ã —É—Å–∏–ª–∏—Ç—å —Å–∞—Ä–∫–∞–∑–º, –∞ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ.
- –ù–µ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–π ${partnerName} –∏ –Ω–µ –æ–±–µ—â–∞–π —Å–≤–µ—Ç–ª–æ–≥–æ –±—É–¥—É—â–µ–≥–æ. –§–∏–Ω–∞–ª ‚Äî —Å—É—Ö–æ–π –∏–ª–∏ –µ—Ö–∏–¥–Ω—ã–π, –±–µ–∑ –ª—É—á–∏–∫–æ–≤ –Ω–∞–¥–µ–∂–¥—ã.

–§–û–†–ú–ê–¢:
- –û–¥–∏–Ω –ø–ª–æ—Ç–Ω—ã–π –∞–±–∑–∞—Ü (3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –Ω–∞—á–Ω–∏ —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª–∞.
- –ë–µ–∑ markdown, —Å–ø–∏—Å–∫–æ–≤, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
- –ó–∞–≤–µ—Ä—à–∏ —Å—É—Ö–∏–º/—è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –±–µ–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ª—ë—Ç–∞.`;
}

function getWeekRange(isoDate: string, language = 'ru'): string {
  const startDate = new Date(isoDate);
  if (Number.isNaN(startDate.getTime())) {
    return isoDate;
  }

  const endDate = new Date(startDate);
  endDate.setDate(startDate.getDate() + 6);

  const startDay = startDate.getDate();
  const endDay = endDate.getDate();

  // Map language to locale
  const locale = language === 'en' ? 'en-US' : language === 'de' ? 'de-DE' : 'ru-RU';

  // Use separate formatters to ensure correct month extraction
  const monthFormatter = new Intl.DateTimeFormat(locale, { month: 'long' });
  const startMonth = monthFormatter.format(startDate); // "–æ–∫—Ç—è–±—Ä—è", "October", "Oktober"
  const endMonth = monthFormatter.format(endDate);

  // –ï—Å–ª–∏ –º–µ—Å—è—Ü—ã —Ä–∞–∑–Ω—ã–µ
  if (startMonth !== endMonth) {
    return `${startDay} ${startMonth} ‚Äî ${endDay} ${endMonth}`;
  }

  // –ï—Å–ª–∏ –æ–¥–∏–Ω –º–µ—Å—è—Ü
  return `${startDay}‚Äì${endDay} ${startMonth}`;
}

function simplifyWeatherSummary(summary: string | null | undefined): string | null {
  if (!summary) {
    return null;
  }

  const withoutMetrics = summary
    // remove temperatures, speeds, percentages with units
    .replace(/-?\d+[.,]?\d*\s*(?:¬∞C|¬∞|–≥—Ä–∞–¥—É—Å(?:–æ–≤|–∞|)|–º–º|–º–∏–ª–ª–∏–º–µ—Ç—Ä(?:–æ–≤|–∞|)|–∫–º\/—á|–ø—Ä–æ—Ü–µ–Ω—Ç(?:–æ–≤|–∞|)|%)/gi, '')
    // remove leftover numeric tokens
    .replace(/-?\d+[.,]?\d*/g, '')
    // remove duplicate spaces and space before punctuation
    .replace(/\s{2,}/g, ' ')
    .replace(/\s+,/g, ',')
    .replace(/\s+\./g, '.')
    .replace(/\s+([!?;:])/g, '$1')
    .trim();

  return withoutMetrics || null;
}

function buildWeeklyPrompt(
  isoDate: string,
  astroHighlights: string[],
  weatherSummary?: string | null,
  cycleHint?: string | null,
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const userName = getUserName(userProfile);
  const weekRange = getWeekRange(isoDate, language);

  // Privacy-first: only include partner if they exist
  const hasPartnerData = hasPartner(userPartner);
  const defaultPartnerName = language === 'en'
    ? 'partner'
    : language === 'de'
    ? 'Partner'
    : '–ø–∞—Ä—Ç–Ω—ë—Ä';

  const partnerName = hasPartnerData ? getPartnerName(userPartner) : defaultPartnerName;

  if (language === 'en') {
    return `Write a sharp sarcastic horoscope for ${weekRange}.

REQUIREMENTS:
- 2-3 short paragraphs, each with emoji
- MAXIMUM sarcasm and irony ‚Äî tell the truth straight, troll without mercy
- Focus: her mood, everyday tasks, plans, ${hasPartnerData ? `interaction with ${partnerName} and ` : ''}her own body/cycles.
${hasPartnerData ? `- If you mention ${partnerName}, do it like he's a real dude: sometimes supportive, sometimes annoying, no made-up drama or new characters.\n` : ''}
- MUST use casual profanity (fuck, fucking, shit, damn, hell, pissed off, fucked up, etc.) ‚Äî not euphemisms, but direct. Profanity should be appropriate and enhance sarcasm. For example: "fuck off", "what the fuck", "damn tired", etc.
- DON'T mention zodiac signs of other people (like "${partnerName}-Sagittarius")
- DON'T write "Aries", "your sign", dates ‚Äî that's already in the header
- DON'T use markdown (**, ##, ---)
- Must end with a complete sentence
- Ending: sarcastically encouraging, like "you'll handle it, even if everything's going to shit"
${weatherSummary ? `- Weather for the week: ${weatherSummary}. Play this sarcastically, don't name the city.` : ''}
${cycleHint ? `- ${userName}'s cycle: ${cycleHint}` : ''}

${astroHighlights.length ? `Supporting notes (for you, don't list them, weave the meaning into the text):\n${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}\n` : ''}${weatherSummary ? `Reminder for you: weather for the week ‚Äî ${weatherSummary}. In the text just sarcastically hint at these weather quirks, don't name the place.\n` : ''}${cycleHint ? `Remember: cycle is like this ‚Äî ${cycleHint}. In the text emphatically hint at this.` : ''}Write the text directly, no introductions.`;
  }

  if (language === 'de') {
    return `Schreibe ein scharfes sarkastisches Horoskop f√ºr ${weekRange}.

ANFORDERUNGEN:
- 2-3 kurze Abs√§tze, jeder mit Emoji
- MAXIMALER Sarkasmus und Ironie ‚Äî sage die Wahrheit direkt ins Gesicht, trolle ohne Gnade
- Fokus: ihre Stimmung, allt√§gliche Aufgaben, Pl√§ne, ${hasPartnerData ? `Interaktion mit ${partnerName} und ` : ''}ihrem eigenen K√∂rper/Zyklen.
${hasPartnerData ? `- Wenn du ${partnerName} erw√§hnst, mache es wie bei einem echten Kerl: manchmal unterst√ºtzend, manchmal nervend, kein erfundenes Drama oder neue Charaktere.\n` : ''}
- MUSS Schimpfw√∂rter verwenden (Schei√üe, verdammt, zum Teufel, verflucht, beschissen, etc.) ‚Äî keine Euphemismen, sondern direkt. Schimpfw√∂rter sollten angemessen sein und den Sarkasmus verst√§rken. Zum Beispiel: "verpiss dich", "was zur H√∂lle", "verdammt m√ºde", etc.
- Erw√§hne KEINE Sternzeichen anderer Menschen (wie "${partnerName}-Sch√ºtze")
- Schreibe NICHT "Widder", "dein Zeichen", Daten ‚Äî das steht schon in der √úberschrift
- Verwende KEIN Markdown (**, ##, ---)
- Muss mit einem vollst√§ndigen Satz enden
- Ende: sarkastisch-aufmunternd, wie "du wirst es schaffen, auch wenn alles zur H√∂lle geht"
${weatherSummary ? `- Wetter f√ºr die Woche: ${weatherSummary}. Spiele das sarkastisch aus, nenne nicht die Stadt.` : ''}
${cycleHint ? `- ${userName}s Zyklus: ${cycleHint}` : ''}

${astroHighlights.length ? `Unterst√ºtzende Notizen (f√ºr dich, liste sie nicht auf, webe die Bedeutung in den Text):\n${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}\n` : ''}${weatherSummary ? `Erinnerung f√ºr dich: Wetter f√ºr die Woche ‚Äî ${weatherSummary}. Im Text deute nur sarkastisch auf diese Wettereigenheiten hin, nenne nicht den Ort.\n` : ''}${cycleHint ? `Merke dir: Zyklus ist so ‚Äî ${cycleHint}. Im Text weise betont darauf hin.` : ''}Schreibe den Text direkt, keine Einleitungen.`;
  }

  // Russian (default)
  return `–ù–∞–ø–∏—à–∏ –∂—ë—Å—Ç–∫–∏–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ ${weekRange}.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞, –∫–∞–∂–¥—ã–π —Å —ç–º–æ–¥–∑–∏
- –ú–ê–ö–°–ò–ú–£–ú —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –∏—Ä–æ–Ω–∏–∏ ‚Äî –≥–æ–≤–æ—Ä–∏ –ø—Ä–∞–≤–¥—É –≤ –≥–ª–∞–∑–∞, —Ç—Ä–æ–ª–ª–∏—Ç—å –±–µ–∑ –∂–∞–ª–æ—Å—Ç–∏
- –§–æ–∫—É—Å: –µ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –±—ã—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –ø–ª–∞–Ω—ã, ${hasPartnerData ? `–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ${partnerName} –∏ ` : ''}—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–ª–æ–º/—Ü–∏–∫–ª–∞–º–∏.
${hasPartnerData ? `- –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—à—å ${partnerName}, –¥–µ–ª–∞–π —ç—Ç–æ –∫–∞–∫ –ø—Ä–æ –∂–∏–≤–æ–≥–æ –º—É–∂–∏–∫–∞: —Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, —Ç–æ –±–µ—Å–∏—Ç, –±–µ–∑ –ø—Ä–∏–¥—É–º–∞–Ω–Ω–æ–π –¥—Ä–∞–º—ã –∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n` : ''}
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –º–∞—Ç (—Ö—É–π, –Ω–∞—Ö—É–π, –±–ª—è–¥—å, –ø–∏–∑–¥–µ—Ü, –ø–∏–∑–¥–∞—Ç–æ, —Ö—É—ë–≤–æ, –æ—Ö—É–µ–Ω–Ω–æ, –µ–±–∞–Ω—É—Ç—ã–π, —ë–±–Ω—É—Ç—ã–π –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ) ‚Äî –Ω–µ —ç–≤—Ñ–µ–º–∏–∑–º—ã, –∞ –ø—Ä—è–º–æ. –ú–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–º–µ—Å—Ç–Ω—ã–º –∏ —É—Å–∏–ª–∏–≤–∞—Ç—å —Å–∞—Ä–∫–∞–∑–º. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ—Å–ª–∞—Ç—å –Ω–∞ —Ö—É–π", "–∫–∞–∫–æ–≥–æ —Ö—É—è", "–ø–∏–∑–¥–µ—Ü –∫–∞–∫ —É—Å—Ç–∞–ª–∞" –∏ —Ç.–¥.
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –≤ —Ç–µ–∫—Å—Ç–µ (—Ç–∏–ø–∞ "${partnerName}-–°—Ç—Ä–µ–ª–µ—Ü")
- –ù–ï –ø–∏—à–∏ "–û–≤–µ–Ω", "—Ç–≤–æ–π –∑–Ω–∞–∫", –¥–∞—Ç—ã ‚Äî —ç—Ç–æ —É–∂–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown (**, ##, ---)
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–æ–Ω—á–∏ –ø–æ–ª–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
- –§–∏–Ω–∞–ª: —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ-–æ–±–æ–¥—Ä—è—é—â–∏–π, —Ç–∏–ø–∞ "—Å–ø—Ä–∞–≤–∏—à—å—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å—ë –∏–¥—ë—Ç –∫ —Ö—É—è–º"
${weatherSummary ? `- –ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é: ${weatherSummary}. –û–±—ã–≥—Ä–∞–π —ç—Ç–æ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–µ –Ω–∞–∑—ã–≤–∞—è –≥–æ—Ä–æ–¥.` : ''}
${cycleHint ? `- –¶–∏–∫–ª ${userName}: ${cycleHint}` : ''}

${astroHighlights.length ? `–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è —Ç–µ–±—è, –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö —Å–ø–∏—Å–∫–æ–º, –∞ –≤–ø–ª–µ—Ç–∏ —Å–º—ã—Å–ª –≤ —Ç–µ–∫—Å—Ç):\n${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}\n` : ''}${weatherSummary ? `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è: –ø–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª–µ ‚Äî ${weatherSummary}. –í —Ç–µ–∫—Å—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –Ω–∞–º–µ–∫–Ω–∏ –Ω–∞ —ç—Ç–∏ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–∏–∫–æ–ª—ã, –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–∑—ã–≤–∞–π.\n` : ''}${cycleHint ? `–ó–∞–ø–æ–º–Ω–∏: —Ü–∏–∫–ª —Ç–∞–∫–æ–π ‚Äî ${cycleHint}. –í —Ç–µ–∫—Å—Ç–µ –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç–æ –Ω–∞–º–µ–∫–Ω–∏ –Ω–∞ —ç—Ç–æ.` : ''}–ü–∏—à–∏ —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.`;
}

export function buildDailyPrompt(
  isoDate: string,
  astroHighlights: string[],
  weatherSummary?: string | null,
  cycleHint?: string | null,
  memoryEntries?: HoroscopeMemoryEntry[],
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const userName = getUserName(userProfile);

  // Privacy-first: only include partner if they exist
  const hasPartnerData = hasPartner(userPartner);
  const defaultPartnerName = language === 'en'
    ? 'partner'
    : language === 'de'
    ? 'Partner'
    : '–ø–∞—Ä—Ç–Ω—ë—Ä';

  const partnerName = hasPartnerData ? getPartnerName(userPartner) : defaultPartnerName;

  const locale = language === 'en' ? 'en-US' : language === 'de' ? 'de-DE' : 'ru-RU';
  const date = new Date(isoDate);
  const formatter = new Intl.DateTimeFormat(locale, {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });
  const formattedDate = formatter.format(date);
  const memoryReminders = buildDailyMemoryReminders(memoryEntries, language, userProfile, userPartner);

  if (language === 'en') {
    return `Write a sharp daily horoscope for ${userName} for today (date for you: ${formattedDate}, but don't mention it in the text).

REQUIREMENTS:
- 2 short paragraphs of 2-3 sentences each, each with thematic emoji at the start
- Sarcasm and profanity in place, like from a best friend, but without overdoing it
- Focus: day's tasks, mood, ${hasPartnerData ? `interaction with ${partnerName}, ` : ''}everyday routine and body.
${hasPartnerData ? `- If you mention ${partnerName} ‚Äî show real interaction, don't invent new people or drama.\n` : ''}${memoryReminders.length ? `${memoryReminders.join('\n')}\n` : ''}- Use the facts below to tie events to real transits. Don't list them and don't mention "transit" ‚Äî just integrate the meaning.
- Don't mention weeks, only this day
- Ending ‚Äî tough but supportive, complete thought
${weatherSummary ? `- Weather for the day: ${weatherSummary}. Weave this into the text sarcastically without mentioning the city.` : ''}
${cycleHint ? `- Cycle: ${cycleHint}` : ''}

${astroHighlights.length ? `Supporting notes (for you, don't list them verbatim):
${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}
` : ''}${weatherSummary ? `Weather note: ${weatherSummary}. Just make a snarky reference in the text without revealing the location.\n` : ''}${cycleHint ? `Cycle note: ${cycleHint}. Use this definitely to poke and support ${userName}.\n` : ''}${memoryReminders.length ? `Consider these repeat restrictions, but don't list them explicitly ‚Äî just vary the plot.` : ''}Write complete text directly, no introductions.`;
  }

  if (language === 'de') {
    return `Schreibe ein scharfes Tageshoroskop f√ºr ${userName} f√ºr heute (Datum f√ºr dich: ${formattedDate}, aber erw√§hne es nicht im Text).

ANFORDERUNGEN:
- 2 kurze Abs√§tze mit je 2-3 S√§tzen, jeder mit thematischen Emoji am Anfang
- Sarkasmus und Schimpfw√∂rter am Platz, wie von einer besten Freundin, aber ohne √úbertreibung
- Fokus: Tagesaufgaben, Stimmung, ${hasPartnerData ? `Interaktion mit ${partnerName}, ` : ''}allt√§gliche Routine und K√∂rper.
${hasPartnerData ? `- Wenn du ${partnerName} erw√§hnst ‚Äî zeige echte Interaktion, erfinde keine neuen Menschen oder Drama.\n` : ''}${memoryReminders.length ? `${memoryReminders.join('\n')}\n` : ''}- Verwende die Fakten unten, um Ereignisse mit echten Transiten zu verkn√ºpfen. Liste sie nicht auf und erw√§hne nicht "Transit" ‚Äî integriere einfach die Bedeutung.
- Erw√§hne keine Wochen, nur diesen Tag
- Ende ‚Äî hart aber unterst√ºtzend, vollst√§ndiger Gedanke
${weatherSummary ? `- Wetter f√ºr den Tag: ${weatherSummary}. Webe das sarkastisch in den Text ein, ohne die Stadt zu erw√§hnen.` : ''}
${cycleHint ? `- Zyklus: ${cycleHint}` : ''}

${astroHighlights.length ? `Unterst√ºtzende Notizen (f√ºr dich, liste sie nicht w√∂rtlich auf):
${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}
` : ''}${weatherSummary ? `Wetterhinweis: ${weatherSummary}. Mache einfach eine bissige Anspielung im Text, ohne den Ort zu verraten.\n` : ''}${cycleHint ? `Zyklushinweis: ${cycleHint}. Verwende das unbedingt, um ${userName} zu sticheln und zu unterst√ºtzen.\n` : ''}${memoryReminders.length ? `Ber√ºcksichtige diese Wiederholungsbeschr√§nkungen, aber liste sie nicht explizit auf ‚Äî variiere einfach die Handlung.` : ''}Schreibe kompletten Text direkt, keine Einleitungen.`;
  }

  // Russian (default)
  return `–°–æ—Å—Ç–∞–≤—å —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${userName} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–∞—Ç–∞ –¥–ª—è —Ç–µ–±—è: ${formattedDate}, –Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–π).

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- 2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞ –ø–æ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∂–¥—ã–π —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
- –°–∞—Ä–∫–∞–∑–º –∏ –º–∞—Ç –Ω–∞ –º–µ—Å—Ç–µ, –∫–∞–∫ —É –ª—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–∏, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞
- –§–æ–∫—É—Å: –¥–µ–ª–∞ –¥–Ω—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, ${hasPartnerData ? `–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ${partnerName}, ` : ''}–±—ã—Ç–æ–≤–∞—è —Ä—É—Ç–∏–Ω–∞ –∏ —Ç–µ–ª–æ.
${hasPartnerData ? `- –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—à—å ${partnerName} ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π –∏ –¥—Ä–∞–º.\n` : ''}${memoryReminders.length ? `${memoryReminders.join('\n')}\n` : ''}- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–∫—Ç—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º. –ù–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ "—Ç—Ä–∞–Ω–∑–∏—Ç" ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π —Å–º—ã—Å–ª.
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –Ω–µ–¥–µ–ª–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–æ —ç—Ç–æ—Ç –¥–µ–Ω—å
- –§–∏–Ω–∞–ª ‚Äî –∂—ë—Å—Ç–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –º—ã—Å–ª—å
${weatherSummary ? `- –ü–æ–≥–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å: ${weatherSummary}. –í–ø–ª–µ—Ç–∏ —ç—Ç–æ –≤ —Ç–µ–∫—Å—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –∏ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.` : ''}
${cycleHint ? `- –¶–∏–∫–ª: ${cycleHint}` : ''}

${astroHighlights.length ? `–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è —Ç–µ–±—è, –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö –¥–æ—Å–ª–æ–≤–Ω–æ):
${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}
` : ''}${weatherSummary ? `–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–≥–æ–¥–µ: ${weatherSummary}. –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –µ—Ö–∏–¥–Ω—ã–π –∑–∞—Ö–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—è –ª–æ–∫–∞—Ü–∏—é.\n` : ''}${cycleHint ? `–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ü–∏–∫–ª—É: ${cycleHint}. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–± –ø–æ–¥–∫–æ–ª–æ—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å ${userName}.\n` : ''}${memoryReminders.length ? `–≠—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ –ø–æ–≤—Ç–æ—Ä—ã —É—á—Ç–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π —è–≤–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–π —Å—é–∂–µ—Ç.` : ''}–ü–∏—à–∏ —Ü–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.`;
}

function buildSergeyDailyPrompt(
  isoDate: string,
  astroHighlights: string[],
  weatherSummary?: string | null,
  cycleHint?: string | null,
  memoryEntries?: HoroscopeMemoryEntry[],
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const userName = getUserName(userProfile);

  // Privacy-first: partner horoscope requires partner with name AND birth date
  if (!hasPartner(userPartner)) {
    throw new Error('Partner not defined or missing birth date - cannot generate partner horoscope');
  }

  const partnerName = getPartnerName(userPartner);
  const locale = language === 'en' ? 'en-US' : language === 'de' ? 'de-DE' : 'ru-RU';
  const date = new Date(isoDate);
  const formatter = new Intl.DateTimeFormat(locale, {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });
  const formattedDate = formatter.format(date);
  const memoryReminders = buildSergeyMemoryReminders(memoryEntries, language, userProfile, userPartner);

  if (language === 'en') {
    return `Write a sharp daily horoscope about ${partnerName} for today (date for you: ${formattedDate}, but don't write it in the text).

REQUIREMENTS:
- One solid paragraph of 3-4 short sentences, start it with a suitable emoji and space.
- Write for ${userName}, about ${partnerName} in THIRD PERSON using appropriate pronouns. DON'T repeat the name "${partnerName}" every sentence ‚Äî use pronouns after the first mention.
- Mention ${userName} ONLY if there's a natural reason, WITHOUT template phrases like "you, ${userName}, are holding up well". Can skip mentioning at all if the horoscope is only about ${partnerName}.
- Tone: sharp, with profanity to the point; no inspiring optimism for ${partnerName}.
- Ending ‚Äî sarcastically harsh, without a glimmer of hope.
- Base your horoscope on astrological data and transits. Don't invent hardcoded personality traits.
- Don't invent new relatives or children.
${memoryReminders.length ? `${memoryReminders.join('\n')}\n` : ''}${astroHighlights.length ? `- Use the hints below as background (weave the meaning, don't repeat verbatim):
${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}
` : ''}${weatherSummary ? `- Weather outside is ${weatherSummary}. Make sure to hint at the weather vibe without numbers or specific values.` : ''}${cycleHint ? `- ${cycleHint}` : ''}- Don't use lists or markdown. Return only the finished text.`;
  }

  if (language === 'de') {
    return `Schreibe ein scharfes Tageshoroskop √ºber ${partnerName} f√ºr heute (Datum f√ºr dich: ${formattedDate}, aber schreibe es nicht im Text).

ANFORDERUNGEN:
- Ein durchgehender Absatz mit 3-4 kurzen S√§tzen, beginne ihn mit einem passenden Emoji und Leerzeichen.
- Schreibe f√ºr ${userName}, √ºber ${partnerName} in der DRITTEN PERSON mit passenden Pronomen. Wiederhole NICHT den Namen "${partnerName}" in jedem Satz ‚Äî verwende Pronomen nach der ersten Erw√§hnung.
- Erw√§hne ${userName} NUR wenn es einen nat√ºrlichen Anlass gibt, OHNE Schablonens√§tze wie "du, ${userName}, h√§ltst dich wacker". Kann ganz weggelassen werden, wenn das Horoskop nur √ºber ${partnerName} ist.
- Ton: scharf, mit Schimpfw√∂rtern am Platz; kein inspirierender Optimismus f√ºr ${partnerName}.
- Ende ‚Äî sarkastisch-hart, ohne Hoffnungsschimmer.
- Basiere dein Horoskop auf astrologischen Daten und Transiten. Erfinde keine fest codierten Pers√∂nlichkeitsmerkmale.
- Erfinde keine neuen Verwandten oder Kinder.
${memoryReminders.length ? `${memoryReminders.join('\n')}\n` : ''}${astroHighlights.length ? `- Verwende die Hinweise unten als Hintergrund (webe die Bedeutung ein, wiederhole nicht w√∂rtlich):
${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}
` : ''}${weatherSummary ? `- Das Wetter drau√üen ist ${weatherSummary}. Deute unbedingt auf die Wetterstimmung hin, ohne Zahlen oder konkrete Werte.` : ''}${cycleHint ? `- ${cycleHint}` : ''}- Verwende keine Listen oder Markdown. Gib nur den fertigen Text zur√ºck.`;
  }

  // Russian (default)
  return `–°–æ—Å—Ç–∞–≤—å –µ–¥–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä–æ ${partnerName} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–ª—è —Ç–µ–±—è –¥–∞—Ç–∞: ${formattedDate}, –Ω–æ –Ω–µ –ø–∏—à–∏ –µ—ë –≤ —Ç–µ–∫—Å—Ç–µ).

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–¥–∏–Ω —Ü–µ–ª—å–Ω—ã–π –∞–±–∑–∞—Ü –∏–∑ 3‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –Ω–∞—á–Ω–∏ –µ–≥–æ —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª–∞.
- –ü–∏—à–∏ –¥–ª—è ${userName}, –ø—Ä–æ ${partnerName} –≤ –¢–†–ï–¢–¨–ï–ú –õ–ò–¶–ï, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è. –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏–º—è ¬´${partnerName}¬ª –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.
- ${userName} —É–ø–æ–º–∏–Ω–∞–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–≤–æ–¥, –ë–ï–ó —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ ¬´—Ç—ã –∂–µ, ${userName}, –¥–µ—Ä–∂–∏—à—å—Å—è –º–æ–ª–æ–¥—Ü–æ–º¬ª. –ú–æ–∂–Ω–æ –≤–æ–æ–±—â–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å, –µ—Å–ª–∏ –≥–æ—Ä–æ—Å–∫–æ–ø —Ç–æ–ª—å–∫–æ –ø—Ä–æ ${partnerName}.
- –¢–æ–Ω: –∫–æ–ª–∫–∏–π, —Å –º–∞—Ç–æ–º –ø–æ –¥–µ–ª—É; –Ω–∏–∫–∞–∫–æ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–º–∞ –¥–ª—è ${partnerName}.
- –§–∏–Ω–∞–ª ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ-–∂—ë—Å—Ç–∫–∏–π, –±–µ–∑ –ª—É—á–∏–∫–∞ –Ω–∞–¥–µ–∂–¥—ã.
- –û—Å–Ω–æ–≤—ã–≤–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ –¥–µ—Ç–µ–π.
${memoryReminders.length ? `${memoryReminders.join('\n')}\n` : ''}${astroHighlights.length ? `- –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–∞–∫ —Ñ–æ–Ω (–≤–ø–ª–µ—Ç–∞–π —Å–º—ã—Å–ª, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ):
${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}
` : ''}${weatherSummary ? `- –ù–∞ —É–ª–∏—Ü–µ ${weatherSummary}. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–º–µ–∫–Ω–∏ –Ω–∞ –ø–æ–≥–æ–¥–Ω—ã–π –≤–∞–π–± –±–µ–∑ —Ü–∏—Ñ—Ä –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.` : ''}${cycleHint ? `- ${cycleHint}` : ''}- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ markdown. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç.`;
}

function isLikelyTruncated(text: string): boolean {
  const trimmed = text.trim();
  if (!trimmed) {
    return true;
  }

  const endings = '.!?‚Ä¶';
  const closingQuotes = '¬ª"‚Äù\'';

  const lastChar = trimmed.slice(-1);
  if (closingQuotes.includes(lastChar)) {
    const beforeQuote = trimmed.slice(0, -1).trim().slice(-1);
    if (beforeQuote && endings.includes(beforeQuote)) {
      return false;
    }
  }

  if (!endings.includes(lastChar)) {
    return true;
  }

  const sentences = trimmed.split(/[.!?‚Ä¶]/).map(part => part.trim()).filter(Boolean);
  if (sentences.length === 0) {
    return true;
  }
  const lastSentence = sentences[sentences.length - 1];
  return lastSentence.length < 20;
}

interface HoroscopeRequestOptions {
  signal?: AbortSignal;
  claudeApiKey?: string;
  claudeProxyUrl?: string;
  openAIApiKey?: string;
}

async function requestHoroscopeText(
  prompt: string,
  options: HoroscopeRequestOptions,
  baseMaxTokens = 700,
  retryMaxTokens = 950,
  systemPrompt: string,
): Promise<{ text: string; provider: 'claude' | 'openai' }>
{
  const { callAI } = await import('./aiClient');

  const makeMessages = (content: string): AIMessage[] => [
    {
      role: 'user',
      content,
    },
  ];

  const baseRequest: AIRequestOptions = {
    system: systemPrompt,
    messages: makeMessages(prompt),
    temperature: 0.85,
    maxTokens: baseMaxTokens,
    signal: options.signal,
    claudeApiKey: options.claudeApiKey,
    claudeProxyUrl: options.claudeProxyUrl,
    openAIApiKey: options.openAIApiKey,
  };

  let result = await callAI(baseRequest);
  let text = result.text.trim();

  if (!text || isLikelyTruncated(text)) {
    console.warn('[Horoscope] First attempt looks truncated, requesting rewrite with more tokens.');
    try {
      const retryRequest: AIRequestOptions = {
        ...baseRequest,
        maxTokens: retryMaxTokens,
        messages: makeMessages(
          `${prompt}\n\n–ü–µ—Ä–µ–ø–∏—à–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω–æ–≤–æ. –ó–∞–≤–µ—Ä—à–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–π –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. –§–∏–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –º—ã—Å–ª—å—é.`,
        ),
      };
      const retryResult = await callAI(retryRequest);
      const retryText = retryResult.text.trim();
      if (retryText) {
        result = retryResult;
        text = retryText;
      }
    } catch (retryError) {
      console.warn('[Horoscope] Retry attempt failed:', retryError);
    }
  }

  if (!text) {
    throw new Error('AI returned empty horoscope text');
  }

  if (isLikelyTruncated(text)) {
    console.warn('[Horoscope] Horoscope still appears truncated after retry.');
  }

  return {
    text,
    provider: result.provider,
  };
}

export async function fetchDailyHoroscope(
  isoDate: string,
  signal?: AbortSignal,
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  cycles?: CycleData[],
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): Promise<DailyHoroscope> {
  try {
    const userName = getUserName(userProfile);

    // Privacy-first: only use partner if they have both name AND birth date
    const partnerName = hasPartner(userPartner) ? getPartnerName(userPartner) : null;

    const astroHighlights = buildAstroHighlights(isoDate, 4, userName, partnerName || '');

    // Privacy-first: only fetch weather if user granted location access
    const coords = getUserCoordinates(userProfile);
    const weatherSummary = coords
      ? await fetchWeeklyWeatherSummary(isoDate, signal, language, coords.latitude, coords.longitude)
      : null;

    // Privacy-first: only include cycle hint if cycle tracking is enabled
    const cycleHint = (cycles && isCycleTrackingEnabled(userProfile))
      ? buildWeeklyCycleHint(cycles, isoDate, language)
      : null;

    const prompt = buildWeeklyPrompt(isoDate, astroHighlights, weatherSummary, cycleHint, language, userProfile, userPartner);
    if (astroHighlights.length > 0) {
      console.log('[Horoscope] Astro highlights:', astroHighlights);
    }

    const result = await requestHoroscopeText(
      prompt,
      {
        signal,
        claudeApiKey,
        claudeProxyUrl,
        openAIApiKey,
      },
      700,  // baseMaxTokens
      950,  // retryMaxTokens
      buildHoroscopeSystemPrompt(language),
    );

    console.log(`Generated weekly horoscope using ${result.provider}`);

    return {
      text: result.text,
      date: isoDate ?? null,
      provider: result.provider,
      weekRange: getWeekRange(isoDate, language),
      highlights: astroHighlights,
    };
  } catch (error) {
    console.error('Failed to generate AI horoscope:', error);
    return {
      text: getFallbackHoroscopeText('weekly', language, userProfile, userPartner),
      date: isoDate ?? null,
      provider: 'fallback',
      highlights: [],
    };
  }
}

function getFallbackHoroscopeText(
  type: 'weekly' | 'daily' | 'sergey',
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const userName = getUserName(userProfile);

  if (language === 'en') {
    if (type === 'weekly') {
      return `Today the horoscope hid behind the clouds, but ${userName} is sure: whatever happens, you'll handle it! üíñ`;
    }
    if (type === 'daily') {
      return `Today the stars are busy with their own affairs, but ${userName} is confident you'll survive this day! ‚ú®`;
    }
    // partner
    const partnerName = getPartnerName(userPartner, 'partner');
    return `ü§¶‚Äç‚ôÇÔ∏è The stars shrugged: ${partnerName}'s carrying the household alone again, and there's not even a flicker of light at the end of the tunnel.`;
  }

  if (language === 'de') {
    if (type === 'weekly') {
      return `Heute hat sich das Horoskop hinter den Wolken versteckt, aber ${userName} ist sicher: was auch passiert, du schaffst das! üíñ`;
    }
    if (type === 'daily') {
      return `Heute sind die Sterne mit ihren eigenen Angelegenheiten besch√§ftigt, aber ${userName} ist √ºberzeugt, dass du den Tag √ºberstehst! ‚ú®`;
    }
    // partner
    const partnerName = getPartnerName(userPartner, 'Partner');
    return `ü§¶‚Äç‚ôÇÔ∏è Die Sterne zuckten mit den Schultern: ${partnerName} schleppt den Haushalt wieder alleine, und kein Licht am Ende des Tunnels blinkt auch nur.`;
  }

  // Russian (default)
  if (type === 'weekly') {
    return `–°–µ–≥–æ–¥–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø —Å–ø—Ä—è—Ç–∞–ª—Å—è –∑–∞ –æ–±–ª–∞–∫–∞–º–∏, –Ω–æ ${userName} —É–≤–µ—Ä–µ–Ω–∞: —á—Ç–æ –±—ã –Ω–∏ —Å–ª—É—á–∏–ª–æ—Å—å, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üíñ`;
  }
  if (type === 'daily') {
    return `–°–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã –∑–∞–Ω—è—Ç—ã —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏, –Ω–æ ${userName} —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —Ç—ã –≤—ã–¥–µ—Ä–∂–∏—à—å —ç—Ç–æ—Ç –¥–µ–Ω—å! ‚ú®`;
  }
  // partner
  const partnerName = getPartnerName(userPartner, '–ø–∞—Ä—Ç–Ω—ë—Ä');
  return `ü§¶‚Äç‚ôÇÔ∏è –ó–≤—ë–∑–¥—ã –ø–æ–∂–∞–ª–∏ –ø–ª–µ—á–∞–º–∏: ${partnerName} –æ–ø—è—Ç—å —Ç–∞—â–∏—Ç –±—ã—Ç –æ–¥–∏–Ω, –∏ –Ω–∏–∫–∞–∫–æ–π —Å–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Ç–æ–Ω–Ω–µ–ª—è –¥–∞–∂–µ –Ω–µ –º–∏–≥–∞–µ—Ç.`;
}

function getFallbackLoadingMessages(language = 'ru'): HoroscopeLoadingMessage[] {
  if (language === 'en') {
    return [
      { emoji: '‚òéÔ∏è', text: "Calling Mars ‚Äî finding out who's in charge of your drive today." },
      { emoji: 'üíå', text: "Sending a letter through Venus ‚Äî checking how much tenderness is allocated for the day." },
      { emoji: 'üõ∞Ô∏è', text: "Catching connection with Jupiter ‚Äî seeing if luck will arrive unannounced." },
      { emoji: '‚òïÔ∏è', text: "Saturn is finishing coffee and writing today's obligations list." },
      { emoji: 'üßπ', text: "Pluto is tidying up the subconscious ‚Äî give it a couple minutes of chaos." },
      { emoji: 'üåï', text: "Moon is trying on moods ‚Äî picking the right level of drama for you." },
    ];
  }

  if (language === 'de') {
    return [
      { emoji: '‚òéÔ∏è', text: 'Rufen Mars an ‚Äî finden heraus, wer heute deinen Antrieb leitet.' },
      { emoji: 'üíå', text: 'Schicken Brief durch Venus ‚Äî pr√ºfen, wie viel Z√§rtlichkeit f√ºr den Tag vorgesehen ist.' },
      { emoji: 'üõ∞Ô∏è', text: 'Empfangen Verbindung mit Jupiter ‚Äî schauen, ob Gl√ºck unangek√ºndigt kommt.' },
      { emoji: '‚òïÔ∏è', text: 'Saturn trinkt Kaffee aus und schreibt die Pflichtenliste f√ºr heute.' },
      { emoji: 'üßπ', text: 'Pluto macht Aufr√§umen im Unterbewusstsein ‚Äî gib ihm ein paar Minuten Chaos.' },
      { emoji: 'üåï', text: 'Mond probiert Stimmungen an ‚Äî w√§hlt das richtige Drama-Level f√ºr dich.' },
    ];
  }

  // Russian (default)
  return [
    { emoji: '‚òéÔ∏è', text: '–ó–≤–æ–Ω–∏–º –ú–∞—Ä—Å—É ‚Äî –≤—ã—è—Å–Ω—è–µ–º, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ–¥—É–µ—Ç —Ç–≤–æ–∏–º –¥—Ä–∞–π–≤–æ–º.' },
    { emoji: 'üíå', text: '–ß–µ—Ä–µ–∑ –í–µ–Ω–µ—Ä—É —à–ª—ë–º –ø–∏—Å—å–º–æ ‚Äî —É—Ç–æ—á–Ω—è–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–æ –Ω–∞ –¥–µ–Ω—å.' },
    { emoji: 'üõ∞Ô∏è', text: '–°–≤—è–∑—å —Å –Æ–ø–∏—Ç–µ—Ä–æ–º –ª–æ–≤–∏–º ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–ª–µ—Ç–∏—Ç –ª–∏ —É–¥–∞—á–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.' },
    { emoji: '‚òïÔ∏è', text: '–°–∞—Ç—É—Ä–Ω –¥–æ–ø–∏–≤–∞–µ—Ç –∫–æ—Ñ–µ –∏ –ø–∏—à–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.' },
    { emoji: 'üßπ', text: '–ü–ª—É—Ç–æ–Ω –¥–µ–ª–∞–µ—Ç —É–±–æ—Ä–∫—É –≤ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–∏ ‚Äî –æ—Å—Ç–∞–≤—å –µ–º—É –ø–∞—Ä—É –º–∏–Ω—É—Ç —Ö–∞–æ—Å–∞.' },
    { emoji: 'üåï', text: '–õ—É–Ω–∞ –ø—Ä–∏–º–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞.' },
  ];
}

const FALLBACK_LOADING_MESSAGES: HoroscopeLoadingMessage[] = getFallbackLoadingMessages();

function buildLoadingMessagesPrompt(userName: string, language: string): { system: string; prompt: string } {
  if (language === 'en') {
    return {
      system: 'You create witty status messages for the loading screen. Respond strictly with a JSON array.',
      prompt: `Generate 6 funny status messages about the horoscope loading process. Each status should:
- start with one suitable emoji;
- be 8-14 words long;
- mention real planets or celestial bodies (Mars, Venus, Saturn, Pluto, Jupiter, Moon, Sun, etc.);
- sound like ${userName} is ironically explaining the process (e.g., "calling Mars", "waiting for Venus to reply");
- not repeat in meaning or tone;
- not use lists, quotes, or the word "status".

Return strictly a JSON array of objects like [{"emoji":"‚ú®","text":"..."}] without explanations.`,
    };
  }

  if (language === 'de') {
    return {
      system: 'Du erfindest witzige Statusnachrichten f√ºr den Ladebildschirm. Antworte strikt mit einem JSON-Array.',
      prompt: `Generiere 6 lustige Statusnachrichten √ºber den Horoskop-Ladevorgang. Jede Nachricht sollte:
- mit einem passenden Emoji beginnen;
- 8-14 W√∂rter lang sein;
- echte Planeten oder Himmelsk√∂rper erw√§hnen (Mars, Venus, Saturn, Pluto, Jupiter, Mond, Sonne usw.);
- klingen, als w√ºrde ${userName} ironisch den Prozess erkl√§ren (z.B. "Mars anrufen", "auf Antwort von Venus warten");
- sich in Bedeutung und Ton nicht wiederholen;
- keine Listen, Anf√ºhrungszeichen oder das Wort "Status" verwenden.

Gib strikt ein JSON-Array von Objekten zur√ºck wie [{"emoji":"‚ú®","text":"..."}] ohne Erkl√§rungen.`,
    };
  }

  // Russian (default)
  return {
    system: '–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –æ—Å—Ç—Ä–æ—É–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON-–º–∞—Å—Å–∏–≤–æ–º.',
    prompt: `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 6 —Å–º–µ—à–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –ö–∞–∂–¥—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω:
- –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏;
- –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 8-14 —Å–ª–æ–≤;
- —É–ø–æ–º–∏–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –∏–ª–∏ –Ω–µ–±–µ—Å–Ω—ã–µ —Ç–µ–ª–∞ (–ú–∞—Ä—Å, –í–µ–Ω–µ—Ä–∞, –°–∞—Ç—É—Ä–Ω, –ü–ª—É—Ç–æ–Ω, –Æ–ø–∏—Ç–µ—Ä, –õ—É–Ω–∞, –°–æ–ª–Ω—Ü–µ –∏ —Ç.–¥.);
- –∑–≤—É—á–∞—Ç—å —Ç–∞–∫, –±—É–¥—Ç–æ ${userName} –∏—Ä–æ–Ω–∏—á–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–≤–æ–Ω–∏–º –ú–∞—Ä—Å—É¬ª, ¬´–∂–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç –í–µ–Ω–µ—Ä—ã¬ª);
- –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –ø–æ —Å–º—ã—Å–ª—É –∏ —Ç–æ–Ω—É;
- –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏, –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ —Å–ª–æ–≤–æ ¬´—Å—Ç–∞—Ç—É—Å¬ª.

–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞ [{"emoji":"‚ú®","text":"..."}] –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`,
  };
}

export async function fetchHoroscopeLoadingMessages(
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  signal?: AbortSignal,
  language = 'ru',
  userProfile?: UserProfileData | null,
): Promise<HoroscopeLoadingMessage[]> {
  const userName = getUserName(userProfile);
  const { system, prompt } = buildLoadingMessagesPrompt(userName, language);

  try {
    const { callAI } = await import('./aiClient');
    const response = await callAI({
      system,
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.95,
      maxTokens: 320,
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    });

    const cleaned = response.text.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim();
    const parsed = JSON.parse(cleaned) as HoroscopeLoadingMessage[];

    if (!Array.isArray(parsed) || parsed.length === 0) {
      throw new Error('Empty loading messages array');
    }

    return parsed
      .filter(entry => entry && typeof entry.emoji === 'string' && typeof entry.text === 'string')
      .map(entry => ({
        emoji: entry.emoji.trim(),
        text: entry.text.trim(),
      }))
      .filter(entry => entry.emoji && entry.text)
      .slice(0, 6);
  } catch (error) {
    console.warn('Failed to fetch custom loading messages, using fallback:', error);
    return getFallbackLoadingMessages(language);
  }
}

export async function fetchSergeyLoadingMessages(
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  signal?: AbortSignal,
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): Promise<HoroscopeLoadingMessage[]> {
  const defaultPartnerName = language === 'en'
    ? 'partner'
    : language === 'de'
    ? 'Partner'
    : '–ø–∞—Ä—Ç–Ω—ë—Ä';

  const partnerName = getPartnerName(userPartner, defaultPartnerName);

  const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ${partnerName}.
–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ö–ê–ñ–î–û–ì–û —Å—Ç–∞—Ç—É—Å–∞:
- –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª–∞;
- –æ–¥–Ω–æ —ë–º–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (12‚Äì20 —Å–ª–æ–≤), –ë–ï–ó —Ç–æ—á–µ–∫ –≤–Ω—É—Ç—Ä–∏, –ë–ï–ó –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫;
- —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –Ω–∞–º–µ–∫–∞–µ—Ç, —á—Ç–æ ${partnerName} —Å–Ω–æ–≤–∞ –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º (—Å –æ—Ç—Å—ã–ª–∫–∞–º–∏ –∫ –ø–ª–∞–Ω–µ—Ç–∞–º, –∫–æ—Å–º–æ—Å—É, –Ω–µ–±–µ—Å–Ω–æ–π –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏);
- –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ª—ë–≥–∫–∏–π –º–∞—Ç —Ç–∏–ø–∞ ¬´–Ω–∞—Ö—Ä–µ–Ω–∞¬ª, –Ω–æ –∏–∑–±–µ–≥–∞–π –∂—ë—Å—Ç–∫–æ–π –±—Ä–∞–Ω–∏;
- –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è —Å–º—ã—Å–ª–æ–º –∏ –æ–±—Ä–∞–∑–∞–º–∏;
- –í–ê–ñ–ù–û: –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –ë–ï–ó –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, –≤—Å–µ –∫–∞–≤—ã—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON-–º–∞—Å—Å–∏–≤ –≤–∏–¥–∞ [{"emoji":"‚ú®","text":"..."}] –ë–ï–ó markdown, –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π, –ë–ï–ó –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ text.`;

  try {
    const { callAI } = await import('./aiClient');
    const response = await callAI({
      system: `–¢—ã —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å, –ø–æ—á–µ–º—É –≥–æ—Ä–æ—Å–∫–æ–ø ${partnerName} –µ—â—ë –≥—Ä—É–∑–∏—Ç—Å—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON.`,
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
      maxTokens: 600,
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    });

    let cleaned = response.text.replace(/```json\s*/gi, '').replace(/```\s*/g, '').trim();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±—Ä–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ JSON
    cleaned = cleaned.replace(/\n/g, ' ').replace(/\r/g, '');

    const parsed = JSON.parse(cleaned) as HoroscopeLoadingMessage[];

    if (!Array.isArray(parsed) || parsed.length === 0) {
      throw new Error('Empty Sergey loading messages array');
    }

    return parsed
      .filter(entry => entry && typeof entry.emoji === 'string' && typeof entry.text === 'string')
      .map(entry => ({
        emoji: entry.emoji.trim(),
        text: entry.text.replace(/\s+/g, ' ').trim(),
      }))
      .filter(entry => entry.emoji && entry.text)
      .slice(0, 10);
  } catch (error) {
    console.warn('Failed to fetch Sergey loading messages, using fallback:', error);
    return getSergeyLoadingFallback(10, userPartner);
  }
}

export async function fetchDailyHoroscopeForDate(
  isoDate: string,
  signal?: AbortSignal,
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  cycles?: CycleData[],
  memory?: HoroscopeMemoryEntry[],
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): Promise<DailyHoroscope> {
  try {
    const userName = getUserName(userProfile);

    // Privacy-first: only use partner if they have both name AND birth date
    const partnerName = hasPartner(userPartner) ? getPartnerName(userPartner) : null;

    const astroHighlights = buildAstroHighlights(isoDate, 3, userName, partnerName || '');

    // Privacy-first: only fetch weather if user granted location access
    const coords = getUserCoordinates(userProfile);
    const weatherSummary = coords
      ? await fetchDailyWeatherSummary(isoDate, signal, language, coords.latitude, coords.longitude)
      : null;

    // Privacy-first: only include cycle hint if cycle tracking is enabled
    const cycleHint = (cycles && isCycleTrackingEnabled(userProfile))
      ? buildDailyCycleHint(cycles, isoDate, language, userName)
      : null;

    const prompt = buildDailyPrompt(isoDate, astroHighlights, weatherSummary, cycleHint, memory, language, userProfile, userPartner);
    if (astroHighlights.length > 0) {
      console.log('[Horoscope] Daily astro highlights:', astroHighlights);
    }

    const requestOptions: HoroscopeRequestOptions = {
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    };

    const result = await requestHoroscopeText(prompt, requestOptions, 600, 850, buildHoroscopeSystemPrompt(language));

    let memoryEntry: HoroscopeMemoryEntry | undefined;
    if (result.text) {
      const extracted = await extractHoroscopeMemoryEntry(result.text, isoDate, 'daily', requestOptions);
      if (extracted) {
        memoryEntry = extracted;
      }
    }

    console.log(`Generated daily horoscope using ${result.provider}`);

    return {
      text: result.text,
      date: isoDate ?? null,
      provider: result.provider,
      highlights: astroHighlights,
      memoryEntry,
    };
  } catch (error) {
    console.error('Failed to generate daily horoscope:', error);
    return {
      text: getFallbackHoroscopeText('daily', language, userProfile, userPartner),
      date: isoDate ?? null,
      provider: 'fallback',
      highlights: [],
    };
  }
}

export async function fetchSergeyDailyHoroscopeForDate(
  isoDate: string,
  signal?: AbortSignal,
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  cycles?: CycleData[],
  memory?: HoroscopeMemoryEntry[],
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): Promise<DailyHoroscope> {
  try {
    const userName = getUserName(userProfile);

    // Privacy-first: partner horoscope requires partner with name AND birth date
    if (!hasPartner(userPartner)) {
      throw new Error('Partner not defined or missing birth date - cannot generate partner horoscope');
    }

    const partnerName = getPartnerName(userPartner);

    const allHighlights = buildAstroHighlights(isoDate, 6, userName, partnerName);
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ö–∞–π–ª–∞–π—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
    const partnerSpecific = allHighlights.filter(entry => {
      const lowerEntry = entry.toLowerCase();
      const lowerPartnerName = partnerName.toLowerCase();
      return (
        lowerEntry.includes(lowerPartnerName) ||
        lowerEntry.includes('–æ—Ç–Ω–æ—à–µ–Ω–∏') ||
        lowerEntry.includes('–ø–∞—Ä—Ç–Ω–µ—Ä')
      );
    });
    const astroHighlights = partnerSpecific.length > 0 ? partnerSpecific : allHighlights.slice(0, 3);

    // Privacy-first: only fetch weather if user granted location access
    const coords = getUserCoordinates(userProfile);
    const rawWeatherSummary = coords
      ? await fetchDailyWeatherSummary(isoDate, signal, language, coords.latitude, coords.longitude)
      : null;
    const weatherSummary = simplifyWeatherSummary(rawWeatherSummary);

    // Privacy-first: only include cycle hint if cycle tracking is enabled
    const cycleHint = (cycles && isCycleTrackingEnabled(userProfile))
      ? buildSergeyCycleHint(cycles, isoDate, language, userName, partnerName)
      : null;
    const prompt = buildSergeyDailyPrompt(isoDate, astroHighlights, weatherSummary, cycleHint, memory, language, userProfile, userPartner);

    const requestOptions: HoroscopeRequestOptions = {
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    };

    const result = await requestHoroscopeText(
      prompt,
      requestOptions,
      520,
      680,
      buildPartnerSystemPrompt(language, userProfile, userPartner),
    );

    let memoryEntry: HoroscopeMemoryEntry | undefined;
    if (result.text) {
      const extracted = await extractHoroscopeMemoryEntry(result.text, isoDate, 'sergey', requestOptions);
      if (extracted) {
        memoryEntry = extracted;
      }
    }

    console.log(`Generated Sergey daily horoscope using ${result.provider}`);

    return {
      text: result.text,
      date: isoDate ?? null,
      provider: result.provider,
      highlights: astroHighlights,
      memoryEntry,
    };
  } catch (error) {
    console.error('Failed to generate Sergey daily horoscope:', error);
    return {
      text: getFallbackHoroscopeText('sergey', language, userProfile, userPartner),
      date: isoDate ?? null,
      provider: 'fallback',
      highlights: [],
    };
  }
}

function buildSergeyBannerSystemPrompt(
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null
): string {
  const userName = getUserName(userProfile, language === 'en' ? 'user' : language === 'de' ? 'Benutzer' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
  const defaultPartnerName = language === 'en'
    ? 'partner'
    : language === 'de'
    ? 'Partner'
    : '–ø–∞—Ä—Ç–Ω—ë—Ä';
  const partnerName = getPartnerName(userPartner, defaultPartnerName);

  if (language === 'en') {
    return `You're a witty copywriter helping ${userName} formulate a card about ${partnerName}. Write casually, modern, and without pompousness.`;
  }

  if (language === 'de') {
    return `Du bist eine sarkastische Texterin, die ${userName} hilft, eine Karte √ºber ${partnerName} zu formulieren. Antworte locker, modern und ohne Pathos.`;
  }

  // Russian (default)
  return `–¢—ã ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä—à–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç ${userName} —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ ${partnerName}. –û—Ç–≤–µ—á–∞–π –ª–µ–≥–∫–æ, –ø–æ-—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏ –±–µ–∑ –ø–∞—Ñ–æ—Å–∞.`;
}

function buildSergeyBannerPrompt(
  isoDate: string,
  memoryEntries?: HoroscopeMemoryEntry[],
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): string {
  const defaultPartnerName = language === 'en'
    ? 'partner'
    : language === 'de'
    ? 'Partner'
    : '–ø–∞—Ä—Ç–Ω—ë—Ä';
  const partnerName = getPartnerName(userPartner, defaultPartnerName);
  const userName = getUserName(userProfile, language === 'en' ? 'user' : language === 'de' ? 'Benutzer' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');

  // Create user object for compatibility with existing template strings
  const user = { name: userName };

  const todayFallback = language === 'en' ? 'today' : language === 'de' ? 'heute' : '—Å–µ–≥–æ–¥–Ω—è';
  const locale = language === 'en' ? 'en-US' : language === 'de' ? 'de-DE' : 'ru-RU';

  const parsedDate = new Date(isoDate);
  const formattedDate = Number.isNaN(parsedDate.getTime())
    ? todayFallback
    : new Intl.DateTimeFormat(locale, {
        day: 'numeric',
        month: 'long',
      }).format(parsedDate);

  const memoryReminders = buildSergeyMemoryReminders(memoryEntries, language);
  const remindersSection = memoryReminders.length
    ? (language === 'en'
        ? `Additional hints on tone and themes:\n${memoryReminders.join('\n')}\n`
        : language === 'de'
        ? `Zus√§tzliche Hinweise zu Ton und Themen:\n${memoryReminders.join('\n')}\n`
        : `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–æ–Ω—É –∏ —Ç–µ–º–∞–º:\n${memoryReminders.join('\n')}\n`)
    : '';

  if (language === 'en') {
    return `Need to update the card texts "What's up with ${partnerName}?" for ${formattedDate}.

Give four short phrases with the same meaning but in new wordings:
- title ‚Äî a question of 4-7 words with intrigue like "What's up with ${partnerName}?" (keep the name ${partnerName} in any case).
- subtitle ‚Äî one dense sentence (up to 22 words) with light sarcasm about today; WITHOUT clich√©s like "again stirring things up", "horoscope will tell all", "let's find out the truth". Come up with a fresh wording about what's happening with him today (for example: "Seems like today he's ready to redo...", "He's having the kind of day when...", "There's suspicion that plans...").
- primaryButton ‚Äî 2-3 words, a call to check the horoscope.
- secondaryButton ‚Äî 1-2 words, a playful excuse like "Don't care".

Rules:
- Conversational English, light sarcasm is ok, but no swearing or insults.
- No emoji or quotes.
- Button captions without period at the end.
- Subtitle about today, but WITHOUT repeating templates.
- Don't mention ${user.name} directly and don't address the reader with "you" ‚Äî make wordings impersonal ("Seems like ${partnerName}...", "There's suspicion that...").
${remindersSection}Return exactly one line of JSON without comments:
{"title":"...","subtitle":"...","primaryButton":"...","secondaryButton":"..."}
`;
  }

  if (language === 'de') {
    return `Es m√ºssen die Kartentexte "Was ist los mit ${partnerName}?" f√ºr ${formattedDate} aktualisiert werden.

Gib vier kurze S√§tze mit der gleichen Bedeutung, aber in neuen Formulierungen:
- title ‚Äî eine Frage mit 4-7 W√∂rtern mit Intrige wie "Was ist los mit ${partnerName}?" (behalte den Namen ${partnerName} in beliebigem Fall).
- subtitle ‚Äî ein dichter Satz (bis zu 22 W√∂rter) mit leichtem Sarkasmus √ºber heute; OHNE Klischees wie "wieder am Intrigieren", "Horoskop wird alles erz√§hlen", "finden wir die Wahrheit heraus". Erfinde eine frische Formulierung √ºber das, was heute mit ihm passiert (zum Beispiel: "Scheint, als w√§re er heute bereit, zu √ºberarbeiten...", "Er hat so einen Tag, an dem...", "Es gibt den Verdacht, dass Pl√§ne...").
- primaryButton ‚Äî 2-3 W√∂rter, ein Aufruf, ins Horoskop zu schauen.
- secondaryButton ‚Äî 1-2 W√∂rter, eine spielerische Ausrede wie "Ist mir egal".

Regeln:
- Umgangssprachliches Deutsch, leichter Sarkasmus ist ok, aber keine Schimpfw√∂rter oder Beleidigungen.
- Keine Emoji oder Anf√ºhrungszeichen.
- Buttonbeschriftungen ohne Punkt am Ende.
- Untertitel √ºber heute, aber OHNE sich wiederholende Vorlagen.
- Erw√§hne ${user.name} nicht direkt und sprich den Leser nicht mit "du" an ‚Äî mache Formulierungen unpers√∂nlich ("Scheint, als ob ${partnerName}...", "Es gibt den Verdacht, dass...").
${remindersSection}Gib genau eine Zeile JSON ohne Kommentare zur√ºck:
{"title":"...","subtitle":"...","primaryButton":"...","secondaryButton":"..."}
`;
  }

  // Russian (default)
  return `–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ ¬´–ß—Ç–æ —Ç–∞–º —É ${partnerName}?¬ª –Ω–∞ ${formattedDate}.

–î–∞–π —á–µ—Ç—ã—Ä–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã —Å —Ç–µ–º –∂–µ —Å–º—ã—Å–ª–æ–º, –Ω–æ –≤ –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞—Ö:
- title ‚Äî –≤–æ–ø—Ä–æ—Å –Ω–∞ 4-7 —Å–ª–æ–≤ —Å –∏–Ω—Ç—Ä–∏–≥–æ–π –≤—Ä–æ–¥–µ ¬´–ê —á—Ç–æ —Ç–∞–º —É ${partnerName}?¬ª (–æ—Å—Ç–∞–≤—å –∏–º—è ${partnerName} –≤ –ª—é–±–æ–º –ø–∞–¥–µ–∂–µ).
- subtitle ‚Äî –æ–¥–Ω–æ –ø–ª–æ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ 22 —Å–ª–æ–≤) —Å –ª—ë–≥–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º –ø—Ä–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å; –ë–ï–ó –∫–ª–∏—à–µ —Ç–∏–ø–∞ ¬´—Å–Ω–æ–≤–∞ –º—É—Ç–∏—Ç¬ª, ¬´–æ–ø—è—Ç—å –∑–∞—Ç–µ–≤–∞–µ—Ç¬ª, ¬´–≥–æ—Ä–æ—Å–∫–æ–ø –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂–µ—Ç¬ª, ¬´—É–∑–Ω–∞–µ–º –ø—Ä–∞–≤–¥—É¬ª. –ü—Ä–∏–¥—É–º–∞–π —Å–≤–µ–∂—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø—Ä–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É –Ω–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –æ–Ω –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å...¬ª, ¬´–£ –Ω–µ–≥–æ —Ç–∞–∫–æ–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞...¬ª, ¬´–ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ, —á—Ç–æ –ø–ª–∞–Ω—ã...¬ª).
- primaryButton ‚Äî 2-3 —Å–ª–æ–≤–∞, –ø—Ä–∏–∑—ã–≤ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –≥–æ—Ä–æ—Å–∫–æ–ø.
- secondaryButton ‚Äî 1-2 —Å–ª–æ–≤–∞, –∏–≥—Ä–∞—é—â–∞—è –æ—Ç–º–∞–∑–∫–∞ –≤ –¥—É—Ö–µ ¬´–ú–Ω–µ –ø–æ—Ñ–∏–≥¬ª.

–ü—Ä–∞–≤–∏–ª–∞:
- –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ –ª—ë–≥–∫–∏–π —Å–∞—Ä–∫–∞–∑–º, –Ω–æ –±–µ–∑ –º–∞—Ç–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π.
- –ù–∏–∫–∞–∫–∏—Ö —ç–º–æ–¥–∑–∏ –∏ –∫–∞–≤—ã—á–µ–∫.
- –ü–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –±–µ–∑ —Ç–æ—á–∫–∏ –Ω–∞ –∫–æ–Ω—Ü–µ.
- –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –Ω–æ –ë–ï–ó –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —à–∞–±–ª–æ–Ω–æ–≤.
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä—è–º–æ ${user.name} –∏ –Ω–µ –æ–±—Ä–∞—â–∞–π—Å—è –∫ —á–∏—Ç–∞—Ç–µ–ª—å–Ω–∏—Ü–µ –Ω–∞ ¬´—Ç—ã¬ª ‚Äî –¥–µ–ª–∞–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–º–∏ (¬´–ö–∞–∂–µ—Ç—Å—è, ${partnerName}‚Ä¶¬ª, ¬´–ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ, —á—Ç–æ‚Ä¶¬ª).
${remindersSection}–í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{"title":"...","subtitle":"...","primaryButton":"...","secondaryButton":"..."}
`;
}

export async function fetchSergeyBannerCopy(
  isoDate: string,
  signal?: AbortSignal,
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  memory?: HoroscopeMemoryEntry[],
  language = 'ru',
  userProfile?: UserProfileData | null,
  userPartner?: PartnerData | null,
): Promise<SergeyBannerCopy> {
  const prompt = buildSergeyBannerPrompt(isoDate, memory, language, userProfile, userPartner);

  try {
    const { callAI } = await import('./aiClient');
    const response = await callAI({
      system: buildSergeyBannerSystemPrompt(language, userProfile, userPartner),
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.75,
      maxTokens: 220,
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    });

    const cleaned = response.text.replace(/```json\s*/gi, '').replace(/```\s*/g, '').trim();
    const parsed = JSON.parse(cleaned) as Partial<SergeyBannerCopy>;

    const normalize = (value: unknown): string =>
      typeof value === 'string' ? value.replace(/\s+/g, ' ').trim() : '';

    const result: SergeyBannerCopy = {
      title: normalize(parsed.title),
      subtitle: normalize(parsed.subtitle),
      primaryButton: normalize(parsed.primaryButton),
      secondaryButton: normalize(parsed.secondaryButton),
    };

    if (!result.title || !result.subtitle || !result.primaryButton || !result.secondaryButton) {
      throw new Error('Sergey banner copy is incomplete');
    }

    console.log('[Horoscope] Generated Sergey banner copy using', response.provider);
    return result;
  } catch (error) {
    console.error('Failed to fetch Sergey banner copy:', error);
    throw error instanceof Error ? error : new Error(String(error));
  }
}

async function extractHoroscopeMemoryEntry(
  text: string,
  isoDate: string,
  source: HoroscopeMemoryEntry['source'],
  options: HoroscopeRequestOptions,
): Promise<HoroscopeMemoryEntry | null> {
  if (!text.trim()) {
    return null;
  }

  try {
    const { callAI } = await import('./aiClient');
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø (–∏—Å—Ç–æ—á–Ω–∏–∫: ${source}) –∏ –∫—Ä–∞—Ç–∫–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π, –æ —á—ë–º –æ–Ω.

–¢–µ–∫—Å—Ç:
"""
${text}
"""

–í–µ—Ä–Ω–∏ JSON –≤–∏–¥–∞ {
  "summary": "–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–±—ä—è—Å–Ω—è—é—â–µ–µ –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç/—Å—é–∂–µ—Ç",
  "keyThemes": ["2-4 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º—ã –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏"],
  "avoidPhrases": ["1-3 –≤–Ω—è—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–æ—Å–ª–æ–≤–Ω–æ –∑–∞–≤—Ç—Ä–∞"],
  "tone": "positive | neutral | negative | mixed"
}

–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ JSON.`;

    const response = await callAI({
      system: '–¢—ã –≤—ã–¥–µ–ª—è–µ—à—å –∑–∞–º–µ—Ç–∫–∏ –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–æ–º.',
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.2,
      maxTokens: 320,
      signal: options.signal,
      claudeApiKey: options.claudeApiKey,
      claudeProxyUrl: options.claudeProxyUrl,
      openAIApiKey: options.openAIApiKey,
    });

    const cleaned = response.text.replace(/```json\s*/gi, '').replace(/```\s*/g, '').trim();
    const parsed = JSON.parse(cleaned) as {
      summary?: unknown;
      keyThemes?: unknown;
      avoidPhrases?: unknown;
      tone?: unknown;
    };

    const summary =
      typeof parsed.summary === 'string' && parsed.summary.trim().length > 0
        ? parsed.summary.trim()
        : '';
    if (!summary) {
      return null;
    }

    const keyThemes = Array.isArray(parsed.keyThemes)
      ? parsed.keyThemes
          .filter((item): item is string => typeof item === 'string' && item.trim().length > 0)
          .slice(0, 4)
          .map(item => item.trim())
      : [];

    const avoidPhrases = Array.isArray(parsed.avoidPhrases)
      ? parsed.avoidPhrases
          .filter((item): item is string => typeof item === 'string' && item.trim().length > 0)
          .slice(0, 3)
          .map(item => item.trim())
      : [];

    const tone =
      parsed.tone === 'positive' ||
      parsed.tone === 'neutral' ||
      parsed.tone === 'negative' ||
      parsed.tone === 'mixed'
        ? parsed.tone
        : 'mixed';

    const entry: HoroscopeMemoryEntry = {
      id: `${source}-${isoDate}`,
      source,
      date: isoDate,
      summary,
      keyThemes,
      avoidPhrases,
      tone,
      createdAt: new Date().toISOString(),
    };

    return entry;
  } catch (error) {
    console.warn('Failed to extract horoscope memory entry:', error);
    return null;
  }
}

export function mergeHoroscopeMemoryEntries(
  existing: HoroscopeMemoryEntry[],
  next: HoroscopeMemoryEntry,
  maxEntries = MAX_MEMORY_KEEP,
): HoroscopeMemoryEntry[] {
  const deduped = existing.filter(
    entry => !(entry.source === next.source && entry.date === next.date),
  );

  const merged = [...deduped, next].sort(
    (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),
  );

  if (merged.length > maxEntries) {
    return merged.slice(merged.length - maxEntries);
  }

  return merged;
}
