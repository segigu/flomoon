import { buildAstroHighlights } from './astro';
import type { AIRequestOptions, AIMessage } from './aiClient';
import { fetchDailyWeatherSummary, fetchWeeklyWeatherSummary } from './weather';
import { buildDailyCycleHint, buildSergeyCycleHint, buildWeeklyCycleHint } from './cyclePrompt';
import type { CycleData, HoroscopeMemoryEntry } from '../types';
import { getCurrentUser } from '../data/userProfile';
import { ASTRO_PROFILES } from '../data/astroProfiles';

export interface DailyHoroscope {
  text: string;
  date: string | null;
  provider?: 'claude' | 'openai' | 'fallback';
  weekRange?: string;
  highlights?: string[];
  memoryEntry?: HoroscopeMemoryEntry;
}

export interface HoroscopeLoadingMessage {
  emoji: string;
  text: string;
}

const SERGEY_FALLBACK_LEADS = [
  { emoji: 'ü™ê', lead: '–°–∞—Ç—É—Ä–Ω —Ñ—ã—Ä–∫–∞–µ—Ç:' },
  { emoji: 'üî•', lead: '–ú–∞—Ä—Å —Ö–º—É—Ä–∏—Ç—Å—è:' },
  { emoji: 'üåÄ', lead: '–Æ–ø–∏—Ç–µ—Ä –Ω–∞–±–ª—é–¥–∞–µ—Ç:' },
  { emoji: 'üíã', lead: '–í–µ–Ω–µ—Ä–∞ —É—Ö–º—ã–ª—è–µ—Ç—Å—è:' },
  { emoji: 'üì°', lead: '–ú–µ—Ä–∫—É—Ä–∏–π —à–µ–ø—á–µ—Ç:' },
  { emoji: '‚ö°Ô∏è', lead: '–£—Ä–∞–Ω –º–æ—Ä–≥–∞–µ—Ç:' },
  { emoji: 'üßä', lead: '–ù–µ–ø—Ç—É–Ω –≤–∑–¥—ã—Ö–∞–µ—Ç:' },
  { emoji: 'üßØ', lead: '–ü–ª—É—Ç–æ–Ω —â—ë–ª–∫–∞–µ—Ç –∑–∞–∂–∏–≥–∞–ª–∫–æ–π:' },
];

const SERGEY_FALLBACK_MIDDLES = [
  '–°–µ—Ä—ë–∂–∞ –æ–ø—è—Ç—å –ª–∏—Å—Ç–∞–µ—Ç —á–∞—Ç—ã',
  '–°–µ—Ä—ë–∂–∞ –ø–∏—à–µ—Ç –ø–ª–∞–Ω –Ω–æ–º–µ—Ä –≤–æ—Å–µ–º—å',
  '–°–µ—Ä—ë–∂–∞ –∫–∏–≤–∞–µ—Ç —Å –≤–∏–¥–æ–º —Å–ø–∞—Å–∏—Ç–µ–ª—è',
  '–°–µ—Ä—ë–∂–∞ –æ—Ç–¥–∏—Ä–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –±–µ–∑ —Ü–µ–ª–∏',
  '–°–µ—Ä—ë–∂–∞ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–≤–µ—â–∞–Ω–∏–µ —Å –∑–µ—Ä–∫–∞–ª–æ–º',
  '–°–µ—Ä—ë–∂–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—á—ë—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç',
  '–°–µ—Ä—ë–∂–∞ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–∑–≥–ª—è–¥',
  '–°–µ—Ä—ë–∂–∞ –∫–ª—è–Ω—ë—Ç—Å—è, —á—Ç–æ –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º',
  '–°–µ—Ä—ë–∂–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Ä–∞–¥–∏ –≤–∏–¥–∞',
  '–°–µ—Ä—ë–∂–∞ –∂–æ–Ω–≥–ª–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∫–∞–∫ —à–∞—Ä–∏–∫–∞–º–∏',
  '–°–µ—Ä—ë–∂–∞ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∞–º —Å–µ–±–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ',
  '–°–µ—Ä—ë–∂–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–º—ã –æ–¥–Ω–∏–º –≥–ª–∞–∑–æ–º',
];

const SERGEY_FALLBACK_ENDINGS = [
  '–ö–æ–º–∞–Ω–¥–∞ –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫–∏ –º–æ–ª—á–∞',
  '–ß–∞—Ç—ã —É–∂–µ —ë—Ä–Ω–∏—á–∞—é—Ç –≤ —Ñ–æ–Ω–µ',
  '–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –∫–∞—Ç–∏—Ç –≥–ª–∞–∑–∞',
  'HR –∑–∞–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É',
  '–ü—Ä–∏–Ω—Ç–µ—Ä –ø–∏—à–µ—Ç –º–µ–º—É–∞—Ä—ã —Ñ–µ–π–ª–æ–≤',
  '–û—Ñ–∏—Å –ø—Ä—è—á–µ—Ç —Å–º–µ—Ö –ø–æ —É–≥–ª–∞–º',
  '–î–µ–¥–ª–∞–π–Ω—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –ø–æ–ø–∫–æ—Ä–Ω',
  '–£–±–æ—Ä—â–∏—Ü–∞ —Å—Ç–∞–≤–∏—Ç –≥–∞–ª–æ—á–∫—É ¬´–ø–æ–≤—Ç–æ—Ä¬ª',
  '–°—Ç–µ–Ω–∞ —à–µ–ø—á–µ—Ç ¬´–∞–≥–∞, –∫–æ–Ω–µ—á–Ω–æ¬ª',
  '–ß–∞—Å—ã —Å—á–∏—Ç–∞—é—Ç –¥–æ –ø–∞–¥–µ–Ω–∏—è',
  '–°—Ç–∏–∫–µ—Ä—ã –¥—Ä–æ–∂–∞—Ç –æ—Ç —Å–∞—Ä–∫–∞–∑–º–∞',
  '–°–æ—Å–µ–¥–Ω–∏–π –æ—Ç–¥–µ–ª —Å–Ω–∏–º–∞–µ—Ç —Å—Ç–æ—Ä–∏—Å',
];

const SERGEY_STATIC_FALLBACK: HoroscopeLoadingMessage[] = [
  { emoji: 'üßØ', text: '–ú–∞—Ä—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á–µ–º —Ç—É—à–∏—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–æ–∂–∞—Ä, –ø–æ–∫–∞ –°–µ—Ä—ë–∂–∞ –¥—ã—à–∏—Ç –Ω–∞ –ø–µ–ø–µ–ª–∏—â–µ.' },
  { emoji: 'üõ†Ô∏è', text: '–°–∞—Ç—É—Ä–Ω –≤—ã–¥–∞–ª –°–µ—Ä—ë–∂–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ ‚Äî —á–∏–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ —Ä—É—Ö–Ω—É–ª–æ –∑–∞ –Ω–æ—á—å.' },
  { emoji: 'üßæ', text: '–ú–µ—Ä–∫—É—Ä–∏–π –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–ª –°–µ—Ä—ë–∂–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–µ–∂–Ω–∏–π —É–∂–µ —Å–≥–æ—Ä–µ–ª –Ω–∞—Ö—É–π.' },
  { emoji: 'üö¨', text: '–ü–ª—É—Ç–æ–Ω –ø–æ–¥–∫—É—Ä–∏–≤–∞–µ—Ç –°–µ—Ä—ë–∂–µ —Å–∏–≥–∞—Ä–µ—Ç—É –∏ —à–µ–ø—á–µ—Ç, —á—Ç–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –≤—ã–π–¥–µ—Ç.' },
  { emoji: 'üì¶', text: '–Æ–ø–∏—Ç–µ—Ä –Ω–∞–≤–∞–ª–∏–ª –∑–∞–¥–∞—á, –ø–æ–∫–∞ –°–µ—Ä—ë–∂–∞ —Ç–∞—Å–∫–∞–ª –∫–æ—Ä–æ–±–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–ª—Å—è —Å–∫–≤–æ–∑—å –∑—É–±—ã.' },
];

const pickRandom = <T,>(values: T[]): T => values[Math.floor(Math.random() * values.length)];

export function getSergeyLoadingFallback(count = 10): HoroscopeLoadingMessage[] {
  const results: HoroscopeLoadingMessage[] = [];
  const usedCombos = new Set<string>();
  let attempts = 0;
  const maxAttempts = count * 25;

  while (results.length < count && attempts < maxAttempts) {
    attempts += 1;
    const lead = pickRandom(SERGEY_FALLBACK_LEADS);
    const middle = pickRandom(SERGEY_FALLBACK_MIDDLES);
    const ending = pickRandom(SERGEY_FALLBACK_ENDINGS);
    const key = `${lead.lead}|${middle}|${ending}`;
    if (usedCombos.has(key)) {
      continue;
    }
    usedCombos.add(key);
    const text = `${lead.lead} ${middle}. ${ending}.`.replace(/\s+/g, ' ').trim();
    results.push({ emoji: lead.emoji, text });
  }

  if (results.length < count) {
    const extra = [...SERGEY_STATIC_FALLBACK];
    while (results.length < count && extra.length > 0) {
      const candidate = extra.shift()!;
      results.push(candidate);
    }
    while (results.length < count) {
      results.push({
        emoji: pickRandom(SERGEY_FALLBACK_LEADS).emoji,
        text: '–ó–≤—ë–∑–¥—ã –º–∏–≥–Ω—É–ª–∏: –°–µ—Ä—ë–∂–∞ —Å–Ω–æ–≤–∞ –ø—Ä–æ–¥–∞—ë—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ—Ä—è–¥–∫–∞.',
      });
    }
  }

  return results;
}

export interface SergeyBannerCopy {
  title: string;
  subtitle: string;
  primaryButton: string;
  secondaryButton: string;
}

const MAX_MEMORY_KEEP = 12;
const DAILY_MEMORY_LOOKBACK = 4;
const STATIC_AVOID_THEMES = [
  '–∑–∞–µ–∑–∂–µ–Ω–Ω–æ–µ –Ω—ã—Ç—å—ë –ø—Ä–æ –ø–æ–≥–æ–¥—É',
  '–≤–µ—á–Ω–æ–µ "–Ω–∞—á–Ω—É —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"',
  '–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–µ–ª',
  '–ø—è—Ç—É—é –∫—Ä—É–∂–∫—É –∫–æ—Ñ–µ "–±–µ–∑ –Ω–µ–≥–æ –Ω–µ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å"',
  '—Å–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—â–∞–ª–∏ –±—Ä–æ—Å–∏—Ç—å',
  '–∂–∞–ª–æ–±—ã –Ω–∞ –±–µ—Å—Å–æ–Ω–Ω–∏—Ü—É –∫–∞–∫ –º–∞–Ω—Ç—Ä—É',
];
const STATIC_SERGEY_AVOID_THEMES = [
  '—É–≥—Ä—é–º',
  '–º—Ä–∞—á–Ω',
  '—Ö–æ–¥–∏—Ç —Ç–µ–Ω—å—é',
  '–±—É—Ä—á–∏—Ç –º–æ–ª—á–∞',
  '—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π –¥–µ–Ω—å',
  '–≤–µ—á–Ω–æ –≤—ã–∂–∞—Ç—ã–π',
  '–±–∞—Ä–¥–∞–∫',
  '–±–µ—Ä–ª–æ–≥–∞',
  '—Ö–∞–æ—Å –≤ –æ—Ñ–∏—Å–µ',
  '—Å–Ω–æ–≤–∞ –º—É—Ç–∏—Ç',
  '–æ–ø—è—Ç—å –∑–∞—Ç–µ–≤–∞–µ—Ç',
  '–æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–ª–∞–Ω',
  '—Å–Ω–æ–≤–∞ —á—Ç–æ-—Ç–æ',
];

function sortMemoryByRecency(entries: HoroscopeMemoryEntry[] | undefined): HoroscopeMemoryEntry[] {
  if (!entries?.length) {
    return [];
  }
  return [...entries].sort(
    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),
  );
}

function selectRecentMemory(
  entries: HoroscopeMemoryEntry[] | undefined,
  source: HoroscopeMemoryEntry['source'],
  limit = DAILY_MEMORY_LOOKBACK,
): HoroscopeMemoryEntry[] {
  return sortMemoryByRecency(entries)
    .filter(entry => entry.source === source)
    .slice(0, limit);
}

function formatMemoryDateLabel(value: string): string {
  const parsed = new Date(value);
  if (Number.isNaN(parsed.getTime())) {
    return value;
  }
  return new Intl.DateTimeFormat('ru-RU', {
    day: 'numeric',
    month: 'long',
  }).format(parsed);
}

function buildDailyMemoryReminders(
  memoryEntries: HoroscopeMemoryEntry[] | undefined,
): string[] {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];
  const partnerName = partner?.name || '–ø–∞—Ä—Ç–Ω—ë—Ä';

  const reminders: string[] = [
    `- –õ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –Ω–µ –º—É—Å–æ–ª—å –±–µ–∑ –ø–æ–≤–æ–¥–∞: –¥–µ—Ä–∂–∏ —Ñ–æ–∫—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ, –æ—â—É—â–µ–Ω–∏—è—Ö ${user.name} –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å ${partnerName}.`,
    `- –ó–∞–µ–∑–∂–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã (${STATIC_AVOID_THEMES.join(', ')}) –ª–∏–±–æ –æ–±—Ö–æ–¥–∏, –ª–∏–±–æ —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª—è–π.`,
  ];

  const recent = selectRecentMemory(memoryEntries, 'daily');
  if (!recent.length) {
    return reminders;
  }

  const historyPieces = recent.map(entry => {
    const label = formatMemoryDateLabel(entry.date);
    const mainTheme = entry.keyThemes?.length
      ? entry.keyThemes.slice(0, 2).join(' / ')
      : entry.summary;
    return `${label} ‚Äî ${mainTheme}`;
  });

  reminders.push(
    `- –ò–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–Ω–µ–π —É–∂–µ –∑–≤—É—á–∞–ª–æ: ${historyPieces.join('; ')}. –ù–∞–π–¥–∏ —Å–≤–µ–∂–∏–π —Ä–∞–∫—É—Ä—Å –∏ –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏.`,
  );

  const avoidPhrases = Array.from(
    new Set(
      recent
        .flatMap(entry => entry.avoidPhrases ?? [])
        .filter((phrase): phrase is string => typeof phrase === 'string' && phrase.trim().length > 0),
    ),
  ).slice(0, 3);

  if (avoidPhrases.length > 0) {
    const formatted = avoidPhrases.map(phrase => `¬´${phrase}¬ª`).join(', ');
      reminders.push(`- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ${formatted} ‚Äî –ø–µ—Ä–µ—É–ø–∞–∫—É–π –º—ã—Å–ª–∏ –∏–Ω–∞—á–µ.`);
  }

  const staleThemeSet = new Set(
    new Set(
      recent
        .flatMap(entry => entry.keyThemes ?? [])
        .filter((theme): theme is string => typeof theme === 'string' && theme.trim().length > 0),
    ),
  );
  STATIC_AVOID_THEMES.forEach(theme => staleThemeSet.delete(theme));
  const staleThemes = Array.from(staleThemeSet).slice(0, 4);

  if (staleThemes.length > 0) {
    reminders.push(
      `- –¢–µ–º—ã ${staleThemes.join(', ')} —É–∂–µ –∑–≤—É—á–∞–ª–∏. –ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–π –ø–æ–≤–æ–¥ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç.`,
    );
  }

  return reminders;
}

function buildSergeyMemoryReminders(
  memoryEntries: HoroscopeMemoryEntry[] | undefined,
): string[] {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];
  const partnerName = partner?.name || '–ø–∞—Ä—Ç–Ω—ë—Ä';

  const reminders: string[] = [
    `- –®—É—Ç–∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω–µ–µ: –Ω–∞—Ö–æ–¥–∏ –Ω–æ–≤—ã–µ –±—ã—Ç–æ–≤—ã–µ –ø—Ä–∏–∫–æ–ª—ã –ø—Ä–æ ${partnerName}, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤—á–µ—Ä–∞—à–Ω–∏–µ –º–µ–º—ã.`,
    `- –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–ª–∏—à–µ: ${STATIC_SERGEY_AVOID_THEMES.join(', ')}.`,
    `- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏–º—è ¬´${partnerName}¬ª –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´—É –Ω–µ–≥–æ¬ª, ¬´–µ–º—É¬ª, ¬´–æ–Ω¬ª.`,
    `- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø—Ä–æ ${user.name} —Ç–∏–ø–∞ ¬´—Ç—ã –∂–µ, ${user.name}, –¥–µ—Ä–∂–∏—à—å—Å—è –º–æ–ª–æ–¥—Ü–æ–º¬ª ‚Äî –ª–∏–±–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –µ—ë –≤–æ–æ–±—â–µ, –ª–∏–±–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.`,
  ];

  const recent = selectRecentMemory(memoryEntries, 'sergey');
  if (!recent.length) {
    return reminders;
  }

  const historyPieces = recent.map(entry => {
    const label = formatMemoryDateLabel(entry.date);
    const mainTheme = entry.keyThemes?.length
      ? entry.keyThemes.slice(0, 2).join(' / ')
      : entry.summary;
    return `${label} ‚Äî ${mainTheme}`;
  });

  reminders.push(
    `- –£–∂–µ –∑–≤—É—á–∞–ª–æ: ${historyPieces.join('; ')}. –ù–∞–π–¥–∏ —Å–≤–µ–∂—É—é —Ç–µ–º—É –∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç.`,
  );

  const avoidPhrases = Array.from(
    new Set(
      recent
        .flatMap(entry => entry.avoidPhrases ?? [])
        .filter((phrase): phrase is string => typeof phrase === 'string' && phrase.trim().length > 0),
    ),
  ).slice(0, 3);

  if (avoidPhrases.length > 0) {
    const formatted = avoidPhrases.map(phrase => `¬´${phrase}¬ª`).join(', ');
    reminders.push(`- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ${formatted} ‚Äî –ø—Ä–∏–¥—É–º–∞–π –Ω–æ–≤—É—é –ø–æ–¥–∞—á—É.`);
  }

  const staleThemeSet = new Set(
    new Set(
      recent
        .flatMap(entry => entry.keyThemes ?? [])
        .filter((theme): theme is string => typeof theme === 'string' && theme.trim().length > 0),
    ),
  );
  STATIC_SERGEY_AVOID_THEMES.forEach(theme => staleThemeSet.delete(theme));
  const staleThemes = Array.from(staleThemeSet).slice(0, 4);

  if (staleThemes.length > 0) {
    reminders.push(
      `- –¢–µ–º—ã ${staleThemes.join(', ')} —É–∂–µ –±—ã–ª–∏. –ù–∞–π–¥–∏ –¥—Ä—É–≥–æ–π –ø–æ–≤–æ–¥, –ª—É—á—à–µ —Å–º–µ—à–Ω–æ–π.`,
    );
  }

  return reminders;
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞).
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ userProfile –∏ astroProfiles.
 */
function buildUserContext(): string {
  const user = getCurrentUser();
  const astroProfile = ASTRO_PROFILES[user.astroProfileId];
  const partner = user.relationshipPartners?.[0];
  const partnerAstro = partner ? ASTRO_PROFILES[partner.profileId] : null;

  const traits = user.context.personalityTraits.join(', ');
  const partnerInfo = partner && partnerAstro
    ? `–ì–ª–∞–≤–Ω—ã–π –±–ª–∏–∑–∫–∏–π —á–µ–ª–æ–≤–µ–∫ ‚Äî ${partner.relationshipType === 'romantic' ? '–ø–∞—Ä—Ç–Ω—ë—Ä' : '–¥—Ä—É–≥'} ${partner.name} (${partnerAstro.birthDate}). –û–Ω–∏ —Ç–∞—â–∞—Ç –±—ã—Ç –≤–º–µ—Å—Ç–µ, –ø–æ–¥–∫–∞–ª—ã–≤–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –ª–∞–≤–∏—Ä—É—é—Ç –º–µ–∂–¥—É –∑–∞–±–æ—Ç–æ–π –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º.`
    : '';

  return `
${user.name} ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–µ—Ö–∞–ª–∞ –∏–∑ —Ä–æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –∂–∏–≤—ë—Ç –≤ ${user.context.location}. –£—Å—Ç–∞–ª–∞, –Ω–æ –¥–µ—Ä–∂–∏—Ç—Å—è –∑–∞ —Å—á—ë—Ç ${traits}.
–û–Ω–∞ –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç —Å–∞—Ö–∞—Ä–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ª—é–±–∏—Ç, –∫–æ–≥–¥–∞ –≥–æ–≤–æ—Ä—è—Ç –ø—Ä—è–º–æ, —Å –º–∞—Ç–æ–º –∏ —Ç—Ä–æ–ª–ª–∏–Ω–≥–æ–º.
${partnerInfo}
–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥—Ä—É–≥–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –¥–µ—Ç–µ–π, –ø–æ–¥—Ä—É–≥ –∏ —Ç.–¥. –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–∂–µ–≥–æ –ø–æ–≤–æ–¥–∞ ‚Äî –≥–æ–≤–æ—Ä–∏ –æ —Ç–µ–∫—É—â–∏—Ö –æ—â—É—â–µ–Ω–∏—è—Ö, –±—ã—Ç–æ–≤—ã—Ö –¥–µ–ª–∞—Ö, –ø–ª–∞–Ω–∞—Ö, –ø–æ–≥–æ–¥–µ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.
`.trim();
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞).
 */
function buildPartnerContext(): string {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];

  if (!partner) {
    throw new Error(`User ${user.id} has no relationship partners defined`);
  }

  const partnerAstro = ASTRO_PROFILES[partner.profileId];

  return `
${partner.name} ‚Äî –ø–∞—Ä—Ç–Ω—ë—Ä ${user.name} (${partnerAstro.birthDate}). –ñ–∏–≤—ë—Ç –≤–º–µ—Å—Ç–µ —Å –Ω–µ–π –≤ ${user.context.location}, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ IT –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
–û–Ω –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç, –ª—é–±–∏—Ç –ø–æ—Ä—è–¥–æ–∫, —Å–ø–∏—Å–∫–∏ –¥–µ–ª –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å. –•–∞–æ—Å –∏ –ø—É—Å—Ç—ã–µ –æ–±–µ—â–∞–Ω–∏—è –≤—ã–≤–æ–¥—è—Ç –µ–≥–æ –∏–∑ —Å–µ–±—è.
–£ ${partner.name} –æ—Ç–¥–µ–ª—å–Ω—ã–π ¬´–æ—Ñ–∏—Å¬ª –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: –æ–Ω —Ç–∞–º –∑–∞—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –∑–∞–¥–∞—á–∏, –ø—å—ë—Ç –ª–∏—Ç—Ä—ã –∫–æ—Ñ–µ –∏ –º–µ—á—Ç–∞–µ—Ç –æ —Ç–∏—à–∏–Ω–µ.
–õ—é–±–∏—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥, –Ω–æ —Ä–µ–¥–∫–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∫–∞—Ç–∞—Ç—å—Å—è. –ù–µ –∫—É—Ä–∏—Ç –∏ –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç –ø–µ—Ä–µ–≥–∞—Ä, –ø–æ—ç—Ç–æ–º—É —á–∞—Å—Ç–æ —Ç—Ä–æ–ª–ª–∏—Ç ${user.name} –∑–∞ –µ—ë –ø—Ä–∏–≤—ã—á–∫–∏.
${partner.name} –≤–µ—á–Ω–æ —É—Å—Ç–∞–≤—à–∏–π, –æ–¥–Ω–∞–∫–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–∞—â–∏—Ç—å –≤—Å—ë –Ω–∞ —Å–µ–±–µ. ${user.name} –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π, ${partner.name} —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥–Ω–∞—á–∏–≤–∞–π.
`.trim();
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞.
 */
function buildHoroscopeSystemPrompt(): string {
  const user = getCurrentUser();
  const astroProfile = ASTRO_PROFILES[user.astroProfileId];
  const userContext = buildUserContext();

  return `–¢—ã –ø–∏—à–µ—à—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${user.name} (${astroProfile.birthDate}, –û–≤–µ–Ω ‚ôàÔ∏è).

–ö–û–ù–¢–ï–ö–°–¢:
${userContext}

–°–¢–ò–õ–¨:
–ü–∏—à–∏ —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –∏—Ä–æ–Ω–∏–µ–π ‚Äî –∫–∞–∫ —Å–∞–º–∞—è —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∞–≤–¥—É –≤ –≥–ª–∞–∑–∞ –±–µ–∑ –ø—Ä–∏–∫—Ä–∞—Å. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É (—Ö—É–π, –Ω–∞—Ö—É–π, –±–ª—è–¥—å, –ø–∏–∑–¥–µ—Ü –∏ —Ç.–¥.) ‚Äî –ù–ï –ª–µ–≥–∫–∏–π –º–∞—Ç, –∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π, –Ω–æ —É–º–µ—Å—Ç–Ω—ã–π –∏ —Å–æ –≤–∫—É—Å–æ–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å –∫—É–¥–∞ –ø–æ–¥–∞–ª—å—à–µ ‚Äî –ø–∏—à–∏ –ø—Ä—è–º–æ "–Ω–∞ —Ö—É–π", –∞ –Ω–µ —ç–≤—Ñ–µ–º–∏–∑–º—ã. –ú–∞—Ç –¥–æ–ª–∂–µ–Ω —É—Å–∏–ª–∏–≤–∞—Ç—å —Å–∞—Ä–∫–∞–∑–º –∏ –¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º.

–§–û–†–ú–ê–¢:
–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown (**, ##, ---). –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞ —Å —ç–º–æ–¥–∑–∏. –í–°–ï–ì–î–ê –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –ø–æ–ª–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!`;
}

/**
 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.
 */
function buildPartnerSystemPrompt(): string {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];

  if (!partner) {
    throw new Error(`User ${user.id} has no relationship partners defined`);
  }

  const partnerAstro = ASTRO_PROFILES[partner.profileId];
  const partnerContext = buildPartnerContext();

  return `–¢—ã –ø–∏—à–µ—à—å –µ–¥–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä–æ ${partner.name} (${partnerAstro.birthDate}) —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è ${user.name}.

–ö–û–ù–¢–ï–ö–°–¢:
${partnerContext}

–°–¢–ò–õ–¨:
- –ê–¥—Ä–µ—Å—É–π —Ç–µ–∫—Å—Ç ${user.name}, –Ω–æ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ ¬´—Ç—ã –∂–µ, ${user.name}, –¥–µ—Ä–∂–∏—à—å—Å—è –º–æ–ª–æ–¥—Ü–æ–º¬ª.
- ${user.name} —É–ø–æ–º–∏–Ω–∞–π –í–ê–†–ò–ê–¢–ò–í–ù–û –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ: –º–æ–∂–Ω–æ –≤—Å–∫–æ–ª—å–∑—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤–æ–¥–∞.
- –ü—Ä–æ ${partner.name} –ø–∏—à–∏ –≤ —Ç—Ä–µ—Ç—å–µ–º –ª–∏—Ü–µ: ¬´—É –Ω–µ–≥–æ¬ª, ¬´–µ–º—É¬ª, ¬´–µ–≥–æ¬ª, ¬´–æ–Ω¬ª. –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏–º—è ¬´${partner.name}¬ª —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è.
- –Æ–º–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω: –≤—Å—Ç–∞–≤–ª—è–π —Å–≤–µ–∂–∏–µ —à—É—Ç–∫–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±—ã—Ç–æ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –≤—á–µ—Ä–∞—à–Ω–∏–µ.
- –ù–µ –ø—Ä–µ–≤—Ä–∞—â–∞–π ${partner.name} –≤ ¬´–≤–µ—á–Ω–æ–≥–æ —É–≥—Ä—é–º—Ü–∞¬ª ‚Äî –∏—â–∏ –¥—Ä—É–≥–∏–µ –ø–æ–≤–æ–¥—å—è –¥–ª—è —Å–∞—Ä–∫–∞–∑–º–∞ (–µ–≥–æ –ø—Ä–∏–≤—ã—á–∫–∏, –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º, –∫–æ—Ñ–µ, –æ—Ñ–∏—Å –∏ —Ç.–¥.).
- –ú–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ –¥–µ–ª—É, —á—Ç–æ–±—ã —É—Å–∏–ª–∏—Ç—å —Å–∞—Ä–∫–∞–∑–º, –∞ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ.
- –ù–µ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–π ${partner.name} –∏ –Ω–µ –æ–±–µ—â–∞–π –µ–º—É —Å–≤–µ—Ç–ª–æ–≥–æ –±—É–¥—É—â–µ–≥–æ. –§–∏–Ω–∞–ª ‚Äî —Å—É—Ö–æ–π –∏–ª–∏ –µ—Ö–∏–¥–Ω—ã–π, –±–µ–∑ –ª—É—á–∏–∫–æ–≤ –Ω–∞–¥–µ–∂–¥—ã.

–§–û–†–ú–ê–¢:
- –û–¥–∏–Ω –ø–ª–æ—Ç–Ω—ã–π –∞–±–∑–∞—Ü (3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –Ω–∞—á–Ω–∏ —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª–∞.
- –ë–µ–∑ markdown, —Å–ø–∏—Å–∫–æ–≤, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
- –ó–∞–≤–µ—Ä—à–∏ —Å—É—Ö–∏–º/—è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –±–µ–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ª—ë—Ç–∞.`;
}

function getWeekRange(isoDate: string): string {
  const startDate = new Date(isoDate);
  if (Number.isNaN(startDate.getTime())) {
    return isoDate;
  }

  const endDate = new Date(startDate);
  endDate.setDate(startDate.getDate() + 6);

  const startDay = startDate.getDate();
  const endDay = endDate.getDate();

  const monthFormatter = new Intl.DateTimeFormat('ru-RU', { month: 'long', day: 'numeric' });
  const startMonth = monthFormatter.format(startDate).split(' ')[1]; // "21 –æ–∫—Ç—è–±—Ä—è" -> "–æ–∫—Ç—è–±—Ä—è"
  const endMonth = monthFormatter.format(endDate).split(' ')[1]; // "27 –æ–∫—Ç—è–±—Ä—è" -> "–æ–∫—Ç—è–±—Ä—è"

  // –ï—Å–ª–∏ –º–µ—Å—è—Ü—ã —Ä–∞–∑–Ω—ã–µ
  if (startMonth !== endMonth) {
    return `${startDay} ${startMonth} ‚Äî ${endDay} ${endMonth}`;
  }

  // –ï—Å–ª–∏ –æ–¥–∏–Ω –º–µ—Å—è—Ü
  return `${startDay}‚Äì${endDay} ${startMonth}`;
}

function simplifyWeatherSummary(summary: string | null | undefined): string | null {
  if (!summary) {
    return null;
  }

  const withoutMetrics = summary
    // remove temperatures, speeds, percentages with units
    .replace(/-?\d+[.,]?\d*\s*(?:¬∞C|¬∞|–≥—Ä–∞–¥—É—Å(?:–æ–≤|–∞|)|–º–º|–º–∏–ª–ª–∏–º–µ—Ç—Ä(?:–æ–≤|–∞|)|–∫–º\/—á|–ø—Ä–æ—Ü–µ–Ω—Ç(?:–æ–≤|–∞|)|%)/gi, '')
    // remove leftover numeric tokens
    .replace(/-?\d+[.,]?\d*/g, '')
    // remove duplicate spaces and space before punctuation
    .replace(/\s{2,}/g, ' ')
    .replace(/\s+,/g, ',')
    .replace(/\s+\./g, '.')
    .replace(/\s+([!?;:])/g, '$1')
    .trim();

  return withoutMetrics || null;
}

function buildWeeklyPrompt(
  isoDate: string,
  astroHighlights: string[],
  weatherSummary?: string | null,
  cycleHint?: string | null,
): string {
  const user = getCurrentUser();
  const weekRange = getWeekRange(isoDate);
  const partner = user.relationshipPartners?.[0];
  const partnerName = partner?.name || '–ø–∞—Ä—Ç–Ω—ë—Ä';

  return `–ù–∞–ø–∏—à–∏ –∂—ë—Å—Ç–∫–∏–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ ${weekRange}.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞, –∫–∞–∂–¥—ã–π —Å —ç–º–æ–¥–∑–∏
- –ú–ê–ö–°–ò–ú–£–ú —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –∏—Ä–æ–Ω–∏–∏ ‚Äî –≥–æ–≤–æ—Ä–∏ –ø—Ä–∞–≤–¥—É –≤ –≥–ª–∞–∑–∞, —Ç—Ä–æ–ª–ª–∏—Ç—å –±–µ–∑ –∂–∞–ª–æ—Å—Ç–∏
- –§–æ–∫—É—Å: –µ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –±—ã—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –ø–ª–∞–Ω—ã, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ${partnerName} –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–ª–æ–º/—Ü–∏–∫–ª–∞–º–∏.
- –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—à—å ${partnerName}, –¥–µ–ª–∞–π —ç—Ç–æ –∫–∞–∫ –ø—Ä–æ –∂–∏–≤–æ–≥–æ –º—É–∂–∏–∫–∞: —Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, —Ç–æ –±–µ—Å–∏—Ç, –±–µ–∑ –ø—Ä–∏–¥—É–º–∞–Ω–Ω–æ–π –¥—Ä–∞–º—ã –∏ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –º–∞—Ç (—Ö—É–π, –Ω–∞—Ö—É–π, –±–ª—è–¥—å, –ø–∏–∑–¥–µ—Ü, –ø–∏–∑–¥–∞—Ç–æ, —Ö—É—ë–≤–æ, –æ—Ö—É–µ–Ω–Ω–æ, –µ–±–∞–Ω—É—Ç—ã–π, —ë–±–Ω—É—Ç—ã–π –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ) ‚Äî –Ω–µ —ç–≤—Ñ–µ–º–∏–∑–º—ã, –∞ –ø—Ä—è–º–æ. –ú–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–º–µ—Å—Ç–Ω—ã–º –∏ —É—Å–∏–ª–∏–≤–∞—Ç—å —Å–∞—Ä–∫–∞–∑–º. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ—Å–ª–∞—Ç—å –Ω–∞ —Ö—É–π", "–∫–∞–∫–æ–≥–æ —Ö—É—è", "–ø–∏–∑–¥–µ—Ü –∫–∞–∫ —É—Å—Ç–∞–ª–∞" –∏ —Ç.–¥.
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –≤ —Ç–µ–∫—Å—Ç–µ (—Ç–∏–ø–∞ "${partnerName}-–°—Ç—Ä–µ–ª–µ—Ü")
- –ù–ï –ø–∏—à–∏ "–û–≤–µ–Ω", "—Ç–≤–æ–π –∑–Ω–∞–∫", –¥–∞—Ç—ã ‚Äî —ç—Ç–æ —É–∂–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown (**, ##, ---)
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–æ–Ω—á–∏ –ø–æ–ª–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
- –§–∏–Ω–∞–ª: —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ-–æ–±–æ–¥—Ä—è—é—â–∏–π, —Ç–∏–ø–∞ "—Å–ø—Ä–∞–≤–∏—à—å—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å—ë –∏–¥—ë—Ç –∫ —Ö—É—è–º"
${weatherSummary ? `- –ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é: ${weatherSummary}. –û–±—ã–≥—Ä–∞–π —ç—Ç–æ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–µ –Ω–∞–∑—ã–≤–∞—è –≥–æ—Ä–æ–¥.` : ''}
${cycleHint ? `- –¶–∏–∫–ª ${user.name}: ${cycleHint}` : ''}

${astroHighlights.length ? `–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è —Ç–µ–±—è, –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö —Å–ø–∏—Å–∫–æ–º, –∞ –≤–ø–ª–µ—Ç–∏ —Å–º—ã—Å–ª –≤ —Ç–µ–∫—Å—Ç):\n${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}\n` : ''}${weatherSummary ? `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è: –ø–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª–µ ‚Äî ${weatherSummary}. –í —Ç–µ–∫—Å—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –Ω–∞–º–µ–∫–Ω–∏ –Ω–∞ —ç—Ç–∏ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–∏–∫–æ–ª—ã, –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–∑—ã–≤–∞–π.\n` : ''}${cycleHint ? `–ó–∞–ø–æ–º–Ω–∏: —Ü–∏–∫–ª —Ç–∞–∫–æ–π ‚Äî ${cycleHint}. –í —Ç–µ–∫—Å—Ç–µ –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç–æ –Ω–∞–º–µ–∫–Ω–∏ –Ω–∞ —ç—Ç–æ.` : ''}–ü–∏—à–∏ —Å—Ä–∞–∑—É —Ç–µ–∫—Å—Ç, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.`;
}

function buildDailyPrompt(
  isoDate: string,
  astroHighlights: string[],
  weatherSummary?: string | null,
  cycleHint?: string | null,
  memoryEntries?: HoroscopeMemoryEntry[],
): string {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];
  const partnerName = partner?.name || '–ø–∞—Ä—Ç–Ω—ë—Ä';
  const date = new Date(isoDate);
  const formatter = new Intl.DateTimeFormat('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });
  const formattedDate = formatter.format(date);
  const memoryReminders = buildDailyMemoryReminders(memoryEntries);

  return `–°–æ—Å—Ç–∞–≤—å —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${user.name} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–∞—Ç–∞ –¥–ª—è —Ç–µ–±—è: ${formattedDate}, –Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—ë –Ω–µ –Ω–∞–∑—ã–≤–∞–π).

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- 2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞ –ø–æ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∂–¥—ã–π —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
- –°–∞—Ä–∫–∞–∑–º –∏ –º–∞—Ç –Ω–∞ –º–µ—Å—Ç–µ, –∫–∞–∫ —É –ª—É—á—à–µ–π –ø–æ–¥—Ä—É–≥–∏, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä–∞
- –§–æ–∫—É—Å: –¥–µ–ª–∞ –¥–Ω—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ${partnerName}, –±—ã—Ç–æ–≤–∞—è —Ä—É—Ç–∏–Ω–∞ –∏ —Ç–µ–ª–æ.
- –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—à—å ${partnerName} ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π –∏ –¥—Ä–∞–º.
${memoryReminders.length ? `${memoryReminders.join('\n')}\n` : ''}- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–∫—Ç—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º. –ù–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ "—Ç—Ä–∞–Ω–∑–∏—Ç" ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π —Å–º—ã—Å–ª.
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –Ω–µ–¥–µ–ª–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–æ —ç—Ç–æ—Ç –¥–µ–Ω—å
- –§–∏–Ω–∞–ª ‚Äî –∂—ë—Å—Ç–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –º—ã—Å–ª—å
${weatherSummary ? `- –ü–æ–≥–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å: ${weatherSummary}. –í–ø–ª–µ—Ç–∏ —ç—Ç–æ –≤ —Ç–µ–∫—Å—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –∏ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.` : ''}
${cycleHint ? `- –¶–∏–∫–ª: ${cycleHint}` : ''}

${astroHighlights.length ? `–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è —Ç–µ–±—è, –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∏—Ö –¥–æ—Å–ª–æ–≤–Ω–æ):
${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}
` : ''}${weatherSummary ? `–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–≥–æ–¥–µ: ${weatherSummary}. –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –µ—Ö–∏–¥–Ω—ã–π –∑–∞—Ö–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—è –ª–æ–∫–∞—Ü–∏—é.\n` : ''}${cycleHint ? `–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ü–∏–∫–ª—É: ${cycleHint}. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–± –ø–æ–¥–∫–æ–ª–æ—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å ${user.name}.\n` : ''}${memoryReminders.length ? `–≠—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ –ø–æ–≤—Ç–æ—Ä—ã —É—á—Ç–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π —è–≤–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–π —Å—é–∂–µ—Ç.` : ''}–ü–∏—à–∏ —Ü–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.`;
}

function buildSergeyDailyPrompt(
  isoDate: string,
  astroHighlights: string[],
  weatherSummary?: string | null,
  cycleHint?: string | null,
  memoryEntries?: HoroscopeMemoryEntry[],
): string {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];

  if (!partner) {
    throw new Error(`User ${user.id} has no relationship partners defined`);
  }

  const partnerName = partner.name;
  const date = new Date(isoDate);
  const formatter = new Intl.DateTimeFormat('ru-RU', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });
  const formattedDate = formatter.format(date);
  const memoryReminders = buildSergeyMemoryReminders(memoryEntries);

  return `–°–æ—Å—Ç–∞–≤—å –µ–¥–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä–æ ${partnerName} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–ª—è —Ç–µ–±—è –¥–∞—Ç–∞: ${formattedDate}, –Ω–æ –Ω–µ –ø–∏—à–∏ –µ—ë –≤ —Ç–µ–∫—Å—Ç–µ).

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–¥–∏–Ω —Ü–µ–ª—å–Ω—ã–π –∞–±–∑–∞—Ü –∏–∑ 3‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –Ω–∞—á–Ω–∏ –µ–≥–æ —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª–∞.
- –ü–∏—à–∏ –¥–ª—è ${user.name}, –ø—Ä–æ ${partnerName} –≤ –¢–†–ï–¢–¨–ï–ú –õ–ò–¶–ï: ¬´—É –Ω–µ–≥–æ¬ª, ¬´–µ–º—É¬ª, ¬´–µ–≥–æ¬ª, ¬´–æ–Ω¬ª. –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏–º—è ¬´${partnerName}¬ª –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.
- ${user.name} —É–ø–æ–º–∏–Ω–∞–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–≤–æ–¥, –ë–ï–ó —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ ¬´—Ç—ã –∂–µ, ${user.name}, –¥–µ—Ä–∂–∏—à—å—Å—è –º–æ–ª–æ–¥—Ü–æ–º¬ª. –ú–æ–∂–Ω–æ –≤–æ–æ–±—â–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å, –µ—Å–ª–∏ –≥–æ—Ä–æ—Å–∫–æ–ø —Ç–æ–ª—å–∫–æ –ø—Ä–æ –Ω–µ–≥–æ.
- –¢–æ–Ω: –∫–æ–ª–∫–∏–π, —Å –º–∞—Ç–æ–º –ø–æ –¥–µ–ª—É; –Ω–∏–∫–∞–∫–æ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–º–∞ –¥–ª—è ${partnerName}.
- –§–∏–Ω–∞–ª ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ-–∂—ë—Å—Ç–∫–∏–π, –±–µ–∑ –ª—É—á–∏–∫–∞ –Ω–∞–¥–µ–∂–¥—ã.
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ –¥–µ—Ç–µ–π ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${partnerName} –∏ –µ–≥–æ –±—ã—Ç–æ–≤—ã—Ö –º–∏—Å—Å–∏–π.
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –±–∞—Ä–¥–∞–∫: —É ${partnerName} –ø–æ—Ä—è–¥–æ–∫ –∏ —á–∏—Å—Ç–æ—Ç–∞, —à—É—Ç–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞—Ö (–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º, –∫–æ—Ñ–µ, –æ—Ñ–∏—Å, –≤–µ–ª–æ—Å–∏–ø–µ–¥, –∫–æ–Ω—Ç—Ä–æ–ª—å).
${memoryReminders.length ? `${memoryReminders.join('\n')}\n` : ''}${astroHighlights.length ? `- –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–∞–∫ —Ñ–æ–Ω (–≤–ø–ª–µ—Ç–∞–π —Å–º—ã—Å–ª, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ):
${astroHighlights.map((item, index) => `${index + 1}. ${item}`).join('\n')}
` : ''}${weatherSummary ? `- –£ –Ω–µ–≥–æ –Ω–∞ —É–ª–∏—Ü–µ ${weatherSummary}. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–º–µ–∫–Ω–∏ –Ω–∞ –ø–æ–≥–æ–¥–Ω—ã–π –≤–∞–π–± –±–µ–∑ —Ü–∏—Ñ—Ä –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.` : ''}${cycleHint ? `- ${cycleHint}` : ''}- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ markdown. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç.`;
}

function isLikelyTruncated(text: string): boolean {
  const trimmed = text.trim();
  if (!trimmed) {
    return true;
  }

  const endings = '.!?‚Ä¶';
  const closingQuotes = '¬ª"‚Äù\'';

  const lastChar = trimmed.slice(-1);
  if (closingQuotes.includes(lastChar)) {
    const beforeQuote = trimmed.slice(0, -1).trim().slice(-1);
    if (beforeQuote && endings.includes(beforeQuote)) {
      return false;
    }
  }

  if (!endings.includes(lastChar)) {
    return true;
  }

  const sentences = trimmed.split(/[.!?‚Ä¶]/).map(part => part.trim()).filter(Boolean);
  if (sentences.length === 0) {
    return true;
  }
  const lastSentence = sentences[sentences.length - 1];
  return lastSentence.length < 20;
}

interface HoroscopeRequestOptions {
  signal?: AbortSignal;
  claudeApiKey?: string;
  claudeProxyUrl?: string;
  openAIApiKey?: string;
}

async function requestHoroscopeText(
  prompt: string,
  options: HoroscopeRequestOptions,
  baseMaxTokens = 700,
  retryMaxTokens = 950,
  systemPrompt: string,
): Promise<{ text: string; provider: 'claude' | 'openai' }>
{
  const { callAI } = await import('./aiClient');

  const makeMessages = (content: string): AIMessage[] => [
    {
      role: 'user',
      content,
    },
  ];

  const baseRequest: AIRequestOptions = {
    system: systemPrompt,
    messages: makeMessages(prompt),
    temperature: 0.85,
    maxTokens: baseMaxTokens,
    signal: options.signal,
    claudeApiKey: options.claudeApiKey,
    claudeProxyUrl: options.claudeProxyUrl,
    openAIApiKey: options.openAIApiKey,
  };

  let result = await callAI(baseRequest);
  let text = result.text.trim();

  if (!text || isLikelyTruncated(text)) {
    console.warn('[Horoscope] First attempt looks truncated, requesting rewrite with more tokens.');
    try {
      const retryRequest: AIRequestOptions = {
        ...baseRequest,
        maxTokens: retryMaxTokens,
        messages: makeMessages(
          `${prompt}\n\n–ü–µ—Ä–µ–ø–∏—à–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω–æ–≤–æ. –ó–∞–≤–µ—Ä—à–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–π –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. –§–∏–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –º—ã—Å–ª—å—é.`,
        ),
      };
      const retryResult = await callAI(retryRequest);
      const retryText = retryResult.text.trim();
      if (retryText) {
        result = retryResult;
        text = retryText;
      }
    } catch (retryError) {
      console.warn('[Horoscope] Retry attempt failed:', retryError);
    }
  }

  if (!text) {
    throw new Error('AI returned empty horoscope text');
  }

  if (isLikelyTruncated(text)) {
    console.warn('[Horoscope] Horoscope still appears truncated after retry.');
  }

  return {
    text,
    provider: result.provider,
  };
}

export async function fetchDailyHoroscope(
  isoDate: string,
  signal?: AbortSignal,
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  cycles?: CycleData[],
  language = 'ru',
): Promise<DailyHoroscope> {
  try {
    const astroHighlights = buildAstroHighlights(isoDate);
    const weatherSummary = await fetchWeeklyWeatherSummary(isoDate, signal);
    const cycleHint = cycles ? buildWeeklyCycleHint(cycles, isoDate) : null;
    const prompt = buildWeeklyPrompt(isoDate, astroHighlights, weatherSummary, cycleHint);
    if (astroHighlights.length > 0) {
      console.log('[Horoscope] Astro highlights:', astroHighlights);
    }

    const result = await requestHoroscopeText(
      prompt,
      {
        signal,
        claudeApiKey,
        claudeProxyUrl,
        openAIApiKey,
      },
      700,  // baseMaxTokens
      950,  // retryMaxTokens
      buildHoroscopeSystemPrompt(),
    );

    console.log(`Generated weekly horoscope using ${result.provider}`);

    return {
      text: result.text,
      date: isoDate ?? null,
      provider: result.provider,
      weekRange: getWeekRange(isoDate),
      highlights: astroHighlights,
    };
  } catch (error) {
    console.error('Failed to generate AI horoscope:', error);
    return {
      text: getFallbackHoroscopeText('weekly', language),
      date: isoDate ?? null,
      provider: 'fallback',
      highlights: [],
    };
  }
}

function getFallbackHoroscopeText(type: 'weekly' | 'daily' | 'sergey', language = 'ru'): string {
  const userName = getCurrentUser().name;

  if (language === 'en') {
    if (type === 'weekly') {
      return `Today the horoscope hid behind the clouds, but ${userName} is sure: whatever happens, you'll handle it! üíñ`;
    }
    if (type === 'daily') {
      return `Today the stars are busy with their own affairs, but ${userName} is confident you'll survive this day! ‚ú®`;
    }
    // sergey
    return "ü§¶‚Äç‚ôÇÔ∏è The stars shrugged: he's carrying the household alone again, and there's not even a flicker of light at the end of the tunnel.";
  }

  if (language === 'de') {
    if (type === 'weekly') {
      return `Heute hat sich das Horoskop hinter den Wolken versteckt, aber ${userName} ist sicher: was auch passiert, du schaffst das! üíñ`;
    }
    if (type === 'daily') {
      return `Heute sind die Sterne mit ihren eigenen Angelegenheiten besch√§ftigt, aber ${userName} ist √ºberzeugt, dass du den Tag √ºberstehst! ‚ú®`;
    }
    // sergey
    return "ü§¶‚Äç‚ôÇÔ∏è Die Sterne zuckten mit den Schultern: er schleppt den Haushalt wieder alleine, und kein Licht am Ende des Tunnels blinkt auch nur.";
  }

  // Russian (default)
  if (type === 'weekly') {
    return `–°–µ–≥–æ–¥–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø —Å–ø—Ä—è—Ç–∞–ª—Å—è –∑–∞ –æ–±–ª–∞–∫–∞–º–∏, –Ω–æ ${userName} —É–≤–µ—Ä–µ–Ω–∞: —á—Ç–æ –±—ã –Ω–∏ —Å–ª—É—á–∏–ª–æ—Å—å, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üíñ`;
  }
  if (type === 'daily') {
    return `–°–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã –∑–∞–Ω—è—Ç—ã —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏, –Ω–æ ${userName} —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —Ç—ã –≤—ã–¥–µ—Ä–∂–∏—à—å —ç—Ç–æ—Ç –¥–µ–Ω—å! ‚ú®`;
  }
  // sergey
  return 'ü§¶‚Äç‚ôÇÔ∏è –ó–≤—ë–∑–¥—ã –ø–æ–∂–∞–ª–∏ –ø–ª–µ—á–∞–º–∏: –°–µ—Ä—ë–∂–∞ –æ–ø—è—Ç—å —Ç–∞—â–∏—Ç –±—ã—Ç –æ–¥–∏–Ω, –∏ –Ω–∏–∫–∞–∫–æ–π —Å–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Ç–æ–Ω–Ω–µ–ª—è –¥–∞–∂–µ –Ω–µ –º–∏–≥–∞–µ—Ç.';
}

function getFallbackLoadingMessages(language = 'ru'): HoroscopeLoadingMessage[] {
  if (language === 'en') {
    return [
      { emoji: '‚òéÔ∏è', text: "Calling Mars ‚Äî finding out who's in charge of your drive today." },
      { emoji: 'üíå', text: "Sending a letter through Venus ‚Äî checking how much tenderness is allocated for the day." },
      { emoji: 'üõ∞Ô∏è', text: "Catching connection with Jupiter ‚Äî seeing if luck will arrive unannounced." },
      { emoji: '‚òïÔ∏è', text: "Saturn is finishing coffee and writing today's obligations list." },
      { emoji: 'üßπ', text: "Pluto is tidying up the subconscious ‚Äî give it a couple minutes of chaos." },
      { emoji: 'üåï', text: "Moon is trying on moods ‚Äî picking the right level of drama for you." },
    ];
  }

  if (language === 'de') {
    return [
      { emoji: '‚òéÔ∏è', text: 'Rufen Mars an ‚Äî finden heraus, wer heute deinen Antrieb leitet.' },
      { emoji: 'üíå', text: 'Schicken Brief durch Venus ‚Äî pr√ºfen, wie viel Z√§rtlichkeit f√ºr den Tag vorgesehen ist.' },
      { emoji: 'üõ∞Ô∏è', text: 'Empfangen Verbindung mit Jupiter ‚Äî schauen, ob Gl√ºck unangek√ºndigt kommt.' },
      { emoji: '‚òïÔ∏è', text: 'Saturn trinkt Kaffee aus und schreibt die Pflichtenliste f√ºr heute.' },
      { emoji: 'üßπ', text: 'Pluto macht Aufr√§umen im Unterbewusstsein ‚Äî gib ihm ein paar Minuten Chaos.' },
      { emoji: 'üåï', text: 'Mond probiert Stimmungen an ‚Äî w√§hlt das richtige Drama-Level f√ºr dich.' },
    ];
  }

  // Russian (default)
  return [
    { emoji: '‚òéÔ∏è', text: '–ó–≤–æ–Ω–∏–º –ú–∞—Ä—Å—É ‚Äî –≤—ã—è—Å–Ω—è–µ–º, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ–¥—É–µ—Ç —Ç–≤–æ–∏–º –¥—Ä–∞–π–≤–æ–º.' },
    { emoji: 'üíå', text: '–ß–µ—Ä–µ–∑ –í–µ–Ω–µ—Ä—É —à–ª—ë–º –ø–∏—Å—å–º–æ ‚Äî —É—Ç–æ—á–Ω—è–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–æ –Ω–∞ –¥–µ–Ω—å.' },
    { emoji: 'üõ∞Ô∏è', text: '–°–≤—è–∑—å —Å –Æ–ø–∏—Ç–µ—Ä–æ–º –ª–æ–≤–∏–º ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–ª–µ—Ç–∏—Ç –ª–∏ —É–¥–∞—á–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.' },
    { emoji: '‚òïÔ∏è', text: '–°–∞—Ç—É—Ä–Ω –¥–æ–ø–∏–≤–∞–µ—Ç –∫–æ—Ñ–µ –∏ –ø–∏—à–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.' },
    { emoji: 'üßπ', text: '–ü–ª—É—Ç–æ–Ω –¥–µ–ª–∞–µ—Ç —É–±–æ—Ä–∫—É –≤ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–∏ ‚Äî –æ—Å—Ç–∞–≤—å –µ–º—É –ø–∞—Ä—É –º–∏–Ω—É—Ç —Ö–∞–æ—Å–∞.' },
    { emoji: 'üåï', text: '–õ—É–Ω–∞ –ø—Ä–∏–º–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞.' },
  ];
}

const FALLBACK_LOADING_MESSAGES: HoroscopeLoadingMessage[] = getFallbackLoadingMessages();

function buildLoadingMessagesPrompt(userName: string, language: string): { system: string; prompt: string } {
  if (language === 'en') {
    return {
      system: 'You create witty status messages for the loading screen. Respond strictly with a JSON array.',
      prompt: `Generate 6 funny status messages about the horoscope loading process. Each status should:
- start with one suitable emoji;
- be 8-14 words long;
- mention real planets or celestial bodies (Mars, Venus, Saturn, Pluto, Jupiter, Moon, Sun, etc.);
- sound like ${userName} is ironically explaining the process (e.g., "calling Mars", "waiting for Venus to reply");
- not repeat in meaning or tone;
- not use lists, quotes, or the word "status".

Return strictly a JSON array of objects like [{"emoji":"‚ú®","text":"..."}] without explanations.`,
    };
  }

  if (language === 'de') {
    return {
      system: 'Du erfindest witzige Statusnachrichten f√ºr den Ladebildschirm. Antworte strikt mit einem JSON-Array.',
      prompt: `Generiere 6 lustige Statusnachrichten √ºber den Horoskop-Ladevorgang. Jede Nachricht sollte:
- mit einem passenden Emoji beginnen;
- 8-14 W√∂rter lang sein;
- echte Planeten oder Himmelsk√∂rper erw√§hnen (Mars, Venus, Saturn, Pluto, Jupiter, Mond, Sonne usw.);
- klingen, als w√ºrde ${userName} ironisch den Prozess erkl√§ren (z.B. "Mars anrufen", "auf Antwort von Venus warten");
- sich in Bedeutung und Ton nicht wiederholen;
- keine Listen, Anf√ºhrungszeichen oder das Wort "Status" verwenden.

Gib strikt ein JSON-Array von Objekten zur√ºck wie [{"emoji":"‚ú®","text":"..."}] ohne Erkl√§rungen.`,
    };
  }

  // Russian (default)
  return {
    system: '–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –æ—Å—Ç—Ä–æ—É–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON-–º–∞—Å—Å–∏–≤–æ–º.',
    prompt: `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 6 —Å–º–µ—à–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –ö–∞–∂–¥—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω:
- –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏;
- –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 8-14 —Å–ª–æ–≤;
- —É–ø–æ–º–∏–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –∏–ª–∏ –Ω–µ–±–µ—Å–Ω—ã–µ —Ç–µ–ª–∞ (–ú–∞—Ä—Å, –í–µ–Ω–µ—Ä–∞, –°–∞—Ç—É—Ä–Ω, –ü–ª—É—Ç–æ–Ω, –Æ–ø–∏—Ç–µ—Ä, –õ—É–Ω–∞, –°–æ–ª–Ω—Ü–µ –∏ —Ç.–¥.);
- –∑–≤—É—á–∞—Ç—å —Ç–∞–∫, –±—É–¥—Ç–æ ${userName} –∏—Ä–æ–Ω–∏—á–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–≤–æ–Ω–∏–º –ú–∞—Ä—Å—É¬ª, ¬´–∂–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç –í–µ–Ω–µ—Ä—ã¬ª);
- –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –ø–æ —Å–º—ã—Å–ª—É –∏ —Ç–æ–Ω—É;
- –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏, –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ —Å–ª–æ–≤–æ ¬´—Å—Ç–∞—Ç—É—Å¬ª.

–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞ [{"emoji":"‚ú®","text":"..."}] –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`,
  };
}

export async function fetchHoroscopeLoadingMessages(
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  signal?: AbortSignal,
  language = 'ru',
): Promise<HoroscopeLoadingMessage[]> {
  const user = getCurrentUser();
  const { system, prompt } = buildLoadingMessagesPrompt(user.name, language);

  try {
    const { callAI } = await import('./aiClient');
    const response = await callAI({
      system,
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.95,
      maxTokens: 320,
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    });

    const cleaned = response.text.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim();
    const parsed = JSON.parse(cleaned) as HoroscopeLoadingMessage[];

    if (!Array.isArray(parsed) || parsed.length === 0) {
      throw new Error('Empty loading messages array');
    }

    return parsed
      .filter(entry => entry && typeof entry.emoji === 'string' && typeof entry.text === 'string')
      .map(entry => ({
        emoji: entry.emoji.trim(),
        text: entry.text.trim(),
      }))
      .filter(entry => entry.emoji && entry.text)
      .slice(0, 6);
  } catch (error) {
    console.warn('Failed to fetch custom loading messages, using fallback:', error);
    return getFallbackLoadingMessages(language);
  }
}

export async function fetchSergeyLoadingMessages(
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  signal?: AbortSignal,
): Promise<HoroscopeLoadingMessage[]> {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];
  const partnerName = partner?.name || '–ø–∞—Ä—Ç–Ω—ë—Ä';

  const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ${partnerName}.
–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ö–ê–ñ–î–û–ì–û —Å—Ç–∞—Ç—É—Å–∞:
- –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª–∞;
- –æ–¥–Ω–æ —ë–º–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (12‚Äì20 —Å–ª–æ–≤), –ë–ï–ó —Ç–æ—á–µ–∫ –≤–Ω—É—Ç—Ä–∏, –ë–ï–ó –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫;
- —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –Ω–∞–º–µ–∫–∞–µ—Ç, —á—Ç–æ ${partnerName} —Å–Ω–æ–≤–∞ –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º (—Å –æ—Ç—Å—ã–ª–∫–∞–º–∏ –∫ –ø–ª–∞–Ω–µ—Ç–∞–º, –∫–æ—Å–º–æ—Å—É, –Ω–µ–±–µ—Å–Ω–æ–π –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏);
- –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ª—ë–≥–∫–∏–π –º–∞—Ç —Ç–∏–ø–∞ ¬´–Ω–∞—Ö—Ä–µ–Ω–∞¬ª, –Ω–æ –∏–∑–±–µ–≥–∞–π –∂—ë—Å—Ç–∫–æ–π –±—Ä–∞–Ω–∏;
- –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è —Å–º—ã—Å–ª–æ–º –∏ –æ–±—Ä–∞–∑–∞–º–∏;
- –í–ê–ñ–ù–û: –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –ë–ï–ó –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, –≤—Å–µ –∫–∞–≤—ã—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON-–º–∞—Å—Å–∏–≤ –≤–∏–¥–∞ [{"emoji":"‚ú®","text":"..."}] –ë–ï–ó markdown, –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π, –ë–ï–ó –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ text.`;

  try {
    const { callAI } = await import('./aiClient');
    const response = await callAI({
      system: `–¢—ã —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å, –ø–æ—á–µ–º—É –≥–æ—Ä–æ—Å–∫–æ–ø ${partnerName} –µ—â—ë –≥—Ä—É–∑–∏—Ç—Å—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON.`,
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
      maxTokens: 600,
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    });

    let cleaned = response.text.replace(/```json\s*/gi, '').replace(/```\s*/g, '').trim();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±—Ä–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ JSON
    cleaned = cleaned.replace(/\n/g, ' ').replace(/\r/g, '');

    const parsed = JSON.parse(cleaned) as HoroscopeLoadingMessage[];

    if (!Array.isArray(parsed) || parsed.length === 0) {
      throw new Error('Empty Sergey loading messages array');
    }

    return parsed
      .filter(entry => entry && typeof entry.emoji === 'string' && typeof entry.text === 'string')
      .map(entry => ({
        emoji: entry.emoji.trim(),
        text: entry.text.replace(/\s+/g, ' ').trim(),
      }))
      .filter(entry => entry.emoji && entry.text)
      .slice(0, 10);
  } catch (error) {
    console.warn('Failed to fetch Sergey loading messages, using fallback:', error);
    return getSergeyLoadingFallback();
  }
}

export async function fetchDailyHoroscopeForDate(
  isoDate: string,
  signal?: AbortSignal,
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  cycles?: CycleData[],
  memory?: HoroscopeMemoryEntry[],
  language = 'ru',
): Promise<DailyHoroscope> {
  try {
    const astroHighlights = buildAstroHighlights(isoDate, 3);
    const weatherSummary = await fetchDailyWeatherSummary(isoDate, signal);
    const cycleHint = cycles ? buildDailyCycleHint(cycles, isoDate) : null;
    const prompt = buildDailyPrompt(isoDate, astroHighlights, weatherSummary, cycleHint, memory);
    if (astroHighlights.length > 0) {
      console.log('[Horoscope] Daily astro highlights:', astroHighlights);
    }

    const requestOptions: HoroscopeRequestOptions = {
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    };

    const result = await requestHoroscopeText(prompt, requestOptions, 600, 850, buildHoroscopeSystemPrompt());

    let memoryEntry: HoroscopeMemoryEntry | undefined;
    if (result.text) {
      const extracted = await extractHoroscopeMemoryEntry(result.text, isoDate, 'daily', requestOptions);
      if (extracted) {
        memoryEntry = extracted;
      }
    }

    console.log(`Generated daily horoscope using ${result.provider}`);

    return {
      text: result.text,
      date: isoDate ?? null,
      provider: result.provider,
      highlights: astroHighlights,
      memoryEntry,
    };
  } catch (error) {
    console.error('Failed to generate daily horoscope:', error);
    return {
      text: getFallbackHoroscopeText('daily', language),
      date: isoDate ?? null,
      provider: 'fallback',
      highlights: [],
    };
  }
}

export async function fetchSergeyDailyHoroscopeForDate(
  isoDate: string,
  signal?: AbortSignal,
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  cycles?: CycleData[],
  memory?: HoroscopeMemoryEntry[],
  language = 'ru',
): Promise<DailyHoroscope> {
  try {
    const user = getCurrentUser();
    const partner = user.relationshipPartners?.[0];
    const partnerName = partner?.name || '';

    const allHighlights = buildAstroHighlights(isoDate, 6);
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ö–∞–π–ª–∞–π—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
    const partnerSpecific = allHighlights.filter(entry => {
      const lowerEntry = entry.toLowerCase();
      const lowerPartnerName = partnerName.toLowerCase();
      return (
        lowerEntry.includes(lowerPartnerName) ||
        lowerEntry.includes('–æ—Ç–Ω–æ—à–µ–Ω–∏') ||
        lowerEntry.includes('–ø–∞—Ä—Ç–Ω–µ—Ä')
      );
    });
    const astroHighlights = partnerSpecific.length > 0 ? partnerSpecific : allHighlights.slice(0, 3);
    const rawWeatherSummary = await fetchDailyWeatherSummary(isoDate, signal);
    const weatherSummary = simplifyWeatherSummary(rawWeatherSummary);
    const cycleHint = cycles ? buildSergeyCycleHint(cycles, isoDate) : null;
    const prompt = buildSergeyDailyPrompt(isoDate, astroHighlights, weatherSummary, cycleHint, memory);

    const requestOptions: HoroscopeRequestOptions = {
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    };

    const result = await requestHoroscopeText(
      prompt,
      requestOptions,
      520,
      680,
      buildPartnerSystemPrompt(),
    );

    let memoryEntry: HoroscopeMemoryEntry | undefined;
    if (result.text) {
      const extracted = await extractHoroscopeMemoryEntry(result.text, isoDate, 'sergey', requestOptions);
      if (extracted) {
        memoryEntry = extracted;
      }
    }

    console.log(`Generated Sergey daily horoscope using ${result.provider}`);

    return {
      text: result.text,
      date: isoDate ?? null,
      provider: result.provider,
      highlights: astroHighlights,
      memoryEntry,
    };
  } catch (error) {
    console.error('Failed to generate Sergey daily horoscope:', error);
    return {
      text: getFallbackHoroscopeText('sergey', language),
      date: isoDate ?? null,
      provider: 'fallback',
      highlights: [],
    };
  }
}

function buildSergeyBannerSystemPrompt(): string {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];
  const partnerName = partner?.name || '–ø–∞—Ä—Ç–Ω—ë—Ä';

  return `–¢—ã ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä—à–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç ${user.name} —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ ${partnerName}. –û—Ç–≤–µ—á–∞–π –ª–µ–≥–∫–æ, –ø–æ-—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏ –±–µ–∑ –ø–∞—Ñ–æ—Å–∞.`;
}

function buildSergeyBannerPrompt(
  isoDate: string,
  memoryEntries?: HoroscopeMemoryEntry[],
): string {
  const user = getCurrentUser();
  const partner = user.relationshipPartners?.[0];
  const partnerName = partner?.name || '–ø–∞—Ä—Ç–Ω—ë—Ä';
  const parsedDate = new Date(isoDate);
  const formattedDate = Number.isNaN(parsedDate.getTime())
    ? '—Å–µ–≥–æ–¥–Ω—è'
    : new Intl.DateTimeFormat('ru-RU', {
        day: 'numeric',
        month: 'long',
      }).format(parsedDate);

  const memoryReminders = buildSergeyMemoryReminders(memoryEntries);
  const remindersSection = memoryReminders.length
    ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–æ–Ω—É –∏ —Ç–µ–º–∞–º:\n${memoryReminders.join('\n')}\n`
    : '';

  return `–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ ¬´–ß—Ç–æ —Ç–∞–º —É ${partnerName}?¬ª –Ω–∞ ${formattedDate}.

–î–∞–π —á–µ—Ç—ã—Ä–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã —Å —Ç–µ–º –∂–µ —Å–º—ã—Å–ª–æ–º, –Ω–æ –≤ –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞—Ö:
- title ‚Äî –≤–æ–ø—Ä–æ—Å –Ω–∞ 4-7 —Å–ª–æ–≤ —Å –∏–Ω—Ç—Ä–∏–≥–æ–π –≤—Ä–æ–¥–µ ¬´–ê —á—Ç–æ —Ç–∞–º —É ${partnerName}?¬ª (–æ—Å—Ç–∞–≤—å –∏–º—è ${partnerName} –≤ –ª—é–±–æ–º –ø–∞–¥–µ–∂–µ).
- subtitle ‚Äî –æ–¥–Ω–æ –ø–ª–æ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ 22 —Å–ª–æ–≤) —Å –ª—ë–≥–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º –ø—Ä–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å; –ë–ï–ó –∫–ª–∏—à–µ —Ç–∏–ø–∞ ¬´—Å–Ω–æ–≤–∞ –º—É—Ç–∏—Ç¬ª, ¬´–æ–ø—è—Ç—å –∑–∞—Ç–µ–≤–∞–µ—Ç¬ª, ¬´–≥–æ—Ä–æ—Å–∫–æ–ø –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂–µ—Ç¬ª, ¬´—É–∑–Ω–∞–µ–º –ø—Ä–∞–≤–¥—É¬ª. –ü—Ä–∏–¥—É–º–∞–π —Å–≤–µ–∂—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø—Ä–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É –Ω–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –æ–Ω –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å...¬ª, ¬´–£ –Ω–µ–≥–æ —Ç–∞–∫–æ–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞...¬ª, ¬´–ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ, —á—Ç–æ –ø–ª–∞–Ω—ã...¬ª).
- primaryButton ‚Äî 2-3 —Å–ª–æ–≤–∞, –ø—Ä–∏–∑—ã–≤ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –≥–æ—Ä–æ—Å–∫–æ–ø.
- secondaryButton ‚Äî 1-2 —Å–ª–æ–≤–∞, –∏–≥—Ä–∞—é—â–∞—è –æ—Ç–º–∞–∑–∫–∞ –≤ –¥—É—Ö–µ ¬´–ú–Ω–µ –ø–æ—Ñ–∏–≥¬ª.

–ü—Ä–∞–≤–∏–ª–∞:
- –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ –ª—ë–≥–∫–∏–π —Å–∞—Ä–∫–∞–∑–º, –Ω–æ –±–µ–∑ –º–∞—Ç–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π.
- –ù–∏–∫–∞–∫–∏—Ö —ç–º–æ–¥–∑–∏ –∏ –∫–∞–≤—ã—á–µ–∫.
- –ü–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –±–µ–∑ —Ç–æ—á–∫–∏ –Ω–∞ –∫–æ–Ω—Ü–µ.
- –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –Ω–æ –ë–ï–ó –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —à–∞–±–ª–æ–Ω–æ–≤.
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä—è–º–æ ${user.name} –∏ –Ω–µ –æ–±—Ä–∞—â–∞–π—Å—è –∫ —á–∏—Ç–∞—Ç–µ–ª—å–Ω–∏—Ü–µ –Ω–∞ ¬´—Ç—ã¬ª ‚Äî –¥–µ–ª–∞–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–º–∏ (¬´–ö–∞–∂–µ—Ç—Å—è, ${partnerName}‚Ä¶¬ª, ¬´–ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ, —á—Ç–æ‚Ä¶¬ª).
${remindersSection}–í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{"title":"...","subtitle":"...","primaryButton":"...","secondaryButton":"..."}
`;
}

export async function fetchSergeyBannerCopy(
  isoDate: string,
  signal?: AbortSignal,
  claudeApiKey?: string,
  claudeProxyUrl?: string,
  openAIApiKey?: string,
  memory?: HoroscopeMemoryEntry[],
): Promise<SergeyBannerCopy> {
  const prompt = buildSergeyBannerPrompt(isoDate, memory);

  try {
    const { callAI } = await import('./aiClient');
    const response = await callAI({
      system: buildSergeyBannerSystemPrompt(),
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.75,
      maxTokens: 220,
      signal,
      claudeApiKey,
      claudeProxyUrl,
      openAIApiKey,
    });

    const cleaned = response.text.replace(/```json\s*/gi, '').replace(/```\s*/g, '').trim();
    const parsed = JSON.parse(cleaned) as Partial<SergeyBannerCopy>;

    const normalize = (value: unknown): string =>
      typeof value === 'string' ? value.replace(/\s+/g, ' ').trim() : '';

    const result: SergeyBannerCopy = {
      title: normalize(parsed.title),
      subtitle: normalize(parsed.subtitle),
      primaryButton: normalize(parsed.primaryButton),
      secondaryButton: normalize(parsed.secondaryButton),
    };

    if (!result.title || !result.subtitle || !result.primaryButton || !result.secondaryButton) {
      throw new Error('Sergey banner copy is incomplete');
    }

    console.log('[Horoscope] Generated Sergey banner copy using', response.provider);
    return result;
  } catch (error) {
    console.error('Failed to fetch Sergey banner copy:', error);
    throw error instanceof Error ? error : new Error(String(error));
  }
}

async function extractHoroscopeMemoryEntry(
  text: string,
  isoDate: string,
  source: HoroscopeMemoryEntry['source'],
  options: HoroscopeRequestOptions,
): Promise<HoroscopeMemoryEntry | null> {
  if (!text.trim()) {
    return null;
  }

  try {
    const { callAI } = await import('./aiClient');
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø (–∏—Å—Ç–æ—á–Ω–∏–∫: ${source}) –∏ –∫—Ä–∞—Ç–∫–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π, –æ —á—ë–º –æ–Ω.

–¢–µ–∫—Å—Ç:
"""
${text}
"""

–í–µ—Ä–Ω–∏ JSON –≤–∏–¥–∞ {
  "summary": "–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–±—ä—è—Å–Ω—è—é—â–µ–µ –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç/—Å—é–∂–µ—Ç",
  "keyThemes": ["2-4 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º—ã –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏"],
  "avoidPhrases": ["1-3 –≤–Ω—è—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–æ—Å–ª–æ–≤–Ω–æ –∑–∞–≤—Ç—Ä–∞"],
  "tone": "positive | neutral | negative | mixed"
}

–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ JSON.`;

    const response = await callAI({
      system: '–¢—ã –≤—ã–¥–µ–ª—è–µ—à—å –∑–∞–º–µ—Ç–∫–∏ –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–æ–º.',
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.2,
      maxTokens: 320,
      signal: options.signal,
      claudeApiKey: options.claudeApiKey,
      claudeProxyUrl: options.claudeProxyUrl,
      openAIApiKey: options.openAIApiKey,
    });

    const cleaned = response.text.replace(/```json\s*/gi, '').replace(/```\s*/g, '').trim();
    const parsed = JSON.parse(cleaned) as {
      summary?: unknown;
      keyThemes?: unknown;
      avoidPhrases?: unknown;
      tone?: unknown;
    };

    const summary =
      typeof parsed.summary === 'string' && parsed.summary.trim().length > 0
        ? parsed.summary.trim()
        : '';
    if (!summary) {
      return null;
    }

    const keyThemes = Array.isArray(parsed.keyThemes)
      ? parsed.keyThemes
          .filter((item): item is string => typeof item === 'string' && item.trim().length > 0)
          .slice(0, 4)
          .map(item => item.trim())
      : [];

    const avoidPhrases = Array.isArray(parsed.avoidPhrases)
      ? parsed.avoidPhrases
          .filter((item): item is string => typeof item === 'string' && item.trim().length > 0)
          .slice(0, 3)
          .map(item => item.trim())
      : [];

    const tone =
      parsed.tone === 'positive' ||
      parsed.tone === 'neutral' ||
      parsed.tone === 'negative' ||
      parsed.tone === 'mixed'
        ? parsed.tone
        : 'mixed';

    const entry: HoroscopeMemoryEntry = {
      id: `${source}-${isoDate}`,
      source,
      date: isoDate,
      summary,
      keyThemes,
      avoidPhrases,
      tone,
      createdAt: new Date().toISOString(),
    };

    return entry;
  } catch (error) {
    console.warn('Failed to extract horoscope memory entry:', error);
    return null;
  }
}

export function mergeHoroscopeMemoryEntries(
  existing: HoroscopeMemoryEntry[],
  next: HoroscopeMemoryEntry,
  maxEntries = MAX_MEMORY_KEEP,
): HoroscopeMemoryEntry[] {
  const deduped = existing.filter(
    entry => !(entry.source === next.source && entry.date === next.date),
  );

  const merged = [...deduped, next].sort(
    (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),
  );

  if (merged.length > maxEntries) {
    return merged.slice(merged.length - maxEntries);
  }

  return merged;
}
