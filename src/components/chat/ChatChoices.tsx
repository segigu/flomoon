import React from 'react';
import { motion } from 'framer-motion';
import type { HistoryStoryOption } from '../../utils/historyStory';
import styles from '../NastiaApp.module.css';

export type CustomOptionStatus =
  | 'idle'
  | 'recording'
  | 'transcribing'
  | 'generating'
  | 'ready'
  | 'error';

interface ChatChoicesProps {
  /**
   * –°–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ (AI-generated).
   */
  options: HistoryStoryOption[];
  /**
   * Callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±—ã—á–Ω–æ–π –æ–ø—Ü–∏–∏.
   */
  onOptionSelect: (option: HistoryStoryOption) => void;
  /**
   * Callback –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç".
   */
  onCustomOptionClick: () => void;
  /**
   * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç".
   */
  customOptionStatus?: CustomOptionStatus;
  /**
   * –ì–æ—Ç–æ–≤–∞—è –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ–ø—Ü–∏—è (–∫–æ–≥–¥–∞ status === 'ready').
   */
  customOption?: HistoryStoryOption;
  /**
   * –£—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏ (0-1).
   */
  recordingLevel?: number;
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –∫–Ω–æ–ø–æ–∫ (–¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è).
   */
  visibleCount?: number;
  /**
   * –§–ª–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ fadeOut).
   */
  hiding?: boolean;
  /**
   * –§–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ (–∫–æ–≥–¥–∞ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞).
   */
  disabled?: boolean;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
 */
export const ChatChoices: React.FC<ChatChoicesProps> = ({
  options,
  onOptionSelect,
  onCustomOptionClick,
  customOptionStatus = 'idle',
  customOption,
  recordingLevel = 0,
  visibleCount = 0,
  hiding = false,
  disabled = false,
}) => {
  const showCustomOption = options.length > 0;
  const isCustomProcessing = customOptionStatus === 'transcribing' || customOptionStatus === 'generating';
  const showLiveRecordingDot = customOptionStatus === 'recording';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  const getCustomButtonClass = (): string => {
    const baseClass = styles.historyCustomButton;
    switch (customOptionStatus) {
      case 'recording':
        return `${baseClass} ${styles.historyCustomButtonRecording}`;
      case 'transcribing':
      case 'generating':
        return `${baseClass} ${styles.historyCustomButtonProcessing}`;
      case 'ready':
        return `${baseClass} ${styles.historyCustomButtonReady}`;
      case 'error':
        return `${baseClass} ${styles.historyCustomButtonError}`;
      default:
        return `${baseClass} ${styles.historyCustomButtonIdle}`;
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  const getCustomButtonContent = () => {
    switch (customOptionStatus) {
      case 'recording':
        return {
          title: '–ì–æ–≤–æ—Ä–∏...',
          description: '–ù–∞–∂–º–∏ –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
          icon: 'üéôÔ∏è',
        };
      case 'transcribing':
        return {
          title: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...',
          description: '–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∞—É–¥–∏–æ',
          icon: '‚è≥',
        };
      case 'generating':
        return {
          title: '–§–æ—Ä–º—É–ª–∏—Ä—É—é...',
          description: '–°–æ–∑–¥–∞—ë–º –≤–∞—Ä–∏–∞–Ω—Ç',
          icon: '‚ú®',
        };
      case 'ready':
        return {
          title: customOption?.title ?? '–ì–æ—Ç–æ–≤–æ!',
          description: customOption?.description ?? '–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å',
          icon: '‚úì',
        };
      case 'error':
        return {
          title: '–û—à–∏–±–∫–∞',
          description: '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑',
          icon: '‚ö†Ô∏è',
        };
      default:
        return {
          title: '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç',
          description: '–°–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ',
          icon: 'üéôÔ∏è',
        };
    }
  };

  const customContent = getCustomButtonContent();
  const customButtonClass = getCustomButtonClass();

  return (
    <div className={`${styles.historyChatReplies} ${hiding ? styles.historyChatRepliesHiding : ''}`}>
      {/* AI-generated –æ–ø—Ü–∏–∏ */}
      {options.map((option, index) => {
        const accentClass = index === 0 ? styles.historyChatReplyPrimary : styles.historyChatReplyAlt;
        const isVisible = index < visibleCount;

        return (
          <div
            key={option.id}
            className={`${styles.historyChatReplyItem} ${isVisible ? styles.visible : ''}`}
          >
            <button
              type="button"
              className={`${styles.historyChatReplyButton} ${accentClass}`}
              onClick={() => onOptionSelect(option)}
              disabled={disabled}
            >
              <span className={styles.historyChatReplyTitle}>{option.title}</span>
              <span className={styles.historyChatReplyDescription}>{option.description}</span>
            </button>
          </div>
        );
      })}

      {/* –ö–Ω–æ–ø–∫–∞ "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" */}
      {showCustomOption && (
        <div
          key="custom-history-option"
          className={`${styles.historyChatReplyItem} ${visibleCount > options.length ? styles.visible : ''}`}
        >
          <motion.button
            type="button"
            className={customButtonClass}
            onClick={onCustomOptionClick}
            disabled={disabled || isCustomProcessing}
            aria-label={customContent.title}
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.2 }}
          >
            <div className={styles.historyCustomButtonLayout}>
              <div className={styles.historyCustomButtonTexts}>
                <span className={`${styles.historyChatReplyTitle} ${styles.historyCustomTitle}`}>
                  {showLiveRecordingDot && (
                    <span className={styles.historyCustomLiveDot} aria-hidden="true" />
                  )}
                  {customContent.title}
                </span>
                <span className={`${styles.historyChatReplyDescription} ${styles.historyCustomDescription}`}>
                  {customContent.description}
                </span>
              </div>
              {/* –ò–∫–æ–Ω–∫–∞ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è recording) */}
              {customContent.icon && customOptionStatus === 'recording' ? (
                <div className={styles.historyCustomRecordingPulseWrapper}>
                  <div
                    className={`${styles.historyCustomRecordingPulse} ${styles.historyCustomRecordingPulse1}`}
                    style={{
                      transform: `scale(${1 + recordingLevel * 1.2})`,
                      opacity: 0.3 + recordingLevel * 0.4,
                      transition: 'transform 0.2s ease-out, opacity 0.2s ease-out',
                    }}
                  />
                  <div
                    className={`${styles.historyCustomRecordingPulse} ${styles.historyCustomRecordingPulse2}`}
                    style={{
                      transform: `scale(${1 + recordingLevel * 1.8})`,
                      opacity: 0.2 + recordingLevel * 0.3,
                      transition: 'transform 0.25s ease-out, opacity 0.25s ease-out',
                    }}
                  />
                  <div
                    className={`${styles.historyCustomIconCircle} ${styles.historyCustomIconRecording}`}
                    style={{
                      transform: `scale(${1 + recordingLevel * 0.15})`,
                      transition: 'transform 0.2s ease-out',
                    }}
                  >
                    <span className={styles.historyCustomIconEmoji}>{customContent.icon}</span>
                  </div>
                </div>
              ) : customContent.icon ? (
                <div
                  className={`${styles.historyCustomIconCircle} ${
                    customOptionStatus === 'ready'
                      ? styles.historyCustomIconReady
                      : customOptionStatus === 'error'
                        ? styles.historyCustomIconError
                        : customOptionStatus === 'transcribing' || customOptionStatus === 'generating'
                          ? styles.historyCustomIconProcessing
                          : styles.historyCustomIconIdle
                  }`}
                >
                  <span className={styles.historyCustomIconEmoji}>{customContent.icon}</span>
                </div>
              ) : null}
            </div>
          </motion.button>
        </div>
      )}
    </div>
  );
};
