#!/usr/bin/env node

const webpush = require('web-push');

const fetch = (...args) => {
  if (typeof globalThis.fetch === 'function') {
    return globalThis.fetch(...args);
  }
  return import('node-fetch').then(({ default: fetchModule }) => fetchModule(...args));
};

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const VAPID_PUBLIC_KEY = process.env.VAPID_PUBLIC_KEY;
const VAPID_PRIVATE_KEY = process.env.VAPID_PRIVATE_KEY;
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY || '';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || '';
const CLAUDE_MODEL = 'claude-haiku-4-5';
const OPENAI_MODEL = 'gpt-4o-mini';

const CONFIG_FILE = 'nastia-config.json';
const PREVIEW_MODE = process.argv.includes('--preview-morning-brief');
const APP_BASE_URL = process.env.APP_BASE_URL || 'https://segigu.github.io/nastia-calendar/';
const MORNING_BRIEF_URL = new URL('?open=daily-horoscope', APP_BASE_URL).toString();

const MS_IN_DAY = 24 * 60 * 60 * 1000;
const MOSCOW_TZ = 'Europe/Moscow';
const BERLIN_TZ = 'Europe/Berlin';
const NOTIFICATION_START_HOUR = 7;
const NOTIFICATION_END_HOUR = 21;
const NOTIFICATION_SLOT_MINUTES = 5;
const DEFAULT_MORNING_BRIEF_MINUTES = 6 * 60 + 45; // 06:45 Berlin time
const MIN_NOTIFICATION_MINUTES = NOTIFICATION_START_HOUR * 60;
const MAX_NOTIFICATION_MINUTES = NOTIFICATION_END_HOUR * 60 + (60 - NOTIFICATION_SLOT_MINUTES);
const NASTIA_BIRTH_YEAR = 1992;
const NASTIA_BIRTH_MONTH = 3; // April (0-indexed)
const NASTIA_BIRTH_DAY = 12;

if (!GITHUB_TOKEN && !PREVIEW_MODE) {
  console.error('Missing GITHUB_TOKEN');
  process.exit(1);
}

if (!VAPID_PUBLIC_KEY || !VAPID_PRIVATE_KEY) {
  if (!PREVIEW_MODE) {
    console.error('Missing VAPID keys');
    process.exit(1);
  }
}

if (!PREVIEW_MODE) {
  webpush.setVapidDetails(
    'mailto:noreply@nastia-calendar.com',
    VAPID_PUBLIC_KEY,
    VAPID_PRIVATE_KEY
  );
}

const responseSchema = {
  name: 'push_notification',
  schema: {
    type: 'object',
    additionalProperties: false,
    required: ['title', 'body'],
    properties: {
      title: {
        type: 'string',
        description: '–ò–º—è –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≤ 1-3 —Å–ª–æ–≤–∞—Ö (—Ç–æ–ª—å–∫–æ –∏–º—è/—Ñ–∞–º–∏–ª–∏—è/–æ—Ç—á–µ—Å—Ç–≤–æ), –±–µ–∑ —ç–º–æ–¥–∑–∏. –ó–ê–ü–†–ï–©–ï–ù–´ –∏–º–µ–Ω–∞: –ò–≥–æ—Ä—å, –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω, –°—Ç–∞—Å.',
        maxLength: 40,
        pattern: '^(?![–ù–Ω]–∞—Å—Ç)(?![–Ω–ù]–∞—Å—Ç)[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë-]*(?:\\s[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë-]*){0,2}$',
      },
      body: {
        type: 'string',
        description: 'Push body –ú–ê–ö–°–ò–ú–£–ú 60 —Å–∏–º–≤–æ–ª–æ–≤ —Å 1-2 —ç–º–æ–¥–∑–∏ –∏ –µ–¥–∫–∏–º —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º –ø–∏–Ω–∫–æ–º.',
        maxLength: 60,
      },
    },
  },
};

const fallbackMessages = {
  fertile_window: {
    title: '–õ—é–¥–º–∏–ª–∞ –§–µ—Ä—Ç–∏–ª—å–Ω–∞—è',
    body: '–ù–∞—Å—Ç—é—à, –∑–æ–Ω–∞ —Ä–∏—Å–∫–∞, –±–µ–∑ –∑–∞—â–∏—Ç—ã –Ω–∏ —à–∞–≥—É! üíã',
  },
  ovulation_day: {
    title: '–§—ë–¥–æ—Ä –ü–ª–æ–¥–æ–≤–∏—Ç—ã–π',
    body: '–ù–∞—Å—Ç—ë–Ω–∞, —Å–µ–≥–æ–¥–Ω—è –æ–≤—É–ª—è—Ü–∏—è ‚Äî –ø—Ä–∏–∫—Ä—ã–≤–∞–π—Å—è! üî•',
  },
  period_forecast: {
    title: '–ó–æ—è –ü–ú–°–æ–≤–∞',
    body: '–ù–∞—Å—Ç—é—Ö, –ø–∞—Ä–∞ –¥–Ω–µ–π –¥–æ —à—Ç–æ—Ä–º–∞, –∑–∞–ø–∞—Å–∞–π—Å—è! üôÑ',
  },
  period_start: {
    title: '–ú–∞—Ä—Ñ–∞ –ö—Ä–æ–≤—è–∫–æ–≤–∞',
    body: '–ù–∞—Å—Ç—ë–Ω–∞, –ø–æ—Ç–æ–∫ –Ω–∞—á–∞–ª—Å—è, –≥—Ä–µ–ª–∫—É –≤ –∑—É–±—ã! ü©∏',
  },
  period_check: {
    title: '–í–µ—Ä–æ–Ω–∏–∫–∞ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è',
    body: '–ù–∞—Å—Ç—é—Ö, –¥–µ–Ω—å –• ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Å—è –∏ –æ—Ç–º–µ—Ç—å! üëÄ',
  },
  period_waiting: {
    title: '–ì–ª–∞—à–∞ –¢–µ—Ä–ø–µ–ª–∏–≤–∞—è',
    body: '–ù–∞—Å—Ç—ë–Ω–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Äî –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ! ü§î',
  },
  period_delay_warning: {
    title: '–†–∏–º–º–∞ –¢—Ä–µ–≤–æ–∂–Ω–∞—è',
    body: '–ù–∞—Å—Ç—é—à, —Ç—è–Ω–µ—Ç –¥–æ–ª–≥–æ ‚Äî –º–æ–∂–µ—Ç, —Ç–µ—Å—Ç? üò¨',
  },
  period_confirmed_day0: {
    title: '–¢–∞–º–∞—Ä–∞ –ü–ª–µ–¥–æ–≤–∞—è',
    body: '–ù–∞—Å—Ç—ë–Ω–∞, —Å—Ç–∞—Ä—Ç! –ü–ª–µ–¥, –≥—Ä–µ–ª–∫–∞, –º–∏–Ω–∏–º—É–º –ø–æ–¥–≤–∏–≥–æ–≤. üõãÔ∏è',
  },
  period_confirmed_day1: {
    title: '–°–æ–Ω—è –ì—Ä–µ–ª–æ—á–Ω–∏–∫–æ–≤–∞',
    body: '–ù–∞—Å—Ç—é—à, –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å ‚Äî –≥—Ä–µ–ª–∫—É –∫ –ø—É–∑–∏–∫—É! üî•',
  },
  period_confirmed_day2: {
    title: '–ò–Ω–≥–∞ –ñ–µ–ª–µ–∑–∏—Å—Ç–∞—è',
    body: '–ù–∞—Å—Ç—ë–Ω–∞, —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å, –ø–µ–π –≤–æ–¥—É, –±–µ—Ä–µ–≥–∏ –Ω–µ—Ä–≤—ã! üí™',
  },
  birthday: {
    title: '–ì–∞–ª—è –ò–º–µ–Ω–∏–Ω–Ω–∏—Ü–∞',
    body: '–ù–∞—Å—Ç—é—à, —Å –¥–Ω—é—Ö–æ–π! –ü—Ä–∞–∑–¥–Ω–∏–∫ –±–µ–∑ –¥—Ä–∞–º—ã! üéâüíú',
  },
  morning_brief: {
    title: '–ó–≤—ë–∑–¥–Ω—ã–π –ø–∏–Ω–æ–∫',
    body: '–ù–∞—Å—Ç—è, –ú–∞—Ä—Å —Ä—ã—á–∏—Ç ‚Äî –≤—Å—Ç–∞–≤–∞–π –∏ –¥–µ—Ä–∂–∏ –æ–±–æ—Ä–æ–Ω—É! üí•',
    url: MORNING_BRIEF_URL,
  },
};

const NOTIFICATIONS_URL = new URL('?open=notifications', APP_BASE_URL).toString();
const FORCE_MORNING_BRIEF = process.env.FORCE_MORNING_BRIEF === '1';

const TITLE_REGEX = /^(?![–ù–Ω]–∞—Å—Ç)[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë-]*(?:\s[–ê-–Ø–Å][–ê-–Ø–Å–∞-—è—ë-]*){0,2}$/;
const EMOJI_REGEX = /[\u{1F300}-\u{1FAFF}\u{1F004}-\u{1F9FF}]/u;
const FORBIDDEN_NAMES = ['–∏–≥–æ—Ä—å', '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '—Å—Ç–∞—Å'];

function truncateWithEllipsis(text, limit = 60) {
  const trimmed = (text || '').trim();
  if (trimmed.length <= limit) {
    return trimmed;
  }
  return `${trimmed.slice(0, Math.max(0, limit - 1)).trim()}‚Ä¶`;
}

function isValidPersonaTitle(value) {
  if (!value) {
    return false;
  }
  const trimmed = value.trim();
  if (!TITLE_REGEX.test(trimmed)) {
    return false;
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∏–º–µ–Ω–∏ –Ω–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –∏–º—ë–Ω
  const lowerValue = trimmed.toLowerCase();
  for (const forbidden of FORBIDDEN_NAMES) {
    if (lowerValue.includes(forbidden)) {
      return false;
    }
  }
  return true;
}

function ensureEmojiPresent(text) {
  if (!text) {
    return '–ù–∞—Å—Ç—é—à, –¥–µ—Ä–∂–∏ –∑–∞—â–∏—Ç—É. üõ°Ô∏è';
  }
  const truncated = truncateWithEllipsis(text);
  if (EMOJI_REGEX.test(truncated)) {
    return truncated;
  }
  return truncateWithEllipsis(`${truncated} üõ°Ô∏è`);
}

async function generateDailyHoroscopeNarrative(context) {
  const prompt = `–°–æ—Å—Ç–∞–≤—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –ù–∞—Å—Ç–∏.
–î–∞—Ç–∞ –¥–ª—è —Ç–µ–±—è: ${context.todayHuman}. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –¥–∞—Ç—É —è–≤–Ω–æ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- 2 –∞–±–∑–∞—Ü–∞ –ø–æ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∂–¥—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —ç–º–æ–¥–∑–∏.
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –ù–∞—Å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é (–ù–∞—Å—Ç—è, –ù–∞—Å—Ç—é—à, –ù–∞—Å—Ç—ë–Ω–∞ –∏ —Ç.–ø.).
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–ø–ª–µ—Ç–∏ –ø–ª–∞–Ω–µ—Ç—ã (–ú–∞—Ä—Å, –í–µ–Ω–µ—Ä–∞, –°–∞—Ç—É—Ä–Ω, –Æ–ø–∏—Ç–µ—Ä, –õ—É–Ω–∞, –°–æ–ª–Ω—Ü–µ) –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å.
- –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –±—ã—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –¥–µ—Ç–µ–π, –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –°–µ—Ä—ë–∂–µ–π, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —ç–∫–∑–∞–º–µ–Ω—É, –∂–∏–∑–Ω—å –≤ –ì–µ—Ä–º–∞–Ω–∏–∏.
- –ò—Å–ø–æ–ª—å–∑—É–π —á—ë—Ä–Ω—ã–π —é–º–æ—Ä, –¥–æ–ø—É—Å—Ç–∏–º —É–º–µ—Ä–µ–Ω–Ω—ã–π –º–∞—Ç.
- –§–∏–Ω–∞–ª ‚Äî –∂—ë—Å—Ç–∫–∏–π, –Ω–æ –æ–±–Ω–∞–¥—ë–∂–∏–≤–∞—é—â–∏–π.

–í–µ—Ä–Ω–∏ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;

  const systemPrompt = '–¢—ã –ù–∞—Å—Ç—è ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –æ—Å—Ç—Ä–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ. –ù–∏–∫–∞–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫—Ä–æ–º–µ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.';

  const raw = await callAIWithFallback(prompt, systemPrompt);
  return raw.trim();
}

async function generateMorningBriefFromNarrative(narrative, context) {
  const prompt = `–í–æ—Ç –¥–Ω–µ–≤–Ω–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –ù–∞—Å—Ç–∏:
"""
${narrative}
"""

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–π push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Ç—Ä–æ–º –≤ 06:45 –ø–æ –ë–µ—Ä–ª–∏–Ω—É.
–§–æ—Ä–º–∞—Ç JSON:
{
  "title": "—Ñ—Ä–∞–∑–∞ –∏–∑ 2-3 —Å–ª–æ–≤, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –≥–ª–∞–≤–Ω—ã–π –≤–∞–π–± –¥–Ω—è",
  "body": "–∂—ë—Å—Ç–∫–∞—è —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –°–¢–†–û–ì–û –¥–æ 55 —Å–∏–º–≤–æ–ª–æ–≤ —Å 1-2 —ç–º–æ–¥–∑–∏"
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü—Ä–æ—á–∏—Ç–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏ –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ –Ω–∞ –ü–†–û–°–¢–û–ô –ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ô —è–∑—ã–∫. –ß—Ç–æ –†–ï–ê–õ–¨–ù–û –∂–¥—ë—Ç –ù–∞—Å—Ç—é —Å–µ–≥–æ–¥–Ω—è?
   - –ù–ï –Ω–∞–¥–æ: "–ú–∞—Ä—Å –ø—Ä–æ—Ç–∏–≤ –°–∞—Ç—É—Ä–Ω–∞", "–í–µ–Ω–µ—Ä–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ"
   - –ù–ê–î–û: —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –∂–∏–∑–Ω–∏? –ù–∞–ø—Ä–∏–º–µ—Ä:
     * –ú–∞—Ä—Å vs –°–∞—Ç—É—Ä–Ω ‚Üí "–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –Ω–∞–ø—Ä—è–≥ –≤–µ—Å—å –¥–µ–Ω—å"
     * –í–µ–Ω–µ—Ä–∞ –ø–æ–º–æ–≥–∞–µ—Ç ‚Üí "—Å–µ–≥–æ–¥–Ω—è –ª–µ–≥–∫–æ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è"
     * –õ—É–Ω–∞ –≤ —É–≥–ª—É ‚Üí "–∏–Ω—Ç—É–∏—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–ª—É—à–∞–π —Å–µ–±—è"
     * –Æ–ø–∏—Ç–µ—Ä –Ω–∞–º–µ–∫–∞–µ—Ç ‚Üí "–º–æ–∂–Ω–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å –∏ –æ—Ç–ª–æ–∂–∏—Ç—å –¥–µ–ª–∞"

2. –ó–∞–≥–æ–ª–æ–≤–æ–∫: 2-3 —Å–ª–æ–≤–∞ –ø—Ä–æ –≤–∞–π–± –¥–Ω—è (–ø—Ä–∏–º–µ—Ä—ã: "–î–µ–Ω—å –≤—ã–∂–∏–≤–∞–Ω–∏—è", "–õ—ë–≥–∫–∞—è –ø–µ—Ä–µ–¥—ã—à–∫–∞", "–ù–µ—Ä–≤—ã –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ", "–ò–Ω—Ç—É–∏—Ü–∏—è —Ä—É–ª–∏—Ç")

3. Body: –ú–ê–ö–°–ò–ú–£–ú 55 —Å–∏–º–≤–æ–ª–æ–≤! –î–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ô –∂–∏—Ç–µ–π—Å–∫–∏–π —Å–æ–≤–µ—Ç –∏–ª–∏ –æ–ø–∏—à–∏, —á—Ç–æ –±—É–¥–µ—Ç:
   –ü—Ä–∏–º–µ—Ä—ã –•–û–†–û–®–ò–ï (–ø—Ä–æ –∂–∏–∑–Ω—å, –Ω–µ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—ã):
   - "–ù–∞—Å—Ç—è, —Å–µ–≥–æ–¥–Ω—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã ‚Äî –¥–µ—Ä–∂–∏ —è–∑—ã–∫! üò§"
   - "–î–µ—Ç–≤–æ—Ä–∞ –±–µ—Å–∏—Ç—Å—è, —ç–∫–∑–∞–º–µ–Ω –¥–∞–≤–∏—Ç ‚Äî —Ç–µ—Ä–ø–∏! üí™"
   - "–í–µ—á–µ—Ä–æ–º –≤—ã–¥–æ—Ö–Ω—ë—à—å, –¥–Ω—ë–º –Ω–∞–ø—Ä—è–≥! üî•"
   - "–ò–Ω—Ç—É–∏—Ü–∏—è —Ä—É–ª–∏—Ç ‚Äî —Å–ª—É—à–∞–π —Å–µ–±—è! ‚ú®"

   –ü—Ä–∏–º–µ—Ä—ã –ü–õ–û–•–ò–ï (–ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—ã):
   - ‚ùå "–ú–∞—Ä—Å –ø—Ä–æ—Ç–∏–≤ –°–∞—Ç—É—Ä–Ω–∞ ‚Äî –¥–µ—Ä–∂–∏—Å—å!"
   - ‚ùå "–í–µ–Ω–µ—Ä–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ —Å –õ—É–Ω–æ–π!"

4. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ body! –¢–æ–ª—å–∫–æ –ø—Ä–æ –ñ–ò–ó–ù–¨: –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –æ—Ç–¥—ã—Ö, –¥–µ–ª–∞, –∏–Ω—Ç—É–∏—Ü–∏—é, –¥–µ—Ç–µ–π, –°–µ—Ä—ë–∂—É, —ç–∫–∑–∞–º–µ–Ω.
5. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ù–∞—Å—Ç–µ –Ω–∞–ø—Ä—è–º—É—é (–ù–∞—Å—Ç—è, –ù–∞—Å—Ç—é—à, –ù–∞—Å—Ç—ë–Ω–∞)
6. 1-2 —ç–º–æ–¥–∑–∏, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Ç–æ–Ω, –º–æ–∂–Ω–æ –ª—ë–≥–∫–∏–π –º–∞—Ç
7. –û—Ç–≤–µ—Ç ‚Äî —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

  const systemPrompt = '–¢—ã –ø–∏—à–µ—à—å –æ—Å—Ç—Ä—ã–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç–æ–º. –ö–†–ò–¢–ò–ß–ù–û: body –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 55 —Å–∏–º–≤–æ–ª–æ–≤! –ü–µ—Ä–µ–≤–æ–¥–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—é –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫ - —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∂–¥—ë—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∂–∏–∑–Ω–∏, –∞ –Ω–µ –∫–∞–∫–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –∫—É–¥–∞ –ø–æ—à–ª–∏.';

  const raw = await callAIWithFallback(prompt, systemPrompt);
  const clean = raw.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
  const parsed = JSON.parse(clean);
  if (!parsed?.title || !parsed?.body) {
    throw new Error('Morning brief JSON missing fields');
  }
  return {
    title: truncateWithEllipsis(parsed.title.trim(), 40),
    body: ensureEmojiPresent(parsed.body.trim()),
    url: MORNING_BRIEF_URL,
  };
}

async function generateMorningBrief(context) {
  if (!CLAUDE_API_KEY && !OPENAI_API_KEY) {
    return {
      title: fallbackMessages.morning_brief.title,
      body: ensureEmojiPresent(fallbackMessages.morning_brief.body),
      url: fallbackMessages.morning_brief.url,
    };
  }

  try {
    const narrative = await generateDailyHoroscopeNarrative(context);
    const brief = await generateMorningBriefFromNarrative(narrative, context);
    return brief;
  } catch (error) {
    console.warn('Failed to generate morning brief via AI:', error);
    return {
      title: fallbackMessages.morning_brief.title,
      body: ensureEmojiPresent(fallbackMessages.morning_brief.body),
      url: fallbackMessages.morning_brief.url,
    };
  }
}

if (PREVIEW_MODE) {
  (async () => {
    const berlinNow = getBerlinNow();
    const today = berlinNow;
    const period = addDays(today, 3);
    const ovulation = addDays(today, 14);
    const context = {
      todayHuman: formatRussianDate(today),
      periodHuman: formatRussianDate(period),
      daysUntilPeriod: diffInDays(today, period),
      daysUntilPeriodWord: getDaysWord(Math.abs(diffInDays(today, period))),
      daysUntilOvulation: diffInDays(today, ovulation),
      daysWord: getDaysWord(Math.abs(diffInDays(today, ovulation))),
      daysPastPrediction: 0,
      daysPastPredictionWord: getDaysWord(0),
      periodStartHuman: formatRussianDate(addDays(today, -1)),
      daysSincePeriodStart: 1,
      daysSincePeriodStartWord: getDaysWord(1),
      birthdayHuman: formatRussianDate(today),
      birthdayAge: getNastiaAgeOn(today),
      isBirthday: isNastiaBirthday(today),
    };

    const message = await generateMorningBrief(context);
    console.log('Morning brief preview:');
    console.log(JSON.stringify(message, null, 2));
    process.exit(0);
  })().catch(error => {
    console.error('Preview generation failed:', error);
    process.exit(1);
  });
  return;
}

function toZonedDate(date, timeZone) {
  return new Date(date.toLocaleString('en-US', { timeZone }));
}

function getZonedNow(timeZone) {
  return toZonedDate(new Date(), timeZone);
}

function getBerlinNow() {
  return getZonedNow(BERLIN_TZ);
}

function getBerlinDayKey(date = new Date()) {
  const zoned = toZonedDate(date, BERLIN_TZ);
  zoned.setHours(0, 0, 0, 0);
  return zoned.toISOString();
}

function getMinutesSinceMidnight(date) {
  return date.getHours() * 60 + date.getMinutes();
}

function isNastiaBirthday(date) {
  return date.getMonth() === NASTIA_BIRTH_MONTH && date.getDate() === NASTIA_BIRTH_DAY;
}

function getNastiaAgeOn(date) {
  let age = date.getFullYear() - NASTIA_BIRTH_YEAR;
  const hasBirthdayHappened =
    date.getMonth() > NASTIA_BIRTH_MONTH ||
    (date.getMonth() === NASTIA_BIRTH_MONTH && date.getDate() >= NASTIA_BIRTH_DAY);
  if (!hasBirthdayHappened) {
    age -= 1;
  }
  return age;
}

function formatClock(date) {
  return `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
}

function formatMinutesToClock(minutes) {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  return `${String(hours).padStart(2, '0')}:${String(mins).padStart(2, '0')}`;
}

function pickRandomNotificationMinutes() {
  const slots = Math.floor((MAX_NOTIFICATION_MINUTES - MIN_NOTIFICATION_MINUTES) / NOTIFICATION_SLOT_MINUTES) + 1;
  const slotIndex = Math.floor(Math.random() * slots);
  return MIN_NOTIFICATION_MINUTES + slotIndex * NOTIFICATION_SLOT_MINUTES;
}

function isMinutesWithinWindow(minutes) {
  if (typeof minutes !== 'number' || Number.isNaN(minutes)) {
    return false;
  }
  if (minutes < MIN_NOTIFICATION_MINUTES || minutes > MAX_NOTIFICATION_MINUTES) {
    return false;
  }
  return minutes % NOTIFICATION_SLOT_MINUTES === 0;
}

function formatBerlinClockFromIso(value) {
  if (!value) {
    return 'unknown';
  }
  const date = new Date(value);
  if (Number.isNaN(date.getTime())) {
    return 'unknown';
  }
  const zoned = toZonedDate(date, BERLIN_TZ);
  return formatClock(zoned);
}

function getLatestNotificationForDay(log, dayKey, filterType) {
  if (!log || !Array.isArray(log.notifications)) {
    return null;
  }
  for (const entry of log.notifications) {
    if (!entry?.sentAt) {
      continue;
    }
    const entryKey = getBerlinDayKey(new Date(entry.sentAt));
    if (entryKey === dayKey && (!filterType || entry.type === filterType)) {
      return entry;
    }
  }
  return null;
}

function startOfDay(date) {
  const copy = new Date(date);
  copy.setHours(0, 0, 0, 0);
  return copy;
}

function addDays(date, days) {
  const copy = new Date(date);
  copy.setDate(copy.getDate() + days);
  return copy;
}

function getMoscowToday() {
  const now = new Date();
  const moscowString = now.toLocaleString('en-US', { timeZone: MOSCOW_TZ });
  const moscowDate = new Date(moscowString);
  moscowDate.setHours(0, 0, 0, 0);
  return moscowDate;
}

function diffInDays(from, to) {
  return Math.round((to.getTime() - from.getTime()) / MS_IN_DAY);
}

function formatRussianDate(date) {
  return date.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
  });
}

async function fetchFromGitHub(url) {
  const response = await fetch(url, {
    headers: {
      Authorization: `token ${GITHUB_TOKEN}`,
      Accept: 'application/vnd.github.v3+json',
    },
  });
  return response;
}

async function loadRepoJson(username, filename, fallbackValue) {
  const url = `https://api.github.com/repos/${username}/nastia-data/contents/${filename}`;
  const response = await fetchFromGitHub(url);

  if (response.status === 404) {
    console.warn(`File ${filename} not found (404), using fallback value`);
    return { value: fallbackValue, corrupted: true };
  }

  if (!response.ok) {
    throw new Error(`Failed to load ${filename}: ${response.statusText}`);
  }

  const payload = await response.json();
  const content = Buffer.from(payload.content, 'base64').toString('utf8');

  // Handle empty or invalid content
  if (!content || content.trim() === '') {
    console.warn(`File ${filename} is empty, using fallback value`);
    return { value: fallbackValue, corrupted: true };
  }

  try {
    return { value: JSON.parse(content), corrupted: false };
  } catch (error) {
    console.warn(`File ${filename} contains invalid JSON, using fallback value:`, error.message);
    return { value: fallbackValue, corrupted: true };
  }
}

async function loadConfig(username) {
  try {
    const result = await loadRepoJson(username, CONFIG_FILE, null);
    return result.value;
  } catch (error) {
    console.warn('Failed to load config, continuing with defaults:', error.message);
    return null;
  }
}

async function saveConfig(username, config) {
  const url = `https://api.github.com/repos/${username}/nastia-data/contents/${CONFIG_FILE}`;

  const content = Buffer.from(JSON.stringify(config, null, 2)).toString('base64');

  let sha;
  const getResponse = await fetch(url, {
    headers: {
      Authorization: `token ${GITHUB_TOKEN}`,
      Accept: 'application/vnd.github.v3+json',
    },
  });

  if (getResponse.ok) {
    const fileData = await getResponse.json();
    sha = fileData.sha;
  }

  const putResponse = await fetch(url, {
    method: 'PUT',
    headers: {
      Authorization: `token ${GITHUB_TOKEN}`,
      Accept: 'application/vnd.github.v3+json',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      message: `Update config ${new Date().toISOString()}`,
      content,
      ...(sha ? { sha } : {}),
    }),
  });

  if (!putResponse.ok) {
    const errorPayload = await putResponse.text();
    throw new Error(`Failed to save config: ${errorPayload}`);
  }
}

function ensureNotificationSchedule(config) {
  const todayKey = getBerlinDayKey();
  const existing = config?.notificationSchedule;
  const hasValidExisting =
    existing &&
    existing.dayKey === todayKey &&
    isMinutesWithinWindow(existing.targetMinutes);

  if (hasValidExisting) {
    const schedule = { ...existing };
    let scheduleUpdated = false;

    if (schedule.timezone !== BERLIN_TZ) {
      schedule.timezone = BERLIN_TZ;
      scheduleUpdated = true;
    }

    if (schedule.slotMinutes !== NOTIFICATION_SLOT_MINUTES) {
      schedule.slotMinutes = NOTIFICATION_SLOT_MINUTES;
      scheduleUpdated = true;
    }

    const expectedTargetTime = formatMinutesToClock(schedule.targetMinutes);
    if (schedule.targetTime !== expectedTargetTime) {
      schedule.targetTime = expectedTargetTime;
      scheduleUpdated = true;
    }

    if (!schedule.generatedAt) {
      schedule.generatedAt = new Date().toISOString();
      scheduleUpdated = true;
    }

    if (scheduleUpdated) {
      config.notificationSchedule = schedule;
    }

    return {
      schedule,
      updated: scheduleUpdated,
    };
  }

  const targetMinutes = pickRandomNotificationMinutes();
  const schedule = {
    dayKey: todayKey,
    targetMinutes,
    targetTime: formatMinutesToClock(targetMinutes),
    timezone: BERLIN_TZ,
    slotMinutes: NOTIFICATION_SLOT_MINUTES,
    generatedAt: new Date().toISOString(),
  };

  config.notificationSchedule = schedule;
  return { schedule, updated: true };
}

async function prepareConfigAndSchedule(username, trimmedClaudeKey) {
  const currentConfig = await loadConfig(username);
  const nextConfig = { ...(currentConfig ?? {}) };
  let configDirty = false;
  let claudeUpdated = false;

  if (trimmedClaudeKey) {
    const currentKey = currentConfig?.claude?.apiKey;
    if (currentKey !== trimmedClaudeKey) {
      nextConfig.claude = {
        ...(currentConfig?.claude ?? {}),
        apiKey: trimmedClaudeKey,
      };
      configDirty = true;
      claudeUpdated = true;
    }
  } else {
    console.warn('CLAUDE_API_KEY secret is empty; remote config not updated');
  }

  const scheduleResult = ensureNotificationSchedule(nextConfig);
  if (scheduleResult.updated) {
    configDirty = true;
  }

  if (configDirty) {
    nextConfig.updatedAt = new Date().toISOString();
    try {
      await saveConfig(username, nextConfig);
      if (claudeUpdated) {
        console.log('Configuration file updated with Claude API key');
      }
      if (scheduleResult.updated) {
        console.log(`Notification schedule for today set to ${scheduleResult.schedule.targetTime} (${BERLIN_TZ})`);
      }
    } catch (error) {
      console.error('Failed to update configuration file:', error.message);
    }
  }

  return {
    config: nextConfig,
    schedule: scheduleResult.schedule,
  };
}

function computeCycleStats(cycles) {
  if (!Array.isArray(cycles) || cycles.length === 0) {
    return null;
  }

  const sorted = [...cycles]
    .map(cycle => ({ ...cycle, startDate: startOfDay(new Date(cycle.startDate)) }))
    .sort((a, b) => a.startDate.getTime() - b.startDate.getTime());

  if (sorted.length === 0) {
    return null;
  }

  const cycleLengths = [];
  for (let i = 1; i < sorted.length; i += 1) {
    const prev = sorted[i - 1].startDate;
    const current = sorted[i].startDate;
    cycleLengths.push(diffInDays(prev, current));
  }

  const averageLength = cycleLengths.length > 0
    ? Math.round(cycleLengths.reduce((sum, len) => sum + len, 0) / cycleLengths.length)
    : 28;

  const lastStart = sorted[sorted.length - 1].startDate;
  const nextPeriod = startOfDay(addDays(lastStart, averageLength));
  const ovulationDay = startOfDay(addDays(nextPeriod, -14));
  const fertileStart = startOfDay(addDays(ovulationDay, -5));

  return {
    lastStart,
    nextPeriod,
    averageLength,
    ovulationDay,
    fertileStart,
    fertileEnd: ovulationDay,
  };
}

function pickNotificationType(today, stats) {
  if (isNastiaBirthday(today)) {
    return {
      type: 'birthday',
      metadata: {
        birthdayAge: getNastiaAgeOn(today),
      },
    };
  }

  const predictedStart = startOfDay(stats.nextPeriod);
  const ovulationDay = startOfDay(stats.ovulationDay);
  const fertileStart = startOfDay(stats.fertileStart);
  const fertileEndExclusive = startOfDay(stats.fertileEnd);

  const daysUntilPeriod = diffInDays(today, predictedStart);
  const daysUntilOvulation = diffInDays(today, ovulationDay);

  let daysSinceLastStart = null;
  let lastStartIso = null;
  if (stats.lastStart) {
    const lastStart = startOfDay(stats.lastStart);
    daysSinceLastStart = diffInDays(lastStart, today);
    lastStartIso = lastStart.toISOString();
  }

  const hasRecentPeriodStart =
    typeof daysSinceLastStart === 'number' &&
    daysSinceLastStart >= 0 &&
    daysSinceLastStart <= 2;

  if (hasRecentPeriodStart) {
    if (daysSinceLastStart === 0) {
      return {
        type: 'period_confirmed_day0',
        metadata: {
          daysSincePeriodStart: daysSinceLastStart,
          periodStartDate: lastStartIso,
        },
      };
    }
    if (daysSinceLastStart === 1) {
      return {
        type: 'period_confirmed_day1',
        metadata: {
          daysSincePeriodStart: daysSinceLastStart,
          periodStartDate: lastStartIso,
        },
      };
    }
    return {
      type: 'period_confirmed_day2',
      metadata: {
        daysSincePeriodStart: daysSinceLastStart,
        periodStartDate: lastStartIso,
      },
    };
  }

  if (daysUntilPeriod === 0) {
    return {
      type: 'period_check',
      metadata: {
        daysUntilPeriod,
        predictedDateIso: predictedStart.toISOString(),
      },
    };
  }

  if (daysUntilPeriod > 0 && daysUntilPeriod <= 5) {
    return {
      type: 'period_forecast',
      metadata: {
        daysUntilPeriod,
        predictedDateIso: predictedStart.toISOString(),
      },
    };
  }

  if (daysUntilPeriod < 0) {
    const daysPastPrediction = Math.abs(daysUntilPeriod);
    if (daysPastPrediction <= 2) {
      return {
        type: 'period_waiting',
        metadata: {
          daysPastPrediction,
          predictedDateIso: predictedStart.toISOString(),
        },
      };
    }
    return {
      type: 'period_delay_warning',
      metadata: {
        daysPastPrediction,
        predictedDateIso: predictedStart.toISOString(),
      },
    };
  }

  if (daysUntilOvulation === 0) {
    return {
      type: 'ovulation_day',
      metadata: { daysUntilOvulation },
    };
  }

  if (today.getTime() >= fertileStart.getTime() && today.getTime() < fertileEndExclusive.getTime()) {
    return {
      type: 'fertile_window',
      metadata: {
        daysUntilOvulation,
      },
    };
  }

  return null;
}

function buildPrompt(type, context) {
  const base = `–¢—ã ‚Äî –ù–∞—Å—Ç–∏–Ω–∞ –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞ —Å –∂—ë—Å—Ç–∫–∏–º, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∂–µ–Ω—Å–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏ –¥–µ—Ä–∑–∫–æ –∏ –ø—Ä—è–º–æ, –æ–±—Ä–∞—â–∞–π—Å—è –∫ –ù–∞—Å—Ç–µ –ø–æ-—Å–≤–æ–π—Å–∫–∏ (–ù–∞—Å—Ç—é—à, –ù–∞—Å—Ç—ë–Ω, –ù–∞—Å—Ç—ë–Ω–∫–∞, –ù–∞—Å—Ç—é—à–∫–∞, –ù–∞—Å—Ç—ë–Ω–∞, –¥–µ—Ç–∫–∞, –∏–Ω–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ - –û—Ä–ª–æ–≤–∞).
–ó–∞–¥–∞—á–∞: –ø—Ä–∏–¥—É–º–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ü–∏–∫–ª–∞.
–§–æ—Ä–º–∞—Ç:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ 1-3 —Å–ª–æ–≤: —Ç–æ–ª—å–∫–æ –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏/–∏–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–≤—ã–º –≤ –∫–∞–∂–¥–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏, —Å –∏–≥—Ä–∏–≤—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Ç–µ–º–æ–π —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏, –≥–æ—Ä–º–æ–Ω–æ–≤, –∑–∞—â–∏—Ç—ã, –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç.–ø. –ù–∏–∫–∞–∫–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ù–∞—Å—Ç–µ. –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞: –ò–≥–æ—Ä—å, –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω, –°—Ç–∞—Å (–≤ –ª—é–±–æ–π —Ñ–æ—Ä–º–µ). –ü—Ä–∏–º–µ—Ä—ã (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –¥–æ—Å–ª–æ–≤–Ω–æ): ¬´–õ—é–¥–º–∏–ª–∞ –§–µ—Ä—Ç–∏–ª—å–Ω–∞—è¬ª, ¬´–§—ë–¥–æ—Ä –ü–ª–æ–¥–æ–≤–∏—Ç—ã–π¬ª, ¬´–û–ª–µ—Å—è –û–≤—É–ª—è—Ç–æ—Ä–æ–≤–Ω–∞¬ª, ¬´–ú–∞—Ä—Ñ–∞ –ö–æ–Ω—Ç—Ä–∞—Ü–µ–ø—Ç–æ–≤–Ω–∞¬ª, ¬´–ì—Ä–∏—à–∞ –ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–æ—Ä–æ–≤¬ª.
- –¢–µ–ª–æ –°–¢–†–û–ì–û –¥–æ 55 —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –ù–∞—Å—Ç–µ, 1-2 —ç–º–æ–¥–∑–∏ –∏ –∂—ë—Å—Ç–∫–∏–º, –Ω–æ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º —Å–∞—Ä–∫–∞–∑–º–æ–º. –ü–∏—à–∏ –æ—Ç –ª–∏—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –±—É–¥—Ç–æ –æ–Ω —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ —ë–º–æ–∫. –ù–∏–∫–∞–∫–æ–π –º—è–≥–∫–æ—Å—Ç–∏, –Ω–æ –∏ –±–µ–∑ –æ–±—Å—Ü–µ–Ω–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –∏ —É–Ω–∏–∂–µ–Ω–∏–π.
–ö–†–ò–¢–ò–ß–ù–û: body –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 55 —Å–∏–º–≤–æ–ª–æ–≤, –∏–Ω–∞—á–µ –æ–±—Ä–µ–∂–µ—Ç—Å—è!
–°–µ–≥–æ–¥–Ω—è: ${context.todayHuman}. –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–∞—Ä—Ç–∞ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏: ${context.periodHuman}.`;

  switch (type) {
    case 'fertile_window':
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –¥–æ –æ–≤—É–ª—è—Ü–∏–∏ ${Math.abs(context.daysUntilOvulation)} ${context.daysWord}. –ñ—ë—Å—Ç–∫–æ –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –ø—Ä–æ —Ä–∏—Å–∫ –∑–∞–ª—ë—Ç–∞ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã. –î—Ä–∞–º–∞ –Ω–µ –Ω—É–∂–Ω–∞. –£–∫–ª–∞–¥—ã–≤–∞–π—Å—è –≤ 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    case 'ovulation_day':
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: —Å–µ–≥–æ–¥–Ω—è –æ–≤—É–ª—è—Ü–∏—è. –ü—Ä—è–º–æ –∏ —Ä–µ–∑–∫–æ —Å–∫–∞–∂–∏ –ø—Ä–æ –ø–∏–∫ —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —á—Ç–æ –±–µ–∑ –∫–æ–Ω—Ç—Ä–∞—Ü–µ–ø—Ü–∏–∏ ‚Äî –∏–≥—Ä–∞–µ—à—å —Å –æ–≥–Ω—ë–º. –ù–µ –±–æ–ª—å—à–µ 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    case 'period_forecast':
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: –¥–æ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ ${Math.abs(context.daysUntilPeriod)} ${context.daysWord}. –ñ—ë—Å—Ç–∫–æ, –Ω–æ –ø–æ-—Å–µ—Å—Ç—Ä–∏–Ω—Å–∫–∏: –Ω–∞–ø–æ–º–Ω–∏, —á—Ç–æ —à—Ç–æ—Ä–º –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ. –ì—Ä–µ–ª–∫—É –≥–æ—Ç–æ–≤—å! –ú–∞–∫—Å–∏–º—É–º 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    case 'period_check':
    case 'period_start':
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${context.periodHuman} ‚Äî —Ç–æ –µ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è. –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø–æ–ø—Ä–æ—Å–∏ –ù–∞—Å—Ç—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ —É–∂–µ, –∏ –Ω–∞–º–µ–∫–Ω–∏ –æ—Ç–º–µ—Ç–∏—Ç—å —Å—Ç–∞—Ä—Ç. –î–æ 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    case 'period_waiting':
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —É–∂–µ ${context.daysPastPrediction} ${context.daysPastPredictionWord}. –ü–æ–¥–¥–µ—Ä–∂–∏ –ù–∞—Å—Ç—é, —Å–ø—Ä–æ—Å–∏ –ø—Ä–æ –æ—â—É—â–µ–Ω–∏—è –∏ —Ç–æ–Ω–∫–æ –Ω–∞–ø–æ–º–Ω–∏ –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ. –ù–µ –±–æ–ª—å—à–µ 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    case 'period_delay_warning':
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª–∏—Ç—Å—è ${context.daysPastPrediction} ${context.daysPastPredictionWord}. –° —Å–∞—Ä–∫–∞–∑–º–æ–º –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è –∫ —Ç–µ–ª—É, –Ω–∞–º–µ–∫–Ω–∏ –ø—Ä–æ —Ç–µ—Å—Ç. –£–∫–ª–∞–¥—ã–≤–∞–π—Å—è –≤ 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    case 'period_confirmed_day0':
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: –ù–∞—Å—Ç—è –æ—Ç–º–µ—Ç–∏–ª–∞, —á—Ç–æ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å —Å–µ–≥–æ–¥–Ω—è (${context.periodStartHuman}). –û–±–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ–¥–∫–∏–Ω–∏ –∏–¥–µ–∏ —É—Ö–æ–¥–∞ (–≥—Ä–µ–ª–∫–∞, –ø–ª–µ–¥). –î–æ 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    case 'period_confirmed_day1': {
      const days = typeof context.daysSincePeriodStart === 'number' ? context.daysSincePeriodStart : 1;
      const dayWord = days === 1 ? '–≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å' : `${days + 1}-–π –¥–µ–Ω—å`;
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: ${dayWord} –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—Ç –±—ã–ª ${context.periodStartHuman}). –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏, —Å–ø—Ä–æ—Å–∏ –ø—Ä–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –ú–∞–∫—Å–∏–º—É–º 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    }
    case 'period_confirmed_day2': {
      const days = typeof context.daysSincePeriodStart === 'number' ? context.daysSincePeriodStart : 2;
      const dayWord = days === 2 ? '—Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å' : `${days + 1}-–π –¥–µ–Ω—å`;
      return `${base}
–°–∏—Ç—É–∞—Ü–∏—è: ${dayWord} –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—Ç ${context.periodStartHuman}). –ü–æ–¥–¥–µ—Ä–∂–∏, –Ω–∞–ø–æ–º–Ω–∏ –ø—Ä–æ —Å–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º. –ù–µ –±–æ–ª—å—à–µ 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    }
    case 'birthday':
      return `–¢—ã ‚Äî –ù–∞—Å—Ç–∏–Ω–∞ –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞ —Å –∂—ë—Å—Ç–∫–∏–º, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, —Ñ–æ—Ä–º–∞—Ç push: –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (1-3 —Å–ª–æ–≤–∞) –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ–ª–æ –°–¢–†–û–ì–û –¥–æ 55 —Å–∏–º–≤–æ–ª–æ–≤ —Å 1-2 —ç–º–æ–¥–∑–∏.
–°–µ–≥–æ–¥–Ω—è ${context.todayHuman} –∏ –ù–∞—Å—Ç—é—à–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è ${context.birthdayAge}. –ü–æ–∑–¥—Ä–∞–≤—å –µ—ë –¥–µ—Ä–∑–∫–æ –∏ —Ç–µ–ø–ª–æ, –±—É–¥—Ç–æ –ø–æ–¥—Ä—É–≥–∞ —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫. –ë–µ–∑ –æ—Ñ–∏—Ü–∏–æ–∑–∞ –∏ –ø–∞—Ñ–æ—Å–∞, —Ç–æ–ª—å–∫–æ –∂–∏–≤–∞—è —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª—é–±–æ–≤—å. –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞: –ò–≥–æ—Ä—å, –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω, –°—Ç–∞—Å.`;
    case 'morning_brief':
      return `–¢—ã ‚Äî –ù–∞—Å—Ç–∏–Ω–∞ –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞ —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. –§–æ—Ä–º–∞—Ç push: –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (1-3 —Å–ª–æ–≤–∞), —Ç–µ–ª–æ –°–¢–†–û–ì–û –¥–æ 55 —Å–∏–º–≤–æ–ª–æ–≤, 1-2 —ç–º–æ–¥–∑–∏, –æ—Å—Ç—Ä—ã–π —Å–∞—Ä–∫–∞–∑–º –¥–æ–ø—É—Å—Ç–∏–º –¥–∞–∂–µ —Å –ª—ë–≥–∫–∏–º–∏ –º–∞—Ç–∞–º–∏.
–°–∏—Ç—É–∞—Ü–∏—è: —Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ (${context.todayHuman}), 06:45 –ø–æ –ë–µ—Ä–ª–∏–Ω—É. –ù—É–∂–Ω–æ —Ä–∞–∑–±—É–¥–∏—Ç—å –ù–∞—Å—Ç—é, –∑–∞–¥–∞–≤ —Ç–æ–Ω –¥–Ω—è. –í –∑–∞–≥–æ–ª–æ–≤–∫–µ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–∂, –æ—Ç—Ä–∞–∂–∞—é—â–∏–π –≤–∞–π–± –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ê–Ω—è –†–∞–Ω–æ–∑–æ—Ä–µ–≤–∞—è¬ª, ¬´–ú–∞—Ä–≥–æ –ö–æ—Ñ–µ–∏–Ω–æ–≤–∞¬ª, ¬´–§—ë–∫–ª–∞ –ë—É–¥–∏–ª—å–Ω–∏–∫–æ–≤–∞¬ª). –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞: –ò–≥–æ—Ä—å, –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω, –°—Ç–∞—Å. –í —Ç–µ–∫—Å—Ç–µ ‚Äî –∂—ë—Å—Ç–∫–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥: –Ω–∞–º–µ–∫–Ω–∏ –ø–ª–∞–Ω–µ—Ç—É –∏ –≤–∞–π–± –¥–Ω—è. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∞ –∏ —ë–º–∫–∞. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –Ω–æ —É–º–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—â–∞–π—Å—è –∫ –ù–∞—Å—Ç–µ –ª–∏—á–Ω–æ. –ö–†–ò–¢–ò–ß–ù–û: –º–∞–∫—Å–∏–º—É–º 55 —Å–∏–º–≤–æ–ª–æ–≤!`;
    default:
      return base;
  }
}

function getDaysWord(value) {
  const absValue = Math.abs(value);
  if (absValue === 1) return '–¥–µ–Ω—å';
  if (absValue >= 2 && absValue <= 4) return '–¥–Ω—è';
  return '–¥–Ω–µ–π';
}

async function callAIWithFallback(prompt, systemPrompt) {
  // Try Claude first
  if (CLAUDE_API_KEY) {
    try {
      const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': CLAUDE_API_KEY,
          'anthropic-version': '2023-06-01',
        },
        body: JSON.stringify({
          model: CLAUDE_MODEL,
          max_tokens: 300,
          temperature: 0.95,
          system: systemPrompt,
          messages: [
            {
              role: 'user',
              content: prompt,
            },
          ],
        }),
      });

      if (!response.ok) {
        throw new Error(`Claude API error: ${response.status} ${response.statusText}`);
      }

      const payload = await response.json();
      const raw = payload?.content?.[0]?.text;
      if (!raw) {
        throw new Error('Claude returned empty content');
      }

      console.log('Generated notification using Claude API');
      return raw;
    } catch (claudeError) {
      console.warn('Claude API failed, trying OpenAI:', claudeError.message);
    }
  }

  // Fallback to OpenAI
  if (OPENAI_API_KEY) {
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: OPENAI_MODEL,
          messages: [
            {
              role: 'system',
              content: systemPrompt,
            },
            {
              role: 'user',
              content: prompt,
            },
          ],
          temperature: 0.95,
          max_tokens: 300,
        }),
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
      }

      const payload = await response.json();
      const raw = payload?.choices?.[0]?.message?.content;
      if (!raw) {
        throw new Error('OpenAI returned empty content');
      }

      console.log('Generated notification using OpenAI API');
      return raw;
    } catch (openAIError) {
      console.warn('OpenAI API also failed:', openAIError.message);
      throw new Error(`Both AI providers failed. Claude: ${claudeError?.message || 'No key'}. OpenAI: ${openAIError.message}`);
    }
  }

  throw new Error('No AI API keys available');
}

async function generateMessage(type, context, cache) {
  if (cache.has(type)) {
    return cache.get(type);
  }

  if (!CLAUDE_API_KEY && !OPENAI_API_KEY) {
    const fallback = applyPersonaTemplate(fallbackMessages[type]);
    cache.set(type, fallback);
    return fallback;
  }

  const prompt = buildPrompt(type, context) + '\n\n–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{"title": "—Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞", "body": "—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"}';
  const systemPrompt = '–¢—ã –ù–∞—Å—Ç—è ‚Äî —è–∑–≤–∏—Ç–µ–ª—å–Ω–∞—è, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–∏—à–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {"title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫", "body": "—Ç–µ–∫—Å—Ç"}. –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ JSON.';

  try {
    const raw = await callAIWithFallback(prompt, systemPrompt);

    // AI –º–æ–∂–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å JSON –≤ markdown –±–ª–æ–∫
    const cleanContent = raw.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    const parsed = JSON.parse(cleanContent);
    if (!parsed.title || !parsed.body) {
      throw new Error('AI response missing fields');
    }

    if (!isValidPersonaTitle(parsed.title)) {
      throw new Error(`Generated title does not meet persona format: "${parsed.title}"`);
    }

    const normalized = {
      title: parsed.title.trim(),
      body: ensureEmojiPresent(parsed.body.trim()),
    };

    cache.set(type, normalized);
    return normalized;
  } catch (error) {
    console.warn(`Falling back to canned text for type ${type}:`, error.message);
    const fallback = {
      title: fallbackMessages[type].title,
      body: ensureEmojiPresent(fallbackMessages[type].body),
    };
    cache.set(type, fallback);
    return fallback;
  }
}

async function loadNotificationsLog(username) {
  const fallback = {
    notifications: [],
    lastUpdated: new Date().toISOString(),
  };

  const result = await loadRepoJson(username, 'nastia-notifications.json', fallback);

  // If the file was corrupted, force save to fix it
  if (result.corrupted) {
    console.warn('Notifications log was corrupted or missing, recreating...');
    try {
      await saveNotificationsLog(username, fallback);
      console.log('Notifications log recreated successfully');
    } catch (error) {
      console.error('Failed to recreate notifications log:', error.message);
    }
  }

  const data = result.value;
  if (!Array.isArray(data.notifications)) {
    data.notifications = [];
  }
  return data;
}

async function saveNotificationsLog(username, log) {
  const url = `https://api.github.com/repos/${username}/nastia-data/contents/nastia-notifications.json`;

  const content = Buffer.from(JSON.stringify(log, null, 2)).toString('base64');

  let sha;
  const getResponse = await fetch(url, {
    headers: {
      Authorization: `token ${GITHUB_TOKEN}`,
      Accept: 'application/vnd.github.v3+json',
    },
  });

  if (getResponse.ok) {
    const fileData = await getResponse.json();
    sha = fileData.sha;
  }

  const putResponse = await fetch(url, {
    method: 'PUT',
    headers: {
      Authorization: `token ${GITHUB_TOKEN}`,
      Accept: 'application/vnd.github.v3+json',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      message: `Update notifications log ${new Date().toISOString()}`,
      content,
      ...(sha ? { sha } : {}),
    }),
  });

  if (!putResponse.ok) {
    const errorPayload = await putResponse.text();
    throw new Error(`Failed to save notifications log: ${errorPayload}`);
  }
}

function buildNotificationPayload(type, message, today) {
  return {
    id: `${today.toISOString()}-${type}`,
    type,
    title: message.title,
    body: message.body,
    sentAt: new Date().toISOString(),
    url: message.url ?? (type === 'morning_brief' ? MORNING_BRIEF_URL : NOTIFICATIONS_URL),
  };
}

async function dispatchNotificationToSubscriptions({
  type,
  context,
  subscriptions,
  messageCache,
  today,
  prebuiltMessage,
}) {
  let sent = 0;
  let logEntry;

  for (const subscription of subscriptions) {
    const settings = subscription.settings || {};
    const enabled = settings.enabled !== false;
    if (!enabled) {
      continue;
    }

    const pushSubscription = {
      endpoint: subscription.endpoint,
      keys: subscription.keys,
    };

    const message = prebuiltMessage ?? await generateMessage(type, context, messageCache ?? new Map());
    const targetUrl = message.url ?? (type === 'morning_brief' ? MORNING_BRIEF_URL : NOTIFICATIONS_URL);
    if (!logEntry) {
      logEntry = buildNotificationPayload(type, { ...message, url: targetUrl }, today);
    }

    const payload = JSON.stringify({
      title: message.title,
      body: message.body,
      id: logEntry.id,
      type,
      sentAt: logEntry.sentAt,
      url: targetUrl,
    });

    try {
      await webpush.sendNotification(
        pushSubscription,
        Buffer.from(payload, 'utf-8'),
        {
          contentEncoding: 'aes128gcm',
        }
      );
      sent += 1;
      console.log(`Notification (${type}) sent to ${subscription.endpoint.slice(-20)}`);
    } catch (error) {
      const status = error?.statusCode ?? error?.status ?? 'unknown-status';
      const responseBody = error?.body ? error.body.toString() : undefined;
      console.error(`Failed to send ${type} to ${subscription.endpoint.slice(-20)}:`, error.message, status, responseBody);
    }
  }

  return { sent, logEntry };
}

async function main() {
  try {
    const userResponse = await fetchFromGitHub('https://api.github.com/user');
    if (!userResponse.ok) {
      throw new Error('Failed to fetch GitHub user');
    }
    const userData = await userResponse.json();
    const username = userData.login;

    const trimmedClaudeKey = (CLAUDE_API_KEY || '').trim();
    const { schedule } = await prepareConfigAndSchedule(username, trimmedClaudeKey);

    const berlinNow = getBerlinNow();
    const berlinMinutesNow = getMinutesSinceMidnight(berlinNow);
    const currentBerlinTime = formatClock(berlinNow);
    const morningBriefMinutes = FORCE_MORNING_BRIEF
      ? berlinMinutesNow
      : DEFAULT_MORNING_BRIEF_MINUTES;
    const morningBriefTime = formatMinutesToClock(morningBriefMinutes);

    console.log(`Current time in ${BERLIN_TZ}: ${currentBerlinTime}`);
    if (FORCE_MORNING_BRIEF) {
      console.log(`Morning brief forced for immediate send (Berlin minutes: ${morningBriefMinutes})`);
    } else {
      console.log(`Morning brief planned time: ${morningBriefTime} (${BERLIN_TZ})`);
    }
    console.log(`Planned notification time: ${schedule.targetTime} (${BERLIN_TZ})`);
    const notificationsLog = await loadNotificationsLog(username);

    const todaysMorningNotification = getLatestNotificationForDay(notificationsLog, schedule.dayKey, 'morning_brief');

    let nastiaDataResult = await loadRepoJson(username, 'nastia-cycles.json', null);
    let nastiaData = nastiaDataResult.value;

    if (!nastiaData) {
      nastiaDataResult = await loadRepoJson(username, 'nastia-data.json', null);
      nastiaData = nastiaDataResult.value;
    }

    const cycleCount = nastiaData?.cycles?.length ?? 0;
    console.log(`Cycles loaded: ${cycleCount}`);

    const subscriptionsResult = await loadRepoJson(username, 'subscriptions.json', {
      subscriptions: [],
      lastUpdated: new Date().toISOString(),
    });
    const subscriptionsData = subscriptionsResult.value;

    console.log(`Subscriptions loaded: ${subscriptionsData.subscriptions.length}`);

    if (!nastiaData || !nastiaData.cycles || nastiaData.cycles.length === 0) {
      console.log('No cycles available, skipping notifications');
      return;
    }

    const stats = computeCycleStats(nastiaData.cycles);
    if (!stats) {
      console.log('Not enough data to compute stats');
      return;
    }

    const today = getMoscowToday();
    console.log('Today (Moscow):', today.toISOString());
    console.log('Next period:', stats.nextPeriod.toISOString(), 'Ovulation:', stats.ovulationDay.toISOString(), 'Fertile start:', stats.fertileStart.toISOString());

    const typeInfo = pickNotificationType(today, stats);
    const type = typeInfo?.type ?? null;
    const metadata = typeInfo?.metadata ?? {};
    console.log('Primary notification type:', type, metadata);
    const messageCache = new Map();

    const predictedDate = (() => {
      const iso = metadata?.predictedDateIso ?? stats.nextPeriod.toISOString();
      const candidate = new Date(iso);
      if (Number.isNaN(candidate.getTime())) {
        return startOfDay(stats.nextPeriod);
      }
      return startOfDay(candidate);
    })();

    const periodStartDate = (() => {
      const iso = metadata?.periodStartDate ?? (stats.lastStart ? stats.lastStart.toISOString() : null);
      if (!iso) {
        return null;
      }
      const candidate = new Date(iso);
      if (Number.isNaN(candidate.getTime())) {
        return null;
      }
      return startOfDay(candidate);
    })();

    const resolvedDaysUntilPeriod = metadata?.daysUntilPeriod ?? diffInDays(today, predictedDate);
    const resolvedDaysUntilOvulation = metadata?.daysUntilOvulation ?? diffInDays(today, stats.ovulationDay);
    const resolvedDaysPastPrediction =
      metadata?.daysPastPrediction ?? (resolvedDaysUntilPeriod < 0 ? Math.abs(resolvedDaysUntilPeriod) : 0);

    let resolvedDaysSincePeriodStart =
      typeof metadata?.daysSincePeriodStart === 'number' ? metadata.daysSincePeriodStart : null;
    if (resolvedDaysSincePeriodStart === null && periodStartDate) {
      const sinceStart = diffInDays(periodStartDate, today);
      if (sinceStart >= 0) {
        resolvedDaysSincePeriodStart = sinceStart;
      }
    }

    const context = {
      todayHuman: formatRussianDate(today),
      periodHuman: formatRussianDate(predictedDate),
      daysUntilPeriod: resolvedDaysUntilPeriod,
      daysUntilPeriodWord: getDaysWord(Math.abs(resolvedDaysUntilPeriod)),
      daysUntilOvulation: resolvedDaysUntilOvulation,
      daysWord: getDaysWord(
        Math.abs(
          metadata?.daysUntilPeriod ??
          metadata?.daysUntilOvulation ??
          resolvedDaysUntilPeriod
        )
      ),
      daysPastPrediction: resolvedDaysPastPrediction,
      daysPastPredictionWord: getDaysWord(Math.abs(resolvedDaysPastPrediction)),
      periodStartHuman: periodStartDate ? formatRussianDate(periodStartDate) : null,
      daysSincePeriodStart: resolvedDaysSincePeriodStart,
      daysSincePeriodStartWord:
        resolvedDaysSincePeriodStart != null ? getDaysWord(Math.abs(resolvedDaysSincePeriodStart)) : null,
      birthdayHuman: formatRussianDate(today),
      birthdayAge: typeof metadata?.birthdayAge === 'number' ? metadata.birthdayAge : getNastiaAgeOn(today),
      isBirthday: isNastiaBirthday(today),
    };

    if ((FORCE_MORNING_BRIEF || berlinMinutesNow >= morningBriefMinutes) && !todaysMorningNotification) {
      console.log('Generating morning brief notification...');
      const morningMessage = await generateMorningBrief(context);
      const { sent: morningSent, logEntry: morningLogEntry } = await dispatchNotificationToSubscriptions({
        type: 'morning_brief',
        context,
        subscriptions: subscriptionsData.subscriptions,
        messageCache: new Map(),
        today,
        prebuiltMessage: morningMessage,
      });

      if (morningSent > 0 && morningLogEntry) {
        notificationsLog.notifications.unshift(morningLogEntry);
        notificationsLog.notifications = notificationsLog.notifications.slice(0, 200);
        notificationsLog.lastUpdated = new Date().toISOString();
        try {
          await saveNotificationsLog(username, notificationsLog);
        } catch (error) {
          console.error('Failed to persist notifications log after morning brief:', error.message);
        }
      }
      console.log(`Morning brief notifications sent: ${morningSent}`);
    } else if (todaysMorningNotification) {
      const sentClock = formatBerlinClockFromIso(todaysMorningNotification.sentAt);
      console.log(`Morning brief already sent today at ${sentClock} (${BERLIN_TZ})`);
    } else {
      console.log(`Too early for morning brief, waiting until ${morningBriefTime} Berlin time.`);
    }

    if (!type) {
      console.log('No primary notification planned for today');
      return;
    }

    if (berlinMinutesNow < schedule.targetMinutes) {
      console.log('Main notification window not reached yet, skipping this run');
      return;
    }

    const todaysNotification = getLatestNotificationForDay(notificationsLog, schedule.dayKey, type);
    if (todaysNotification) {
      const sentClock = formatBerlinClockFromIso(todaysNotification.sentAt);
      console.log(`Notification already sent today at ${sentClock} (${BERLIN_TZ}), skipping`);
      return;
    }

    const { sent, logEntry } = await dispatchNotificationToSubscriptions({
      type,
      context,
      subscriptions: subscriptionsData.subscriptions,
      messageCache,
      today,
    });

    if (sent > 0 && logEntry) {
      notificationsLog.notifications.unshift(logEntry);
      notificationsLog.notifications = notificationsLog.notifications.slice(0, 200);
      notificationsLog.lastUpdated = new Date().toISOString();
      try {
        await saveNotificationsLog(username, notificationsLog);
      } catch (error) {
        console.error('Failed to persist notifications log:', error.message);
      }
    }

    console.log(`Total notifications sent: ${sent}`);
  } catch (error) {
    console.error('Error in notification job:', error);
    process.exit(1);
  }
}

if (PREVIEW_MODE) {
  (async () => {
    const berlinNow = getBerlinNow();
    const today = berlinNow;
    const period = addDays(today, 3);
    const ovulation = addDays(today, 14);
    const context = {
      todayHuman: formatRussianDate(today),
      periodHuman: formatRussianDate(period),
      daysUntilPeriod: diffInDays(today, period),
      daysUntilPeriodWord: getDaysWord(Math.abs(diffInDays(today, period))),
      daysUntilOvulation: diffInDays(today, ovulation),
      daysWord: getDaysWord(Math.abs(diffInDays(today, ovulation))),
      daysPastPrediction: 0,
      daysPastPredictionWord: getDaysWord(0),
      periodStartHuman: formatRussianDate(addDays(today, -1)),
      daysSincePeriodStart: 1,
      daysSincePeriodStartWord: getDaysWord(1),
      birthdayHuman: formatRussianDate(today),
      birthdayAge: getNastiaAgeOn(today),
      isBirthday: isNastiaBirthday(today),
    };

    const message = await generateMorningBrief(context);
    console.log('Morning brief preview:');
    console.log(JSON.stringify(message, null, 2));
    process.exit(0);
  })().catch(error => {
    console.error('Preview generation failed:', error);
    process.exit(1);
  });
} else {
  main();
}
